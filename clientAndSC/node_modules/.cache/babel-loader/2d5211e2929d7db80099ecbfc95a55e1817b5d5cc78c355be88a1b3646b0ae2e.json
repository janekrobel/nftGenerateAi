{"ast":null,"code":"import { __assign } from \"tslib\";\n/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { captureException, getCurrentHub, startTransaction, withScope } from '@sentry/core';\nimport { extractTraceparentData } from '@sentry/tracing';\nimport { extractNodeRequestData, forget, isPlainObject, isString, logger, stripUrlQueryAndFragment } from '@sentry/utils';\nimport * as domain from 'domain';\nimport * as os from 'os';\nimport { flush } from './sdk';\nvar DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n/**\n * Express-compatible tracing handler.\n * @see Exposed as `Handlers.tracingHandler`\n */\nexport function tracingHandler() {\n  return function sentryTracingMiddleware(req, res, next) {\n    // If there is a trace header set, we extract the data from it (parentSpanId, traceId, and sampling decision)\n    var traceparentData;\n    if (req.headers && isString(req.headers['sentry-trace'])) {\n      traceparentData = extractTraceparentData(req.headers['sentry-trace']);\n    }\n    var transaction = startTransaction(__assign({\n      name: extractExpressTransactionName(req, {\n        path: true,\n        method: true\n      }),\n      op: 'http.server'\n    }, traceparentData));\n    // We put the transaction on the scope so users can attach children to it\n    getCurrentHub().configureScope(function (scope) {\n      scope.setSpan(transaction);\n    });\n    // We also set __sentry_transaction on the response so people can grab the transaction there to add\n    // spans to it later.\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    res.__sentry_transaction = transaction;\n    res.once('finish', function () {\n      // Push `transaction.finish` to the next event loop so open spans have a chance to finish before the transaction\n      // closes\n      setImmediate(function () {\n        addExpressReqToTransaction(transaction, req);\n        transaction.setHttpStatus(res.statusCode);\n        transaction.finish();\n      });\n    });\n    next();\n  };\n}\n/**\n * Set parameterized as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */\nfunction addExpressReqToTransaction(transaction, req) {\n  if (!transaction) return;\n  transaction.name = extractExpressTransactionName(req, {\n    path: true,\n    method: true\n  });\n  transaction.setData('url', req.originalUrl);\n  transaction.setData('baseUrl', req.baseUrl);\n  transaction.setData('query', req.query);\n}\n/**\n * Extracts complete generalized path from the request object and uses it to construct transaction name.\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req The ExpressRequest object\n * @param options What to include in the transaction name (method, path, or both)\n *\n * @returns The fully constructed transaction name\n */\nfunction extractExpressTransactionName(req, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  var _a;\n  var method = (_a = req.method) === null || _a === void 0 ? void 0 : _a.toUpperCase();\n  var path = '';\n  if (req.route) {\n    // if the mountpoint is `/`, req.baseUrl is '' (not undefined), so it's safe to include it here\n    // see https://github.com/expressjs/express/blob/508936853a6e311099c9985d4c11a4b1b8f6af07/test/req.baseUrl.js#L7\n    path = \"\" + req.baseUrl + req.route.path;\n  } else if (req.originalUrl || req.url) {\n    path = stripUrlQueryAndFragment(req.originalUrl || req.url || '');\n  }\n  var info = '';\n  if (options.method && method) {\n    info += method;\n  }\n  if (options.method && options.path) {\n    info += \" \";\n  }\n  if (options.path && path) {\n    info += path;\n  }\n  return info;\n}\n/** JSDoc */\nfunction extractTransaction(req, type) {\n  var _a;\n  switch (type) {\n    case 'path':\n      {\n        return extractExpressTransactionName(req, {\n          path: true\n        });\n      }\n    case 'handler':\n      {\n        return ((_a = req.route) === null || _a === void 0 ? void 0 : _a.stack[0].name) || '<anonymous>';\n      }\n    case 'methodPath':\n    default:\n      {\n        return extractExpressTransactionName(req, {\n          path: true,\n          method: true\n        });\n      }\n  }\n}\n/** Default user keys that'll be used to extract data from the request */\nvar DEFAULT_USER_KEYS = ['id', 'username', 'email'];\n/** JSDoc */\nfunction extractUserData(user, keys) {\n  var extractedUser = {};\n  var attributes = Array.isArray(keys) ? keys : DEFAULT_USER_KEYS;\n  attributes.forEach(function (key) {\n    if (user && key in user) {\n      extractedUser[key] = user[key];\n    }\n  });\n  return extractedUser;\n}\n/**\n * Enriches passed event with request data.\n *\n * @param event Will be mutated and enriched with req data\n * @param req Request object\n * @param options object containing flags to enable functionality\n * @hidden\n */\nexport function parseRequest(event, req, options) {\n  // eslint-disable-next-line no-param-reassign\n  options = __assign({\n    ip: false,\n    request: true,\n    serverName: true,\n    transaction: true,\n    user: true,\n    version: true\n  }, options);\n  if (options.version) {\n    event.contexts = __assign(__assign({}, event.contexts), {\n      runtime: {\n        name: 'node',\n        version: global.process.version\n      }\n    });\n  }\n  if (options.request) {\n    // if the option value is `true`, use the default set of keys by not passing anything to `extractNodeRequestData()`\n    var extractedRequestData = Array.isArray(options.request) ? extractNodeRequestData(req, options.request) : extractNodeRequestData(req);\n    event.request = __assign(__assign({}, event.request), extractedRequestData);\n  }\n  if (options.serverName && !event.server_name) {\n    event.server_name = global.process.env.SENTRY_NAME || os.hostname();\n  }\n  if (options.user) {\n    var extractedUser = req.user && isPlainObject(req.user) ? extractUserData(req.user, options.user) : {};\n    if (Object.keys(extractedUser)) {\n      event.user = __assign(__assign({}, event.user), extractedUser);\n    }\n  }\n  // client ip:\n  //   node: req.connection.remoteAddress\n  //   express, koa: req.ip\n  if (options.ip) {\n    var ip = req.ip || req.connection && req.connection.remoteAddress;\n    if (ip) {\n      event.user = __assign(__assign({}, event.user), {\n        ip_address: ip\n      });\n    }\n  }\n  if (options.transaction && !event.transaction) {\n    event.transaction = extractTransaction(req, options.transaction);\n  }\n  return event;\n}\n/**\n * Express compatible request handler.\n * @see Exposed as `Handlers.requestHandler`\n */\nexport function requestHandler(options) {\n  return function sentryRequestMiddleware(req, res, next) {\n    if (options && options.flushTimeout && options.flushTimeout > 0) {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      var _end_1 = res.end;\n      res.end = function (chunk, encoding, cb) {\n        var _this = this;\n        flush(options.flushTimeout).then(function () {\n          _end_1.call(_this, chunk, encoding, cb);\n        }).then(null, function (e) {\n          logger.error(e);\n        });\n      };\n    }\n    var local = domain.create();\n    local.add(req);\n    local.add(res);\n    local.on('error', next);\n    local.run(function () {\n      getCurrentHub().configureScope(function (scope) {\n        return scope.addEventProcessor(function (event) {\n          return parseRequest(event, req, options);\n        });\n      });\n      next();\n    });\n  };\n}\n/** JSDoc */\nfunction getStatusCodeFromResponse(error) {\n  var statusCode = error.status || error.statusCode || error.status_code || error.output && error.output.statusCode;\n  return statusCode ? parseInt(statusCode, 10) : 500;\n}\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error) {\n  var status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n/**\n * Express compatible error handler.\n * @see Exposed as `Handlers.errorHandler`\n */\nexport function errorHandler(options) {\n  return function sentryErrorMiddleware(error, _req, res, next) {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    var shouldHandleError = options && options.shouldHandleError || defaultShouldHandleError;\n    if (shouldHandleError(error)) {\n      withScope(function (_scope) {\n        // For some reason we need to set the transaction on the scope again\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        var transaction = res.__sentry_transaction;\n        if (transaction && _scope.getSpan() === undefined) {\n          _scope.setSpan(transaction);\n        }\n        var eventId = captureException(error);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        res.sentry = eventId;\n        next(error);\n      });\n      return;\n    }\n    next(error);\n  };\n}\n/**\n * @hidden\n */\nexport function logAndExitProcess(error) {\n  // eslint-disable-next-line no-console\n  console.error(error && error.stack ? error.stack : error);\n  var client = getCurrentHub().getClient();\n  if (client === undefined) {\n    logger.warn('No NodeClient was defined, we are exiting the process now.');\n    global.process.exit(1);\n    return;\n  }\n  var options = client.getOptions();\n  var timeout = options && options.shutdownTimeout && options.shutdownTimeout > 0 && options.shutdownTimeout || DEFAULT_SHUTDOWN_TIMEOUT;\n  forget(client.close(timeout).then(function (result) {\n    if (!result) {\n      logger.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n    }\n    global.process.exit(1);\n  }));\n}","map":{"version":3,"mappings":"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","names":["captureException","getCurrentHub","startTransaction","withScope","extractTraceparentData","extractNodeRequestData","forget","isPlainObject","isString","logger","stripUrlQueryAndFragment","domain","os","flush","DEFAULT_SHUTDOWN_TIMEOUT","tracingHandler","sentryTracingMiddleware","req","res","next","traceparentData","headers","transaction","name","extractExpressTransactionName","path","method","op","configureScope","scope","setSpan","__sentry_transaction","once","setImmediate","addExpressReqToTransaction","setHttpStatus","statusCode","finish","setData","originalUrl","baseUrl","query","options","toUpperCase","route","url","info","extractTransaction","type","stack","DEFAULT_USER_KEYS","extractUserData","user","keys","extractedUser","attributes","Array","isArray","forEach","key","parseRequest","event","ip","request","serverName","version","contexts","runtime","global","process","extractedRequestData","server_name","env","SENTRY_NAME","hostname","Object","connection","remoteAddress","ip_address","requestHandler","sentryRequestMiddleware","flushTimeout","_end_1","end","chunk","encoding","cb","then","call","_this","error","e","local","create","add","on","run","addEventProcessor","getStatusCodeFromResponse","status","status_code","output","parseInt","defaultShouldHandleError","errorHandler","sentryErrorMiddleware","_req","shouldHandleError","_scope","getSpan","undefined","eventId","sentry","logAndExitProcess","console","client","getClient","warn","exit","getOptions","timeout","shutdownTimeout","close","result"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@sentry/node/src/handlers.ts"],"sourcesContent":["/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { captureException, getCurrentHub, startTransaction, withScope } from '@sentry/core';\nimport { extractTraceparentData, Span } from '@sentry/tracing';\nimport { Event, Transaction } from '@sentry/types';\nimport {\n  extractNodeRequestData,\n  forget,\n  isPlainObject,\n  isString,\n  logger,\n  stripUrlQueryAndFragment,\n} from '@sentry/utils';\nimport * as domain from 'domain';\nimport * as http from 'http';\nimport * as os from 'os';\n\nimport { NodeClient } from './client';\nimport { flush } from './sdk';\n\nconst DEFAULT_SHUTDOWN_TIMEOUT = 2000;\n\nexport interface ExpressRequest extends http.IncomingMessage {\n  [key: string]: any;\n  baseUrl?: string;\n  ip?: string;\n  originalUrl?: string;\n  route?: {\n    path: string;\n    stack: [\n      {\n        name: string;\n      },\n    ];\n  };\n  user?: {\n    [key: string]: any;\n  };\n}\n\n/**\n * Express-compatible tracing handler.\n * @see Exposed as `Handlers.tracingHandler`\n */\nexport function tracingHandler(): (\n  req: http.IncomingMessage,\n  res: http.ServerResponse,\n  next: (error?: any) => void,\n) => void {\n  return function sentryTracingMiddleware(\n    req: http.IncomingMessage,\n    res: http.ServerResponse,\n    next: (error?: any) => void,\n  ): void {\n    // If there is a trace header set, we extract the data from it (parentSpanId, traceId, and sampling decision)\n    let traceparentData;\n    if (req.headers && isString(req.headers['sentry-trace'])) {\n      traceparentData = extractTraceparentData(req.headers['sentry-trace'] as string);\n    }\n\n    const transaction = startTransaction({\n      name: extractExpressTransactionName(req, { path: true, method: true }),\n      op: 'http.server',\n      ...traceparentData,\n    });\n\n    // We put the transaction on the scope so users can attach children to it\n    getCurrentHub().configureScope(scope => {\n      scope.setSpan(transaction);\n    });\n\n    // We also set __sentry_transaction on the response so people can grab the transaction there to add\n    // spans to it later.\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    (res as any).__sentry_transaction = transaction;\n\n    res.once('finish', () => {\n      // Push `transaction.finish` to the next event loop so open spans have a chance to finish before the transaction\n      // closes\n      setImmediate(() => {\n        addExpressReqToTransaction(transaction, req);\n        transaction.setHttpStatus(res.statusCode);\n        transaction.finish();\n      });\n    });\n\n    next();\n  };\n}\n\n/**\n * Set parameterized as transaction name e.g.: `GET /users/:id`\n * Also adds more context data on the transaction from the request\n */\nfunction addExpressReqToTransaction(transaction: Transaction | undefined, req: ExpressRequest): void {\n  if (!transaction) return;\n  transaction.name = extractExpressTransactionName(req, { path: true, method: true });\n  transaction.setData('url', req.originalUrl);\n  transaction.setData('baseUrl', req.baseUrl);\n  transaction.setData('query', req.query);\n}\n\n/**\n * Extracts complete generalized path from the request object and uses it to construct transaction name.\n *\n * eg. GET /mountpoint/user/:id\n *\n * @param req The ExpressRequest object\n * @param options What to include in the transaction name (method, path, or both)\n *\n * @returns The fully constructed transaction name\n */\nfunction extractExpressTransactionName(\n  req: ExpressRequest,\n  options: { path?: boolean; method?: boolean } = {},\n): string {\n  const method = req.method?.toUpperCase();\n\n  let path = '';\n  if (req.route) {\n    // if the mountpoint is `/`, req.baseUrl is '' (not undefined), so it's safe to include it here\n    // see https://github.com/expressjs/express/blob/508936853a6e311099c9985d4c11a4b1b8f6af07/test/req.baseUrl.js#L7\n    path = `${req.baseUrl}${req.route.path}`;\n  } else if (req.originalUrl || req.url) {\n    path = stripUrlQueryAndFragment(req.originalUrl || req.url || '');\n  }\n\n  let info = '';\n  if (options.method && method) {\n    info += method;\n  }\n  if (options.method && options.path) {\n    info += ` `;\n  }\n  if (options.path && path) {\n    info += path;\n  }\n\n  return info;\n}\n\ntype TransactionNamingScheme = 'path' | 'methodPath' | 'handler';\n\n/** JSDoc */\nfunction extractTransaction(req: ExpressRequest, type: boolean | TransactionNamingScheme): string {\n  switch (type) {\n    case 'path': {\n      return extractExpressTransactionName(req, { path: true });\n    }\n    case 'handler': {\n      return req.route?.stack[0].name || '<anonymous>';\n    }\n    case 'methodPath':\n    default: {\n      return extractExpressTransactionName(req, { path: true, method: true });\n    }\n  }\n}\n\n/** Default user keys that'll be used to extract data from the request */\nconst DEFAULT_USER_KEYS = ['id', 'username', 'email'];\n\n/** JSDoc */\nfunction extractUserData(\n  user: {\n    [key: string]: any;\n  },\n  keys: boolean | string[],\n): { [key: string]: any } {\n  const extractedUser: { [key: string]: any } = {};\n  const attributes = Array.isArray(keys) ? keys : DEFAULT_USER_KEYS;\n\n  attributes.forEach(key => {\n    if (user && key in user) {\n      extractedUser[key] = user[key];\n    }\n  });\n\n  return extractedUser;\n}\n\n/**\n * Options deciding what parts of the request to use when enhancing an event\n */\nexport interface ParseRequestOptions {\n  ip?: boolean;\n  request?: boolean | string[];\n  serverName?: boolean;\n  transaction?: boolean | TransactionNamingScheme;\n  user?: boolean | string[];\n  version?: boolean;\n}\n\n/**\n * Enriches passed event with request data.\n *\n * @param event Will be mutated and enriched with req data\n * @param req Request object\n * @param options object containing flags to enable functionality\n * @hidden\n */\nexport function parseRequest(event: Event, req: ExpressRequest, options?: ParseRequestOptions): Event {\n  // eslint-disable-next-line no-param-reassign\n  options = {\n    ip: false,\n    request: true,\n    serverName: true,\n    transaction: true,\n    user: true,\n    version: true,\n    ...options,\n  };\n\n  if (options.version) {\n    event.contexts = {\n      ...event.contexts,\n      runtime: {\n        name: 'node',\n        version: global.process.version,\n      },\n    };\n  }\n\n  if (options.request) {\n    // if the option value is `true`, use the default set of keys by not passing anything to `extractNodeRequestData()`\n    const extractedRequestData = Array.isArray(options.request)\n      ? extractNodeRequestData(req, options.request)\n      : extractNodeRequestData(req);\n    event.request = {\n      ...event.request,\n      ...extractedRequestData,\n    };\n  }\n\n  if (options.serverName && !event.server_name) {\n    event.server_name = global.process.env.SENTRY_NAME || os.hostname();\n  }\n\n  if (options.user) {\n    const extractedUser = req.user && isPlainObject(req.user) ? extractUserData(req.user, options.user) : {};\n\n    if (Object.keys(extractedUser)) {\n      event.user = {\n        ...event.user,\n        ...extractedUser,\n      };\n    }\n  }\n\n  // client ip:\n  //   node: req.connection.remoteAddress\n  //   express, koa: req.ip\n  if (options.ip) {\n    const ip = req.ip || (req.connection && req.connection.remoteAddress);\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip,\n      };\n    }\n  }\n\n  if (options.transaction && !event.transaction) {\n    event.transaction = extractTransaction(req, options.transaction);\n  }\n\n  return event;\n}\n\nexport type RequestHandlerOptions = ParseRequestOptions & {\n  flushTimeout?: number;\n};\n\n/**\n * Express compatible request handler.\n * @see Exposed as `Handlers.requestHandler`\n */\nexport function requestHandler(\n  options?: RequestHandlerOptions,\n): (req: http.IncomingMessage, res: http.ServerResponse, next: (error?: any) => void) => void {\n  return function sentryRequestMiddleware(\n    req: http.IncomingMessage,\n    res: http.ServerResponse,\n    next: (error?: any) => void,\n  ): void {\n    if (options && options.flushTimeout && options.flushTimeout > 0) {\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      const _end = res.end;\n      res.end = function(chunk?: any | (() => void), encoding?: string | (() => void), cb?: () => void): void {\n        flush(options.flushTimeout)\n          .then(() => {\n            _end.call(this, chunk, encoding, cb);\n          })\n          .then(null, e => {\n            logger.error(e);\n          });\n      };\n    }\n    const local = domain.create();\n    local.add(req);\n    local.add(res);\n    local.on('error', next);\n    local.run(() => {\n      getCurrentHub().configureScope(scope =>\n        scope.addEventProcessor((event: Event) => parseRequest(event, req, options)),\n      );\n      next();\n    });\n  };\n}\n\n/** JSDoc */\ninterface MiddlewareError extends Error {\n  status?: number | string;\n  statusCode?: number | string;\n  status_code?: number | string;\n  output?: {\n    statusCode?: number | string;\n  };\n}\n\n/** JSDoc */\nfunction getStatusCodeFromResponse(error: MiddlewareError): number {\n  const statusCode = error.status || error.statusCode || error.status_code || (error.output && error.output.statusCode);\n  return statusCode ? parseInt(statusCode as string, 10) : 500;\n}\n\n/** Returns true if response code is internal server error */\nfunction defaultShouldHandleError(error: MiddlewareError): boolean {\n  const status = getStatusCodeFromResponse(error);\n  return status >= 500;\n}\n\n/**\n * Express compatible error handler.\n * @see Exposed as `Handlers.errorHandler`\n */\nexport function errorHandler(options?: {\n  /**\n   * Callback method deciding whether error should be captured and sent to Sentry\n   * @param error Captured middleware error\n   */\n  shouldHandleError?(error: MiddlewareError): boolean;\n}): (\n  error: MiddlewareError,\n  req: http.IncomingMessage,\n  res: http.ServerResponse,\n  next: (error: MiddlewareError) => void,\n) => void {\n  return function sentryErrorMiddleware(\n    error: MiddlewareError,\n    _req: http.IncomingMessage,\n    res: http.ServerResponse,\n    next: (error: MiddlewareError) => void,\n  ): void {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const shouldHandleError = (options && options.shouldHandleError) || defaultShouldHandleError;\n\n    if (shouldHandleError(error)) {\n      withScope(_scope => {\n        // For some reason we need to set the transaction on the scope again\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const transaction = (res as any).__sentry_transaction as Span;\n        if (transaction && _scope.getSpan() === undefined) {\n          _scope.setSpan(transaction);\n        }\n        const eventId = captureException(error);\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        (res as any).sentry = eventId;\n        next(error);\n      });\n\n      return;\n    }\n\n    next(error);\n  };\n}\n\n/**\n * @hidden\n */\nexport function logAndExitProcess(error: Error): void {\n  // eslint-disable-next-line no-console\n  console.error(error && error.stack ? error.stack : error);\n\n  const client = getCurrentHub().getClient<NodeClient>();\n\n  if (client === undefined) {\n    logger.warn('No NodeClient was defined, we are exiting the process now.');\n    global.process.exit(1);\n    return;\n  }\n\n  const options = client.getOptions();\n  const timeout =\n    (options && options.shutdownTimeout && options.shutdownTimeout > 0 && options.shutdownTimeout) ||\n    DEFAULT_SHUTDOWN_TIMEOUT;\n  forget(\n    client.close(timeout).then((result: boolean) => {\n      if (!result) {\n        logger.warn('We reached the timeout for emptying the request buffer, still exiting now!');\n      }\n      global.process.exit(1);\n    }),\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}