{"ast":null,"code":"const ethers = require('ethers');\nlet currentAccount = \"\";\nlet provider;\nlet signer;\nexports.connectToMetamask = async () => {\n  if (window.ethereum) {\n    try {\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      currentAccount = accounts[0];\n      provider = new ethers.providers.Web3Provider(window.ethereum);\n      signer = provider.getSigner();\n    } catch (err) {\n      console.log(err);\n    }\n  }\n};","map":{"version":3,"names":["ethers","require","currentAccount","provider","signer","exports","connectToMetamask","window","ethereum","accounts","request","method","providers","Web3Provider","getSigner","err","console","log"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/src/contractModel.js"],"sourcesContent":["const ethers = require('ethers');\nlet currentAccount = \"\";\nlet provider;\nlet signer;\n\nexports.connectToMetamask = async () => {\n    if(window.ethereum) {\n        try{\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n            currentAccount = accounts[0];\n\n            provider = new ethers.providers.Web3Provider(window.ethereum)\n            signer = provider.getSigner()\n             \n        }\n        catch(err){\n            console.log(err);\n        }\n    }\n}\n\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,IAAIC,cAAc,GAAG,EAAE;AACvB,IAAIC,QAAQ;AACZ,IAAIC,MAAM;AAEVC,OAAO,CAACC,iBAAiB,GAAG,YAAY;EACpC,IAAGC,MAAM,CAACC,QAAQ,EAAE;IAChB,IAAG;MACC,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;QAC3CC,MAAM,EAAE;MACZ,CAAC,CAAC;MACFT,cAAc,GAAGO,QAAQ,CAAC,CAAC,CAAC;MAE5BN,QAAQ,GAAG,IAAIH,MAAM,CAACY,SAAS,CAACC,YAAY,CAACN,MAAM,CAACC,QAAQ,CAAC;MAC7DJ,MAAM,GAAGD,QAAQ,CAACW,SAAS,EAAE;IAEjC,CAAC,CACD,OAAMC,GAAG,EAAC;MACNC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IACpB;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}