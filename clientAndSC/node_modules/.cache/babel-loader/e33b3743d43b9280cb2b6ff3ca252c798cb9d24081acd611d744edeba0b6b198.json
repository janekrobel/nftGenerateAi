{"ast":null,"code":"\"use strict\";\n\n/**\n *  About networks\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Network = void 0;\nconst index_js_1 = require(\"../transaction/index.js\");\nconst index_js_2 = require(\"../utils/index.js\");\nconst plugins_network_js_1 = require(\"./plugins-network.js\");\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\n/* * * *\nexport class PriceOraclePlugin extends NetworkPlugin {\n    readonly address!: string;\n\n    constructor(address: string) {\n        super(\"org.ethers.plugins.price-oracle\");\n        defineProperties<PriceOraclePlugin>(this, { address });\n    }\n\n    clone(): PriceOraclePlugin {\n        return new PriceOraclePlugin(this.address);\n    }\n}\n*/\n// Networks or clients with a higher need for security (such as clients\n// that may automatically make CCIP requests without user interaction)\n// can use this plugin to anonymize requests or intercept CCIP requests\n// to notify and/or receive authorization from the user\n/* * * *\nexport type FetchDataFunc = (req: Frozen<FetchRequest>) => Promise<FetchRequest>;\nexport class CcipPreflightPlugin extends NetworkPlugin {\n    readonly fetchData!: FetchDataFunc;\n\n    constructor(fetchData: FetchDataFunc) {\n        super(\"org.ethers.plugins.ccip-preflight\");\n        defineProperties<CcipPreflightPlugin>(this, { fetchData });\n    }\n\n    clone(): CcipPreflightPlugin {\n        return new CcipPreflightPlugin(this.fetchData);\n    }\n}\n*/\nconst Networks = new Map();\n// @TODO: Add a _ethersNetworkObj variable to better detect network ovjects\nclass Network {\n  #name;\n  #chainId;\n  #plugins;\n  constructor(name, chainId) {\n    this.#name = name;\n    this.#chainId = (0, index_js_2.getBigInt)(chainId);\n    this.#plugins = new Map();\n  }\n  toJSON() {\n    return {\n      name: this.name,\n      chainId: this.chainId\n    };\n  }\n  get name() {\n    return this.#name;\n  }\n  set name(value) {\n    this.#name = value;\n  }\n  get chainId() {\n    return this.#chainId;\n  }\n  set chainId(value) {\n    this.#chainId = (0, index_js_2.getBigInt)(value, \"chainId\");\n  }\n  get plugins() {\n    return Array.from(this.#plugins.values());\n  }\n  attachPlugin(plugin) {\n    if (this.#plugins.get(plugin.name)) {\n      throw new Error(`cannot replace existing plugin: ${plugin.name} `);\n    }\n    this.#plugins.set(plugin.name, plugin.clone());\n    return this;\n  }\n  getPlugin(name) {\n    return this.#plugins.get(name) || null;\n  }\n  // Gets a list of Plugins which match basename, ignoring any fragment\n  getPlugins(basename) {\n    return this.plugins.filter(p => p.name.split(\"#\")[0] === basename);\n  }\n  clone() {\n    const clone = new Network(this.name, this.chainId);\n    this.plugins.forEach(plugin => {\n      clone.attachPlugin(plugin.clone());\n    });\n    return clone;\n  }\n  computeIntrinsicGas(tx) {\n    const costs = this.getPlugin(\"org.ethers.plugins.network.GasCost\") || new plugins_network_js_1.GasCostPlugin();\n    let gas = costs.txBase;\n    if (tx.to == null) {\n      gas += costs.txCreate;\n    }\n    if (tx.data) {\n      for (let i = 2; i < tx.data.length; i += 2) {\n        if (tx.data.substring(i, i + 2) === \"00\") {\n          gas += costs.txDataZero;\n        } else {\n          gas += costs.txDataNonzero;\n        }\n      }\n    }\n    if (tx.accessList) {\n      const accessList = (0, index_js_1.accessListify)(tx.accessList);\n      for (const addr in accessList) {\n        gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n      }\n    }\n    return gas;\n  }\n  /**\n   *  Returns a new Network for the %%network%% name or chainId.\n   */\n  static from(network) {\n    injectCommonNetworks();\n    // Default network\n    if (network == null) {\n      return Network.from(\"mainnet\");\n    }\n    // Canonical name or chain ID\n    if (typeof network === \"number\") {\n      network = BigInt(network);\n    }\n    if (typeof network === \"string\" || typeof network === \"bigint\") {\n      const networkFunc = Networks.get(network);\n      if (networkFunc) {\n        return networkFunc();\n      }\n      if (typeof network === \"bigint\") {\n        return new Network(\"unknown\", network);\n      }\n      (0, index_js_2.assertArgument)(false, \"unknown network\", \"network\", network);\n    }\n    // Clonable with network-like abilities\n    if (typeof network.clone === \"function\") {\n      const clone = network.clone();\n      //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n      //}\n      return clone;\n    }\n    // Networkish\n    if (typeof network === \"object\") {\n      (0, index_js_2.assertArgument)(typeof network.name === \"string\" && typeof network.chainId === \"number\", \"invalid network object name or chainId\", \"network\", network);\n      const custom = new Network(network.name, network.chainId);\n      if (network.ensAddress || network.ensNetwork != null) {\n        custom.attachPlugin(new plugins_network_js_1.EnsPlugin(network.ensAddress, network.ensNetwork));\n      }\n      //if ((<any>network).layerOneConnection) {\n      //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n      //}\n      return custom;\n    }\n    (0, index_js_2.assertArgument)(false, \"invalid network\", \"network\", network);\n  }\n  /**\n   *  Register %%nameOrChainId%% with a function which returns\n   *  an instance of a Network representing that chain.\n   */\n  static register(nameOrChainId, networkFunc) {\n    if (typeof nameOrChainId === \"number\") {\n      nameOrChainId = BigInt(nameOrChainId);\n    }\n    const existing = Networks.get(nameOrChainId);\n    if (existing) {\n      (0, index_js_2.assertArgument)(false, `conflicting network for ${JSON.stringify(existing.name)}`, \"nameOrChainId\", nameOrChainId);\n    }\n    Networks.set(nameOrChainId, networkFunc);\n  }\n}\nexports.Network = Network;\n// See: https://chainlist.org\nlet injected = false;\nfunction injectCommonNetworks() {\n  if (injected) {\n    return;\n  }\n  injected = true;\n  /// Register popular Ethereum networks\n  function registerEth(name, chainId, options) {\n    const func = function () {\n      const network = new Network(name, chainId);\n      // We use 0 to disable ENS\n      if (options.ensNetwork != null) {\n        network.attachPlugin(new plugins_network_js_1.EnsPlugin(null, options.ensNetwork));\n      }\n      if (options.priorityFee) {\n        //                network.attachPlugin(new MaxPriorityFeePlugin(options.priorityFee));\n      }\n      /*\n                  if (options.etherscan) {\n                      const { url, apiKey } = options.etherscan;\n                      network.attachPlugin(new EtherscanPlugin(url, apiKey));\n                  }\n      */\n      network.attachPlugin(new plugins_network_js_1.GasCostPlugin());\n      return network;\n    };\n    // Register the network by name and chain ID\n    Network.register(name, func);\n    Network.register(chainId, func);\n    if (options.altNames) {\n      options.altNames.forEach(name => {\n        Network.register(name, func);\n      });\n    }\n  }\n  registerEth(\"mainnet\", 1, {\n    ensNetwork: 1,\n    altNames: [\"homestead\"]\n  });\n  registerEth(\"ropsten\", 3, {\n    ensNetwork: 3\n  });\n  registerEth(\"rinkeby\", 4, {\n    ensNetwork: 4\n  });\n  registerEth(\"goerli\", 5, {\n    ensNetwork: 5\n  });\n  registerEth(\"kovan\", 42, {\n    ensNetwork: 42\n  });\n  registerEth(\"classic\", 61, {});\n  registerEth(\"classicKotti\", 6, {});\n  registerEth(\"xdai\", 100, {\n    ensNetwork: 1\n  });\n  registerEth(\"optimism\", 10, {\n    ensNetwork: 1,\n    etherscan: {\n      url: \"https:/\\/api-optimistic.etherscan.io/\"\n    }\n  });\n  registerEth(\"optimism-goerli\", 420, {\n    etherscan: {\n      url: \"https:/\\/api-goerli-optimistic.etherscan.io/\"\n    }\n  });\n  registerEth(\"arbitrum\", 42161, {\n    ensNetwork: 1,\n    etherscan: {\n      url: \"https:/\\/api.arbiscan.io/\"\n    }\n  });\n  registerEth(\"arbitrum-goerli\", 421613, {\n    etherscan: {\n      url: \"https:/\\/api-goerli.arbiscan.io/\"\n    }\n  });\n  // Polygon has a 35 gwei maxPriorityFee requirement\n  registerEth(\"matic\", 137, {\n    ensNetwork: 1,\n    //        priorityFee: 35000000000,\n    etherscan: {\n      //            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n      url: \"https:/\\/api.polygonscan.com/\"\n    }\n  });\n  registerEth(\"matic-mumbai\", 80001, {\n    altNames: [\"maticMumbai\", \"maticmum\"],\n    //        priorityFee: 35000000000,\n    etherscan: {\n      //            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n      url: \"https:/\\/api-testnet.polygonscan.com/\"\n    }\n  });\n  registerEth(\"bnb\", 56, {\n    ensNetwork: 1,\n    etherscan: {\n      //            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n      url: \"http:/\\/api.bscscan.com\"\n    }\n  });\n  registerEth(\"bnbt\", 97, {\n    etherscan: {\n      //            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n      url: \"http:/\\/api-testnet.bscscan.com\"\n    }\n  });\n}","map":{"version":3,"mappings":"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","names":["Networks","Map","Network","constructor","name","chainId","toJSON","value","plugins","Array","from","values","attachPlugin","plugin","get","Error","set","clone","getPlugin","getPlugins","basename","filter","p","split","forEach","computeIntrinsicGas","tx","costs","plugins_network_js_1","gas","txBase","to","txCreate","data","i","length","substring","txDataZero","txDataNonzero","accessList","addr","txAccessListAddress","txAccessListStorageKey","storageKeys","network","injectCommonNetworks","BigInt","networkFunc","custom","ensAddress","ensNetwork","register","nameOrChainId","existing","JSON","stringify","exports","injected","registerEth","options","func","priorityFee","altNames","etherscan","url"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/providers/network.ts"],"sourcesContent":["/**\n *  About networks\n *\n *  @_subsection: api/providers:Networks  [networks]\n */\n\nimport { accessListify } from \"../transaction/index.js\";\nimport { getBigInt, assertArgument } from \"../utils/index.js\";\n\nimport { EnsPlugin, GasCostPlugin } from \"./plugins-network.js\";\n//import { EtherscanPlugin } from \"./provider-etherscan-base.js\";\n\nimport type { BigNumberish } from \"../utils/index.js\";\nimport type { TransactionLike } from \"../transaction/index.js\";\n\nimport type { NetworkPlugin } from \"./plugins-network.js\";\n\n\n/**\n *  A Networkish can be used to allude to a Network, by specifing:\n *  - a [[Network]] object\n *  - a well-known (or registered) network name\n *  - a well-known (or registered) chain ID\n *  - an object with sufficient details to describe a network\n */\nexport type Networkish = Network | number | bigint | string | {\n    name?: string,\n    chainId?: number,\n    //layerOneConnection?: Provider,\n    ensAddress?: string,\n    ensNetwork?: number\n};\n\n\n\n\n/* * * *\n// Networks which operation against an L2 can use this plugin to\n// specify how to access L1, for the purpose of resolving ENS,\n// for example.\nexport class LayerOneConnectionPlugin extends NetworkPlugin {\n    readonly provider!: Provider;\n// @TODO: Rename to ChainAccess and allow for connecting to any chain\n    constructor(provider: Provider) {\n        super(\"org.ethers.plugins.layer-one-connection\");\n        defineProperties<LayerOneConnectionPlugin>(this, { provider });\n    }\n\n    clone(): LayerOneConnectionPlugin {\n        return new LayerOneConnectionPlugin(this.provider);\n    }\n}\n*/\n\n/* * * *\nexport class PriceOraclePlugin extends NetworkPlugin {\n    readonly address!: string;\n\n    constructor(address: string) {\n        super(\"org.ethers.plugins.price-oracle\");\n        defineProperties<PriceOraclePlugin>(this, { address });\n    }\n\n    clone(): PriceOraclePlugin {\n        return new PriceOraclePlugin(this.address);\n    }\n}\n*/\n\n// Networks or clients with a higher need for security (such as clients\n// that may automatically make CCIP requests without user interaction)\n// can use this plugin to anonymize requests or intercept CCIP requests\n// to notify and/or receive authorization from the user\n/* * * *\nexport type FetchDataFunc = (req: Frozen<FetchRequest>) => Promise<FetchRequest>;\nexport class CcipPreflightPlugin extends NetworkPlugin {\n    readonly fetchData!: FetchDataFunc;\n\n    constructor(fetchData: FetchDataFunc) {\n        super(\"org.ethers.plugins.ccip-preflight\");\n        defineProperties<CcipPreflightPlugin>(this, { fetchData });\n    }\n\n    clone(): CcipPreflightPlugin {\n        return new CcipPreflightPlugin(this.fetchData);\n    }\n}\n*/\n\nconst Networks: Map<string | bigint, () => Network> = new Map();\n\n// @TODO: Add a _ethersNetworkObj variable to better detect network ovjects\n\nexport class Network {\n    #name: string;\n    #chainId: bigint;\n\n    #plugins: Map<string, NetworkPlugin>;\n\n    constructor(name: string, chainId: BigNumberish) {\n        this.#name = name;\n        this.#chainId = getBigInt(chainId);\n        this.#plugins = new Map();\n    }\n\n    toJSON(): any {\n        return { name: this.name, chainId: this.chainId };\n    }\n\n    get name(): string { return this.#name; }\n    set name(value: string) { this.#name =  value; }\n\n    get chainId(): bigint { return this.#chainId; }\n    set chainId(value: BigNumberish) { this.#chainId = getBigInt(value, \"chainId\"); }\n\n    get plugins(): Array<NetworkPlugin> {\n        return Array.from(this.#plugins.values());\n    }\n\n    attachPlugin(plugin: NetworkPlugin): this {\n        if (this.#plugins.get(plugin.name)) {\n            throw new Error(`cannot replace existing plugin: ${ plugin.name } `);\n        }\n        this.#plugins.set(plugin.name, plugin.clone());\n        return this;\n    }\n\n    getPlugin<T extends NetworkPlugin = NetworkPlugin>(name: string): null | T {\n        return <T>(this.#plugins.get(name)) || null;\n    }\n\n    // Gets a list of Plugins which match basename, ignoring any fragment\n    getPlugins<T extends NetworkPlugin = NetworkPlugin>(basename: string): Array<T> {\n        return <Array<T>>(this.plugins.filter((p) => (p.name.split(\"#\")[0] === basename)));\n    }\n\n    clone(): Network {\n        const clone = new Network(this.name, this.chainId);\n        this.plugins.forEach((plugin) => {\n            clone.attachPlugin(plugin.clone());\n        });\n        return clone;\n    }\n\n    computeIntrinsicGas(tx: TransactionLike): number {\n        const costs = this.getPlugin<GasCostPlugin>(\"org.ethers.plugins.network.GasCost\") || (new GasCostPlugin());\n\n        let gas = costs.txBase;\n        if (tx.to == null) { gas += costs.txCreate; }\n        if (tx.data) {\n            for (let i = 2; i < tx.data.length; i += 2) {\n                if (tx.data.substring(i, i + 2) === \"00\") {\n                    gas += costs.txDataZero;\n                } else {\n                    gas += costs.txDataNonzero;\n                }\n            }\n        }\n\n        if (tx.accessList) {\n            const accessList = accessListify(tx.accessList);\n            for (const addr in accessList) {\n                gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;\n            }\n        }\n\n        return gas;\n    }\n\n    /**\n     *  Returns a new Network for the %%network%% name or chainId.\n     */\n    static from(network?: Networkish): Network {\n        injectCommonNetworks();\n\n        // Default network\n        if (network == null) { return Network.from(\"mainnet\"); }\n\n        // Canonical name or chain ID\n        if (typeof(network) === \"number\") { network = BigInt(network); }\n        if (typeof(network) === \"string\" || typeof(network) === \"bigint\") {\n            const networkFunc = Networks.get(network);\n            if (networkFunc) { return networkFunc(); }\n            if (typeof(network) === \"bigint\") {\n                return new Network(\"unknown\", network);\n            }\n\n            assertArgument(false, \"unknown network\", \"network\", network);\n        }\n\n        // Clonable with network-like abilities\n        if (typeof((<Network>network).clone) === \"function\") {\n            const clone = (<Network>network).clone();\n            //if (typeof(network.name) !== \"string\" || typeof(network.chainId) !== \"number\") {\n            //}\n            return clone;\n        }\n\n        // Networkish\n        if (typeof(network) === \"object\") {\n            assertArgument(typeof(network.name) === \"string\" && typeof(network.chainId) === \"number\",\n                \"invalid network object name or chainId\", \"network\", network);\n\n            const custom = new Network(<string>(network.name), <number>(network.chainId));\n\n            if ((<any>network).ensAddress || (<any>network).ensNetwork != null) {\n                custom.attachPlugin(new EnsPlugin((<any>network).ensAddress, (<any>network).ensNetwork));\n            }\n\n            //if ((<any>network).layerOneConnection) {\n            //    custom.attachPlugin(new LayerOneConnectionPlugin((<any>network).layerOneConnection));\n            //}\n\n            return custom;\n        }\n\n        assertArgument(false, \"invalid network\", \"network\", network);\n    }\n\n    /**\n     *  Register %%nameOrChainId%% with a function which returns\n     *  an instance of a Network representing that chain.\n     */\n    static register(nameOrChainId: string | number | bigint, networkFunc: () => Network): void {\n        if (typeof(nameOrChainId) === \"number\") { nameOrChainId = BigInt(nameOrChainId); }\n        const existing = Networks.get(nameOrChainId);\n        if (existing) {\n            assertArgument(false, `conflicting network for ${ JSON.stringify(existing.name) }`, \"nameOrChainId\", nameOrChainId);\n        }\n        Networks.set(nameOrChainId, networkFunc);\n    }\n}\n\n\ntype Options = {\n    ensNetwork?: number;\n    priorityFee?: number\n    altNames?: Array<string>;\n    etherscan?: { url: string };\n};\n\n// See: https://chainlist.org\nlet injected = false;\nfunction injectCommonNetworks(): void {\n    if (injected) { return; }\n    injected = true;\n\n    /// Register popular Ethereum networks\n    function registerEth(name: string, chainId: number, options: Options): void {\n        const func = function() {\n            const network = new Network(name, chainId);\n\n            // We use 0 to disable ENS\n            if (options.ensNetwork != null) {\n                network.attachPlugin(new EnsPlugin(null, options.ensNetwork));\n            }\n\n            if (options.priorityFee) {\n//                network.attachPlugin(new MaxPriorityFeePlugin(options.priorityFee));\n            }\n/*\n            if (options.etherscan) {\n                const { url, apiKey } = options.etherscan;\n                network.attachPlugin(new EtherscanPlugin(url, apiKey));\n            }\n*/\n            network.attachPlugin(new GasCostPlugin());\n\n            return network;\n        };\n\n        // Register the network by name and chain ID\n        Network.register(name, func);\n        Network.register(chainId, func);\n\n        if (options.altNames) {\n            options.altNames.forEach((name) => {\n                Network.register(name, func);\n            });\n        }\n    }\n\n    registerEth(\"mainnet\", 1, { ensNetwork: 1, altNames: [ \"homestead\" ] });\n    registerEth(\"ropsten\", 3, { ensNetwork: 3 });\n    registerEth(\"rinkeby\", 4, { ensNetwork: 4 });\n    registerEth(\"goerli\", 5, { ensNetwork: 5 });\n    registerEth(\"kovan\", 42, { ensNetwork: 42 });\n\n    registerEth(\"classic\", 61, { });\n    registerEth(\"classicKotti\", 6, { });\n\n    registerEth(\"xdai\", 100, { ensNetwork: 1 });\n\n    registerEth(\"optimism\", 10, {\n        ensNetwork: 1,\n        etherscan: { url: \"https:/\\/api-optimistic.etherscan.io/\" }\n    });\n    registerEth(\"optimism-goerli\", 420, {\n        etherscan: { url: \"https:/\\/api-goerli-optimistic.etherscan.io/\" }\n    });\n\n    registerEth(\"arbitrum\", 42161, {\n        ensNetwork: 1,\n        etherscan: { url: \"https:/\\/api.arbiscan.io/\" }\n    });\n    registerEth(\"arbitrum-goerli\", 421613, {\n        etherscan: { url: \"https:/\\/api-goerli.arbiscan.io/\" }\n    });\n\n    // Polygon has a 35 gwei maxPriorityFee requirement\n    registerEth(\"matic\", 137, {\n        ensNetwork: 1,\n//        priorityFee: 35000000000,\n        etherscan: {\n//            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n            url: \"https:/\\/api.polygonscan.com/\"\n        }\n    });\n    registerEth(\"matic-mumbai\", 80001, {\n        altNames: [ \"maticMumbai\", \"maticmum\" ],  // @TODO: Future remove these alts\n//        priorityFee: 35000000000,\n        etherscan: {\n//            apiKey: \"W6T8DJW654GNTQ34EFEYYP3EZD9DD27CT7\",\n            url: \"https:/\\/api-testnet.polygonscan.com/\"\n        }\n    });\n\n    registerEth(\"bnb\", 56, {\n        ensNetwork: 1,\n        etherscan: {\n//            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n            url: \"http:/\\/api.bscscan.com\"\n        }\n    });\n    registerEth(\"bnbt\", 97, {\n        etherscan: {\n//            apiKey: \"EVTS3CU31AATZV72YQ55TPGXGMVIFUQ9M9\",\n            url: \"http:/\\/api-testnet.bscscan.com\"\n        }\n    });\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}