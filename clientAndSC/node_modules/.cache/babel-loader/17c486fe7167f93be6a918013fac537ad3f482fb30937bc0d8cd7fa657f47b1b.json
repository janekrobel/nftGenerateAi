{"ast":null,"code":"\"use strict\";\n\n// Counter Mode\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CTR_remaining, _CTR_remainingIndex, _CTR_counter;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CTR = void 0;\nconst mode_js_1 = require(\"./mode.js\");\nclass CTR extends mode_js_1.ModeOfOperation {\n  constructor(key, initialValue) {\n    super(\"CTR\", key, CTR);\n    // Remaining bytes for the one-time pad\n    _CTR_remaining.set(this, void 0);\n    _CTR_remainingIndex.set(this, void 0);\n    // The current counter\n    _CTR_counter.set(this, void 0);\n    __classPrivateFieldSet(this, _CTR_counter, new Uint8Array(16), \"f\");\n    __classPrivateFieldGet(this, _CTR_counter, \"f\").fill(0);\n    __classPrivateFieldSet(this, _CTR_remaining, __classPrivateFieldGet(this, _CTR_counter, \"f\"), \"f\"); // This will be discarded immediately\n    __classPrivateFieldSet(this, _CTR_remainingIndex, 16, \"f\");\n    if (initialValue == null) {\n      initialValue = 1;\n    }\n    if (typeof initialValue === \"number\") {\n      this.setCounterValue(initialValue);\n    } else {\n      this.setCounterBytes(initialValue);\n    }\n  }\n  get counter() {\n    return new Uint8Array(__classPrivateFieldGet(this, _CTR_counter, \"f\"));\n  }\n  setCounterValue(value) {\n    if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n      throw new TypeError(\"invalid counter initial integer value\");\n    }\n    for (let index = 15; index >= 0; --index) {\n      __classPrivateFieldGet(this, _CTR_counter, \"f\")[index] = value % 256;\n      value = Math.floor(value / 256);\n    }\n  }\n  setCounterBytes(value) {\n    if (value.length !== 16) {\n      throw new TypeError(\"invalid counter initial Uint8Array value length\");\n    }\n    __classPrivateFieldGet(this, _CTR_counter, \"f\").set(value);\n  }\n  increment() {\n    for (let i = 15; i >= 0; i--) {\n      if (__classPrivateFieldGet(this, _CTR_counter, \"f\")[i] === 255) {\n        __classPrivateFieldGet(this, _CTR_counter, \"f\")[i] = 0;\n      } else {\n        __classPrivateFieldGet(this, _CTR_counter, \"f\")[i]++;\n        break;\n      }\n    }\n  }\n  encrypt(plaintext) {\n    var _a, _b;\n    const crypttext = new Uint8Array(plaintext);\n    for (let i = 0; i < crypttext.length; i++) {\n      if (__classPrivateFieldGet(this, _CTR_remainingIndex, \"f\") === 16) {\n        __classPrivateFieldSet(this, _CTR_remaining, this.aes.encrypt(__classPrivateFieldGet(this, _CTR_counter, \"f\")), \"f\");\n        __classPrivateFieldSet(this, _CTR_remainingIndex, 0, \"f\");\n        this.increment();\n      }\n      crypttext[i] ^= __classPrivateFieldGet(this, _CTR_remaining, \"f\")[(__classPrivateFieldSet(this, _CTR_remainingIndex, (_b = __classPrivateFieldGet(this, _CTR_remainingIndex, \"f\"), _a = _b++, _b), \"f\"), _a)];\n    }\n    return crypttext;\n  }\n  decrypt(ciphertext) {\n    return this.encrypt(ciphertext);\n  }\n}\nexports.CTR = CTR;\n_CTR_remaining = new WeakMap(), _CTR_remainingIndex = new WeakMap(), _CTR_counter = new WeakMap();","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;AAEA;AAEA,MAAaA,GAAI,SAAQC,yBAAe;EAStCC,YAAYC,GAAe,EAAEC,YAAkC;IAC7D,KAAK,CAAC,KAAK,EAAED,GAAG,EAAEH,GAAG,CAAC;IARxB;IACAK;IACAC;IAEA;IACAC;IAKEC,2BAAI,gBAAY,IAAIC,UAAU,CAAC,EAAE,CAAC;IAClCC,2BAAI,oBAAS,CAACC,IAAI,CAAC,CAAC,CAAC;IAErBH,2BAAI,kBAAcE,2BAAI,oBAAS,OAAC,CAAE;IAClCF,2BAAI,uBAAmB,EAAE;IAEzB,IAAIJ,YAAY,IAAI,IAAI,EAAE;MAAEA,YAAY,GAAG,CAAC;;IAE5C,IAAI,OAAOA,YAAa,KAAK,QAAQ,EAAE;MACrC,IAAI,CAACQ,eAAe,CAACR,YAAY,CAAC;KACnC,MAAM;MACL,IAAI,CAACS,eAAe,CAACT,YAAY,CAAC;;EAEtC;EAEA,IAAIU,OAAO;IAAiB,OAAO,IAAIL,UAAU,CAACC,2BAAI,oBAAS,CAAC;EAAE;EAElEE,eAAe,CAACG,KAAa;IAC3B,IAAI,CAACC,MAAM,CAACC,SAAS,CAACF,KAAK,CAAC,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAGC,MAAM,CAACE,gBAAgB,EAAE;MAC5E,MAAM,IAAIC,SAAS,CAAC,uCAAuC,CAAC;;IAG9D,KAAK,IAAIC,KAAK,GAAG,EAAE,EAAEA,KAAK,IAAI,CAAC,EAAE,EAAEA,KAAK,EAAE;MACxCV,2BAAI,oBAAS,CAACU,KAAK,CAAC,GAAGL,KAAK,GAAG,GAAG;MAClCA,KAAK,GAAGM,IAAI,CAACC,KAAK,CAACP,KAAK,GAAG,GAAG,CAAC;;EAEnC;EAEAF,eAAe,CAACE,KAAiB;IAC/B,IAAIA,KAAK,CAACQ,MAAM,KAAK,EAAE,EAAE;MACvB,MAAM,IAAIJ,SAAS,CAAC,iDAAiD,CAAC;;IAGxET,2BAAI,oBAAS,CAACc,GAAG,CAACT,KAAK,CAAC;EAC1B;EAEAU,SAAS;IACP,KAAK,IAAIC,CAAC,GAAG,EAAE,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC5B,IAAIhB,2BAAI,oBAAS,CAACgB,CAAC,CAAC,KAAK,GAAG,EAAE;QAC5BhB,2BAAI,oBAAS,CAACgB,CAAC,CAAC,GAAG,CAAC;OACrB,MAAM;QACLhB,2BAAI,oBAAS,CAACgB,CAAC,CAAC,EAAE;QAClB;;;EAGN;EAEAC,OAAO,CAACC,SAAqB;;IAC3B,MAAMC,SAAS,GAAG,IAAIpB,UAAU,CAACmB,SAAS,CAAC;IAE3C,KAAK,IAAIF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,SAAS,CAACN,MAAM,EAAEG,CAAC,EAAE,EAAE;MACzC,IAAIhB,2BAAI,2BAAgB,KAAK,EAAE,EAAE;QAC/BF,2BAAI,kBAAc,IAAI,CAACsB,GAAG,CAACH,OAAO,CAACjB,2BAAI,oBAAS,CAAC;QACjDF,2BAAI,uBAAmB,CAAC;QACxB,IAAI,CAACiB,SAAS,EAAE;;MAElBI,SAAS,CAACH,CAAC,CAAC,IAAIhB,2BAAI,sBAAW,EAACF,8GAAoB,EAApBuB,SAAsB,iBAAC;;IAGzD,OAAOF,SAAS;EAClB;EAEAG,OAAO,CAACC,UAAsB;IAC5B,OAAO,IAAI,CAACN,OAAO,CAACM,UAAU,CAAC;EACjC;;AA5EFC","names":["CTR","mode_js_1","constructor","key","initialValue","_CTR_remaining","_CTR_remainingIndex","_CTR_counter","__classPrivateFieldSet","Uint8Array","__classPrivateFieldGet","fill","setCounterValue","setCounterBytes","counter","value","Number","isInteger","MAX_SAFE_INTEGER","TypeError","index","Math","floor","length","set","increment","i","encrypt","plaintext","crypttext","aes","_a","decrypt","ciphertext","exports"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/node_modules/aes-js/src.ts/mode-ctr.ts"],"sourcesContent":["// Counter Mode\n\nimport { ModeOfOperation } from \"./mode.js\";\n\nexport class CTR extends ModeOfOperation {\n\n  // Remaining bytes for the one-time pad\n  #remaining: Uint8Array;\n  #remainingIndex: number;\n\n  // The current counter\n  #counter: Uint8Array;\n\n  constructor(key: Uint8Array, initialValue?: number | Uint8Array) {\n    super(\"CTR\", key, CTR);\n\n    this.#counter = new Uint8Array(16)\n    this.#counter.fill(0);\n\n    this.#remaining = this.#counter;  // This will be discarded immediately\n    this.#remainingIndex = 16;\n\n    if (initialValue == null) { initialValue = 1; }\n\n    if (typeof(initialValue) === \"number\") {\n      this.setCounterValue(initialValue);\n    } else {\n      this.setCounterBytes(initialValue);\n    }\n  }\n\n  get counter(): Uint8Array { return new Uint8Array(this.#counter); }\n\n  setCounterValue(value: number): void {\n    if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {\n      throw new TypeError(\"invalid counter initial integer value\");\n    }\n\n    for (let index = 15; index >= 0; --index) {\n      this.#counter[index] = value % 256;\n      value = Math.floor(value / 256);\n    }\n  }\n\n  setCounterBytes(value: Uint8Array): void {\n    if (value.length !== 16) {\n      throw new TypeError(\"invalid counter initial Uint8Array value length\");\n    }\n\n    this.#counter.set(value);\n  }\n\n  increment() {\n    for (let i = 15; i >= 0; i--) {\n      if (this.#counter[i] === 255) {\n        this.#counter[i] = 0;\n      } else {\n        this.#counter[i]++;\n        break;\n      }\n    }\n  }\n\n  encrypt(plaintext: Uint8Array): Uint8Array {\n    const crypttext = new Uint8Array(plaintext);\n\n    for (let i = 0; i < crypttext.length; i++) {\n      if (this.#remainingIndex === 16) {\n        this.#remaining = this.aes.encrypt(this.#counter);\n        this.#remainingIndex = 0;\n        this.increment();\n      }\n      crypttext[i] ^= this.#remaining[this.#remainingIndex++];\n    }\n\n    return crypttext;\n  }\n\n  decrypt(ciphertext: Uint8Array): Uint8Array {\n    return this.encrypt(ciphertext);\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}