{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.id = void 0;\nconst index_js_1 = require(\"../crypto/index.js\");\nconst index_js_2 = require(\"../utils/index.js\");\n/**\n *  A simple hashing function which operates on UTF-8 strings to\n *  compute an 32-byte irentifier.\n *\n *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes\n *  the [[keccak256]].\n *\n *  @example:\n *    id(\"hello world\")\n *    //_result:\n */\nfunction id(value) {\n  return (0, index_js_1.keccak256)((0, index_js_2.toUtf8Bytes)(value));\n}\nexports.id = id;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AAEA;;;;;;;;;;;AAWA,SAAgBA,EAAE,CAACC,KAAa;EAC5B,OAAO,wBAAS,EAAC,0BAAW,EAACA,KAAK,CAAC,CAAC;AACxC;AAFAC","names":["id","value","exports"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/hash/id.ts"],"sourcesContent":["import { keccak256 } from \"../crypto/index.js\";\nimport { toUtf8Bytes } from \"../utils/index.js\";\n\n/**\n *  A simple hashing function which operates on UTF-8 strings to\n *  compute an 32-byte irentifier.\n *\n *  This simply computes the [UTF-8 bytes](toUtf8Bytes) and computes\n *  the [[keccak256]].\n *\n *  @example:\n *    id(\"hello world\")\n *    //_result:\n */\nexport function id(value: string): string {\n    return keccak256(toUtf8Bytes(value));\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}