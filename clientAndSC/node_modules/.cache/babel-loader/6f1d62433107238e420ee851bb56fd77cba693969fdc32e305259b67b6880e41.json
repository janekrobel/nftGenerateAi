{"ast":null,"code":"\"use strict\";\n\n/**\n *  The JSON Wallet formats allow a simple way to store the private\n *  keys needed in Ethereum along with related information and allows\n *  for extensible forms of encryption.\n *\n *  These utilities facilitate decrypting and encrypting the most common\n *  JSON Wallet formats.\n *\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encryptKeystoreJson = exports.encryptKeystoreJsonSync = exports.decryptKeystoreJson = exports.decryptKeystoreJsonSync = exports.isKeystoreJson = void 0;\nconst aes_js_1 = require(\"aes-js\");\nconst index_js_1 = require(\"../address/index.js\");\nconst index_js_2 = require(\"../crypto/index.js\");\nconst index_js_3 = require(\"../transaction/index.js\");\nconst index_js_4 = require(\"../utils/index.js\");\nconst utils_js_1 = require(\"./utils.js\");\nconst _version_js_1 = require(\"../_version.js\");\nconst defaultPath = \"m/44'/60'/0'/0/0\";\n/**\n *  Returns true if %%json%% is a valid JSON Keystore Wallet.\n */\nfunction isKeystoreJson(json) {\n  try {\n    const data = JSON.parse(json);\n    const version = data.version != null ? parseInt(data.version) : 0;\n    if (version === 3) {\n      return true;\n    }\n  } catch (error) {}\n  return false;\n}\nexports.isKeystoreJson = isKeystoreJson;\nfunction decrypt(data, key, ciphertext) {\n  const cipher = (0, utils_js_1.spelunk)(data, \"crypto.cipher:string\");\n  if (cipher === \"aes-128-ctr\") {\n    const iv = (0, utils_js_1.spelunk)(data, \"crypto.cipherparams.iv:data!\");\n    const aesCtr = new aes_js_1.CTR(key, iv);\n    return (0, index_js_4.hexlify)(aesCtr.decrypt(ciphertext));\n  }\n  (0, index_js_4.assert)(false, \"unsupported cipher\", \"UNSUPPORTED_OPERATION\", {\n    operation: \"decrypt\"\n  });\n}\nfunction getAccount(data, _key) {\n  const key = (0, index_js_4.getBytes)(_key);\n  const ciphertext = (0, utils_js_1.spelunk)(data, \"crypto.ciphertext:data!\");\n  const computedMAC = (0, index_js_4.hexlify)((0, index_js_2.keccak256)((0, index_js_4.concat)([key.slice(16, 32), ciphertext]))).substring(2);\n  (0, index_js_4.assertArgument)(computedMAC === (0, utils_js_1.spelunk)(data, \"crypto.mac:string!\").toLowerCase(), \"incorrect password\", \"password\", \"[ REDACTED ]\");\n  const privateKey = decrypt(data, key.slice(0, 16), ciphertext);\n  const address = (0, index_js_3.computeAddress)(privateKey);\n  if (data.address) {\n    let check = data.address.toLowerCase();\n    if (!check.startsWith(\"0x\")) {\n      check = \"0x\" + check;\n    }\n    (0, index_js_4.assertArgument)((0, index_js_1.getAddress)(check) === address, \"keystore address/privateKey mismatch\", \"address\", data.address);\n  }\n  const account = {\n    address,\n    privateKey\n  };\n  // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n  const version = (0, utils_js_1.spelunk)(data, \"x-ethers.version:string\");\n  if (version === \"0.1\") {\n    const mnemonicKey = key.slice(32, 64);\n    const mnemonicCiphertext = (0, utils_js_1.spelunk)(data, \"x-ethers.mnemonicCiphertext:data!\");\n    const mnemonicIv = (0, utils_js_1.spelunk)(data, \"x-ethers.mnemonicCounter:data!\");\n    const mnemonicAesCtr = new aes_js_1.CTR(mnemonicKey, mnemonicIv);\n    account.mnemonic = {\n      path: (0, utils_js_1.spelunk)(data, \"x-ethers.path:string\") || defaultPath,\n      locale: (0, utils_js_1.spelunk)(data, \"x-ethers.locale:string\") || \"en\",\n      entropy: (0, index_js_4.hexlify)((0, index_js_4.getBytes)(mnemonicAesCtr.decrypt(mnemonicCiphertext)))\n    };\n  }\n  return account;\n}\nfunction getDecryptKdfParams(data) {\n  const kdf = (0, utils_js_1.spelunk)(data, \"crypto.kdf:string\");\n  if (kdf && typeof kdf === \"string\") {\n    if (kdf.toLowerCase() === \"scrypt\") {\n      const salt = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.salt:data!\");\n      const N = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.n:int!\");\n      const r = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.r:int!\");\n      const p = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.p:int!\");\n      // Make sure N is a power of 2\n      (0, index_js_4.assertArgument)(N > 0 && (N & N - 1) === 0, \"invalid kdf.N\", \"kdf.N\", N);\n      (0, index_js_4.assertArgument)(r > 0 && p > 0, \"invalid kdf\", \"kdf\", kdf);\n      const dkLen = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.dklen:int!\");\n      (0, index_js_4.assertArgument)(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dflen\", dkLen);\n      return {\n        name: \"scrypt\",\n        salt,\n        N,\n        r,\n        p,\n        dkLen: 64\n      };\n    } else if (kdf.toLowerCase() === \"pbkdf2\") {\n      const salt = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.salt:data!\");\n      const prf = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.prf:string!\");\n      const algorithm = prf.split(\"-\").pop();\n      (0, index_js_4.assertArgument)(algorithm === \"sha256\" || algorithm === \"sha512\", \"invalid kdf.pdf\", \"kdf.pdf\", prf);\n      const count = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.c:int!\");\n      const dkLen = (0, utils_js_1.spelunk)(data, \"crypto.kdfparams.dklen:int!\");\n      (0, index_js_4.assertArgument)(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dklen\", dkLen);\n      return {\n        name: \"pbkdf2\",\n        salt,\n        count,\n        dkLen,\n        algorithm\n      };\n    }\n  }\n  (0, index_js_4.assertArgument)(false, \"unsupported key-derivation function\", \"kdf\", kdf);\n}\n/**\n *  Returns the account details for the JSON Keystore Wallet %%json%%\n *  using %%password%%.\n *\n *  It is preferred to use the [async version](decryptKeystoreJson)\n *  instead, which allows a [[ProgressCallback]] to keep the user informed\n *  as to the decryption status.\n *\n *  This method will block the event loop (freezing all UI) until decryption\n *  is complete, which can take quite some time, depending on the wallet\n *  paramters and platform.\n */\nfunction decryptKeystoreJsonSync(json, _password) {\n  const data = JSON.parse(json);\n  const password = (0, utils_js_1.getPassword)(_password);\n  const params = getDecryptKdfParams(data);\n  if (params.name === \"pbkdf2\") {\n    const {\n      salt,\n      count,\n      dkLen,\n      algorithm\n    } = params;\n    const key = (0, index_js_2.pbkdf2)(password, salt, count, dkLen, algorithm);\n    return getAccount(data, key);\n  }\n  (0, index_js_4.assert)(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", {\n    params\n  });\n  const {\n    salt,\n    N,\n    r,\n    p,\n    dkLen\n  } = params;\n  const key = (0, index_js_2.scryptSync)(password, salt, N, r, p, dkLen);\n  return getAccount(data, key);\n}\nexports.decryptKeystoreJsonSync = decryptKeystoreJsonSync;\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve();\n    }, duration);\n  });\n}\n/**\n *  Resolves to the decrypted JSON Keystore Wallet %%json%% using the\n *  %%password%%.\n *\n *  If provided, %%progress%% will be called periodically during the\n *  decrpytion to provide feedback, and if the function returns\n *  ``false`` will halt decryption.\n *\n *  The %%progressCallback%% will **always** receive ``0`` before\n *  decryption begins and ``1`` when complete.\n */\nasync function decryptKeystoreJson(json, _password, progress) {\n  const data = JSON.parse(json);\n  const password = (0, utils_js_1.getPassword)(_password);\n  const params = getDecryptKdfParams(data);\n  if (params.name === \"pbkdf2\") {\n    if (progress) {\n      progress(0);\n      await stall(0);\n    }\n    const {\n      salt,\n      count,\n      dkLen,\n      algorithm\n    } = params;\n    const key = (0, index_js_2.pbkdf2)(password, salt, count, dkLen, algorithm);\n    if (progress) {\n      progress(1);\n      await stall(0);\n    }\n    return getAccount(data, key);\n  }\n  (0, index_js_4.assert)(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", {\n    params\n  });\n  const {\n    salt,\n    N,\n    r,\n    p,\n    dkLen\n  } = params;\n  const key = await (0, index_js_2.scrypt)(password, salt, N, r, p, dkLen, progress);\n  return getAccount(data, key);\n}\nexports.decryptKeystoreJson = decryptKeystoreJson;\nfunction getEncryptKdfParams(options) {\n  // Check/generate the salt\n  const salt = options.salt != null ? (0, index_js_4.getBytes)(options.salt, \"options.salt\") : (0, index_js_2.randomBytes)(32);\n  // Override the scrypt password-based key derivation function parameters\n  let N = 1 << 17,\n    r = 8,\n    p = 1;\n  if (options.scrypt) {\n    if (options.scrypt.N) {\n      N = options.scrypt.N;\n    }\n    if (options.scrypt.r) {\n      r = options.scrypt.r;\n    }\n    if (options.scrypt.p) {\n      p = options.scrypt.p;\n    }\n  }\n  (0, index_js_4.assertArgument)(typeof N === \"number\" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), \"invalid scrypt N parameter\", \"options.N\", N);\n  (0, index_js_4.assertArgument)(typeof r === \"number\" && r > 0 && Number.isSafeInteger(r), \"invalid scrypt r parameter\", \"options.r\", r);\n  (0, index_js_4.assertArgument)(typeof p === \"number\" && p > 0 && Number.isSafeInteger(p), \"invalid scrypt p parameter\", \"options.p\", p);\n  return {\n    name: \"scrypt\",\n    dkLen: 32,\n    salt,\n    N,\n    r,\n    p\n  };\n}\nfunction _encryptKeystore(key, kdf, account, options) {\n  const privateKey = (0, index_js_4.getBytes)(account.privateKey, \"privateKey\");\n  // Override initialization vector\n  const iv = options.iv != null ? (0, index_js_4.getBytes)(options.iv, \"options.iv\") : (0, index_js_2.randomBytes)(16);\n  (0, index_js_4.assertArgument)(iv.length === 16, \"invalid options.iv length\", \"options.iv\", options.iv);\n  // Override the uuid\n  const uuidRandom = options.uuid != null ? (0, index_js_4.getBytes)(options.uuid, \"options.uuid\") : (0, index_js_2.randomBytes)(16);\n  (0, index_js_4.assertArgument)(uuidRandom.length === 16, \"invalid options.uuid length\", \"options.uuid\", options.iv);\n  // This will be used to encrypt the wallet (as per Web3 secret storage)\n  // - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n  // - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n  const derivedKey = key.slice(0, 16);\n  const macPrefix = key.slice(16, 32);\n  // Encrypt the private key\n  const aesCtr = new aes_js_1.CTR(derivedKey, iv);\n  const ciphertext = (0, index_js_4.getBytes)(aesCtr.encrypt(privateKey));\n  // Compute the message authentication code, used to check the password\n  const mac = (0, index_js_2.keccak256)((0, index_js_4.concat)([macPrefix, ciphertext]));\n  // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n  const data = {\n    address: account.address.substring(2).toLowerCase(),\n    id: (0, index_js_4.uuidV4)(uuidRandom),\n    version: 3,\n    Crypto: {\n      cipher: \"aes-128-ctr\",\n      cipherparams: {\n        iv: (0, index_js_4.hexlify)(iv).substring(2)\n      },\n      ciphertext: (0, index_js_4.hexlify)(ciphertext).substring(2),\n      kdf: \"scrypt\",\n      kdfparams: {\n        salt: (0, index_js_4.hexlify)(kdf.salt).substring(2),\n        n: kdf.N,\n        dklen: 32,\n        p: kdf.p,\n        r: kdf.r\n      },\n      mac: mac.substring(2)\n    }\n  };\n  // If we have a mnemonic, encrypt it into the JSON wallet\n  if (account.mnemonic) {\n    const client = options.client != null ? options.client : `ethers/${_version_js_1.version}`;\n    const path = account.mnemonic.path || defaultPath;\n    const locale = account.mnemonic.locale || \"en\";\n    const mnemonicKey = key.slice(32, 64);\n    const entropy = (0, index_js_4.getBytes)(account.mnemonic.entropy, \"account.mnemonic.entropy\");\n    const mnemonicIv = (0, index_js_2.randomBytes)(16);\n    const mnemonicAesCtr = new aes_js_1.CTR(mnemonicKey, mnemonicIv);\n    const mnemonicCiphertext = (0, index_js_4.getBytes)(mnemonicAesCtr.encrypt(entropy));\n    const now = new Date();\n    const timestamp = now.getUTCFullYear() + \"-\" + (0, utils_js_1.zpad)(now.getUTCMonth() + 1, 2) + \"-\" + (0, utils_js_1.zpad)(now.getUTCDate(), 2) + \"T\" + (0, utils_js_1.zpad)(now.getUTCHours(), 2) + \"-\" + (0, utils_js_1.zpad)(now.getUTCMinutes(), 2) + \"-\" + (0, utils_js_1.zpad)(now.getUTCSeconds(), 2) + \".0Z\";\n    const gethFilename = \"UTC--\" + timestamp + \"--\" + data.address;\n    data[\"x-ethers\"] = {\n      client,\n      gethFilename,\n      path,\n      locale,\n      mnemonicCounter: (0, index_js_4.hexlify)(mnemonicIv).substring(2),\n      mnemonicCiphertext: (0, index_js_4.hexlify)(mnemonicCiphertext).substring(2),\n      version: \"0.1\"\n    };\n  }\n  return JSON.stringify(data);\n}\n/**\n *  Return the JSON Keystore Wallet for %%account%% encrypted with\n *  %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used. Any provided [[ProgressCallback]] is ignord.\n */\nfunction encryptKeystoreJsonSync(account, password, options) {\n  if (options == null) {\n    options = {};\n  }\n  const passwordBytes = (0, utils_js_1.getPassword)(password);\n  const kdf = getEncryptKdfParams(options);\n  const key = (0, index_js_2.scryptSync)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);\n  return _encryptKeystore((0, index_js_4.getBytes)(key), kdf, account, options);\n}\nexports.encryptKeystoreJsonSync = encryptKeystoreJsonSync;\n/**\n *  Resolved to the JSON Keystore Wallet for %%account%% encrypted\n *  with %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used and provide a [[ProgressCallback]] to receive periodic updates\n *  on the completion status..\n */\nasync function encryptKeystoreJson(account, password, options) {\n  if (options == null) {\n    options = {};\n  }\n  const passwordBytes = (0, utils_js_1.getPassword)(password);\n  const kdf = getEncryptKdfParams(options);\n  const key = await (0, index_js_2.scrypt)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);\n  return _encryptKeystore((0, index_js_4.getBytes)(key), kdf, account, options);\n}\nexports.encryptKeystoreJson = encryptKeystoreJson;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;AAWA;AAEA;AACA;AACA;AACA;AAIA;AAKA;AAGA,MAAMA,WAAW,GAAG,kBAAkB;AAgCtC;;;AAGA,SAAgBC,cAAc,CAACC,IAAY;EACvC,IAAI;IACA,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;IAC7B,MAAMI,OAAO,GAAKH,IAAI,CAACG,OAAO,IAAI,IAAI,GAAIC,QAAQ,CAACJ,IAAI,CAACG,OAAO,CAAC,GAAE,CAAE;IACpE,IAAIA,OAAO,KAAK,CAAC,EAAE;MAAE,OAAO,IAAI;;GACnC,CAAC,OAAOE,KAAK,EAAE;EAChB,OAAO,KAAK;AAChB;AAPAC;AASA,SAASC,OAAO,CAACP,IAAS,EAAEQ,GAAe,EAAEC,UAAsB;EAC/D,MAAMC,MAAM,GAAG,sBAAO,EAASV,IAAI,EAAE,sBAAsB,CAAC;EAC5D,IAAIU,MAAM,KAAK,aAAa,EAAE;IAC1B,MAAMC,EAAE,GAAG,sBAAO,EAAaX,IAAI,EAAE,8BAA8B,CAAC;IACpE,MAAMY,MAAM,GAAG,IAAIC,YAAG,CAACL,GAAG,EAAEG,EAAE,CAAC;IAC/B,OAAO,sBAAO,EAACC,MAAM,CAACL,OAAO,CAACE,UAAU,CAAC,CAAC;;EAG9C,qBAAM,EAAC,KAAK,EAAE,oBAAoB,EAAE,uBAAuB,EAAE;IACzDK,SAAS,EAAE;GACd,CAAC;AACN;AAEA,SAASC,UAAU,CAACf,IAAS,EAAEgB,IAAY;EACvC,MAAMR,GAAG,GAAG,uBAAQ,EAACQ,IAAI,CAAC;EAC1B,MAAMP,UAAU,GAAG,sBAAO,EAAaT,IAAI,EAAE,yBAAyB,CAAC;EAEvE,MAAMiB,WAAW,GAAG,sBAAO,EAAC,wBAAS,EAAC,qBAAM,EAAC,CAAET,GAAG,CAACU,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC,EAAET,UAAU,CAAE,CAAC,CAAC,CAAC,CAACU,SAAS,CAAC,CAAC,CAAC;EAC9F,6BAAc,EAACF,WAAW,KAAK,sBAAO,EAASjB,IAAI,EAAE,oBAAoB,CAAC,CAACoB,WAAW,EAAE,EACpF,oBAAoB,EAAE,UAAU,EAAE,cAAc,CAAC;EAErD,MAAMC,UAAU,GAAGd,OAAO,CAACP,IAAI,EAAEQ,GAAG,CAACU,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,EAAET,UAAU,CAAC;EAE9D,MAAMa,OAAO,GAAG,6BAAc,EAACD,UAAU,CAAC;EAC1C,IAAIrB,IAAI,CAACsB,OAAO,EAAE;IACd,IAAIC,KAAK,GAAGvB,IAAI,CAACsB,OAAO,CAACF,WAAW,EAAE;IACtC,IAAI,CAACG,KAAK,CAACC,UAAU,CAAC,IAAI,CAAC,EAAE;MAAED,KAAK,GAAG,IAAI,GAAGA,KAAK;;IAEnD,6BAAc,EAAC,yBAAU,EAACA,KAAK,CAAC,KAAKD,OAAO,EAAE,sCAAsC,EAAE,SAAS,EAAEtB,IAAI,CAACsB,OAAO,CAAC;;EAGlH,MAAMG,OAAO,GAAoB;IAAEH,OAAO;IAAED;EAAU,CAAE;EAExD;EACA,MAAMlB,OAAO,GAAG,sBAAO,EAACH,IAAI,EAAE,yBAAyB,CAAC;EACxD,IAAIG,OAAO,KAAK,KAAK,EAAE;IACnB,MAAMuB,WAAW,GAAGlB,GAAG,CAACU,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;IAErC,MAAMS,kBAAkB,GAAG,sBAAO,EAAa3B,IAAI,EAAE,mCAAmC,CAAC;IACzF,MAAM4B,UAAU,GAAG,sBAAO,EAAa5B,IAAI,EAAE,gCAAgC,CAAC;IAE9E,MAAM6B,cAAc,GAAG,IAAIhB,YAAG,CAACa,WAAW,EAAEE,UAAU,CAAC;IAEvDH,OAAO,CAACK,QAAQ,GAAG;MACfC,IAAI,EAAG,sBAAO,EAAgB/B,IAAI,EAAE,sBAAsB,CAAC,IAAIH,WAAY;MAC3EmC,MAAM,EAAG,sBAAO,EAAgBhC,IAAI,EAAE,wBAAwB,CAAC,IAAI,IAAK;MACxEiC,OAAO,EAAE,sBAAO,EAAC,uBAAQ,EAACJ,cAAc,CAACtB,OAAO,CAACoB,kBAAkB,CAAC,CAAC;KACxE;;EAGL,OAAOF,OAAO;AAClB;AAmBA,SAASS,mBAAmB,CAAIlC,IAAS;EACrC,MAAMmC,GAAG,GAAG,sBAAO,EAACnC,IAAI,EAAE,mBAAmB,CAAC;EAC9C,IAAImC,GAAG,IAAI,OAAOA,GAAI,KAAK,QAAQ,EAAE;IACjC,IAAIA,GAAG,CAACf,WAAW,EAAE,KAAK,QAAQ,EAAE;MAChC,MAAMgB,IAAI,GAAG,sBAAO,EAAapC,IAAI,EAAE,6BAA6B,CAAC;MACrE,MAAMqC,CAAC,GAAG,sBAAO,EAASrC,IAAI,EAAE,yBAAyB,CAAC;MAC1D,MAAMsC,CAAC,GAAG,sBAAO,EAAStC,IAAI,EAAE,yBAAyB,CAAC;MAC1D,MAAMuC,CAAC,GAAG,sBAAO,EAASvC,IAAI,EAAE,yBAAyB,CAAC;MAE1D;MACA,6BAAc,EAACqC,CAAC,GAAG,CAAC,IAAI,CAACA,CAAC,GAAIA,CAAC,GAAG,CAAE,MAAM,CAAC,EAAE,eAAe,EAAE,OAAO,EAAEA,CAAC,CAAC;MACzE,6BAAc,EAACC,CAAC,GAAG,CAAC,IAAIC,CAAC,GAAG,CAAC,EAAE,aAAa,EAAE,KAAK,EAAEJ,GAAG,CAAC;MAEzD,MAAMK,KAAK,GAAG,sBAAO,EAASxC,IAAI,EAAE,6BAA6B,CAAC;MAClE,6BAAc,EAACwC,KAAK,KAAK,EAAE,EAAE,mBAAmB,EAAE,WAAW,EAAEA,KAAK,CAAC;MAErE,OAAO;QAAEC,IAAI,EAAE,QAAQ;QAAEL,IAAI;QAAEC,CAAC;QAAEC,CAAC;QAAEC,CAAC;QAAEC,KAAK,EAAE;MAAE,CAAE;KAEtD,MAAM,IAAIL,GAAG,CAACf,WAAW,EAAE,KAAK,QAAQ,EAAE;MAEvC,MAAMgB,IAAI,GAAG,sBAAO,EAAapC,IAAI,EAAE,6BAA6B,CAAC;MAErE,MAAM0C,GAAG,GAAG,sBAAO,EAAS1C,IAAI,EAAE,8BAA8B,CAAC;MACjE,MAAM2C,SAAS,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,EAAE;MACtC,6BAAc,EAACF,SAAS,KAAK,QAAQ,IAAIA,SAAS,KAAK,QAAQ,EAAE,iBAAiB,EAAE,SAAS,EAAED,GAAG,CAAC;MAEnG,MAAMI,KAAK,GAAG,sBAAO,EAAS9C,IAAI,EAAE,yBAAyB,CAAC;MAE9D,MAAMwC,KAAK,GAAG,sBAAO,EAASxC,IAAI,EAAE,6BAA6B,CAAC;MAClE,6BAAc,EAACwC,KAAK,KAAK,EAAE,EAAE,mBAAmB,EAAE,WAAW,EAAEA,KAAK,CAAC;MAErE,OAAO;QAAEC,IAAI,EAAE,QAAQ;QAAEL,IAAI;QAAEU,KAAK;QAAEN,KAAK;QAAEG;MAAS,CAAE;;;EAIhE,6BAAc,EAAC,KAAK,EAAE,qCAAqC,EAAE,KAAK,EAAER,GAAG,CAAC;AAC5E;AAGA;;;;;;;;;;;;AAYA,SAAgBY,uBAAuB,CAAChD,IAAY,EAAEiD,SAA8B;EAChF,MAAMhD,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;EAE7B,MAAMkD,QAAQ,GAAG,0BAAW,EAACD,SAAS,CAAC;EAEvC,MAAME,MAAM,GAAGhB,mBAAmB,CAAClC,IAAI,CAAC;EACxC,IAAIkD,MAAM,CAACT,IAAI,KAAK,QAAQ,EAAE;IAC1B,MAAM;MAAEL,IAAI;MAAEU,KAAK;MAAEN,KAAK;MAAEG;IAAS,CAAE,GAAGO,MAAM;IAChD,MAAM1C,GAAG,GAAG,qBAAM,EAACyC,QAAQ,EAAEb,IAAI,EAAEU,KAAK,EAAEN,KAAK,EAAEG,SAAS,CAAC;IAC3D,OAAO5B,UAAU,CAACf,IAAI,EAAEQ,GAAG,CAAC;;EAGhC,qBAAM,EAAC0C,MAAM,CAACT,IAAI,KAAK,QAAQ,EAAE,mBAAmB,EAAE,eAAe,EAAE;IAAES;EAAM,CAAE,CAAC;EAElF,MAAM;IAAEd,IAAI;IAAEC,CAAC;IAAEC,CAAC;IAAEC,CAAC;IAAEC;EAAK,CAAE,GAAGU,MAAM;EACvC,MAAM1C,GAAG,GAAG,yBAAU,EAACyC,QAAQ,EAAEb,IAAI,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,KAAK,CAAC;EACtD,OAAOzB,UAAU,CAACf,IAAI,EAAEQ,GAAG,CAAC;AAChC;AAjBAF;AAmBA,SAAS6C,KAAK,CAACC,QAAgB;EAC3B,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAI;IAAGC,UAAU,CAAC,MAAK;MAAGD,OAAO,EAAE;IAAE,CAAC,EAAEF,QAAQ,CAAC;EAAE,CAAC,CAAC;AACpF;AAEA;;;;;;;;;;;AAWO,eAAeI,mBAAmB,CAACzD,IAAY,EAAEiD,SAA8B,EAAES,QAA2B;EAC/G,MAAMzD,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;EAE7B,MAAMkD,QAAQ,GAAG,0BAAW,EAACD,SAAS,CAAC;EAEvC,MAAME,MAAM,GAAGhB,mBAAmB,CAAClC,IAAI,CAAC;EACxC,IAAIkD,MAAM,CAACT,IAAI,KAAK,QAAQ,EAAE;IAC1B,IAAIgB,QAAQ,EAAE;MACVA,QAAQ,CAAC,CAAC,CAAC;MACX,MAAMN,KAAK,CAAC,CAAC,CAAC;;IAElB,MAAM;MAAEf,IAAI;MAAEU,KAAK;MAAEN,KAAK;MAAEG;IAAS,CAAE,GAAGO,MAAM;IAChD,MAAM1C,GAAG,GAAG,qBAAM,EAACyC,QAAQ,EAAEb,IAAI,EAAEU,KAAK,EAAEN,KAAK,EAAEG,SAAS,CAAC;IAC3D,IAAIc,QAAQ,EAAE;MACVA,QAAQ,CAAC,CAAC,CAAC;MACX,MAAMN,KAAK,CAAC,CAAC,CAAC;;IAElB,OAAOpC,UAAU,CAACf,IAAI,EAAEQ,GAAG,CAAC;;EAGhC,qBAAM,EAAC0C,MAAM,CAACT,IAAI,KAAK,QAAQ,EAAE,mBAAmB,EAAE,eAAe,EAAE;IAAES;EAAM,CAAE,CAAC;EAElF,MAAM;IAAEd,IAAI;IAAEC,CAAC;IAAEC,CAAC;IAAEC,CAAC;IAAEC;EAAK,CAAE,GAAGU,MAAM;EACvC,MAAM1C,GAAG,GAAG,MAAM,qBAAM,EAACyC,QAAQ,EAAEb,IAAI,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,KAAK,EAAEiB,QAAQ,CAAC;EAClE,OAAO1C,UAAU,CAACf,IAAI,EAAEQ,GAAG,CAAC;AAChC;AAzBAF;AA2BA,SAASoD,mBAAmB,CAACC,OAAuB;EAChD;EACA,MAAMvB,IAAI,GAAIuB,OAAO,CAACvB,IAAI,IAAI,IAAI,GAAI,uBAAQ,EAACuB,OAAO,CAACvB,IAAI,EAAE,cAAc,CAAC,GAAE,0BAAW,EAAC,EAAE,CAAC;EAE7F;EACA,IAAIC,CAAC,GAAI,CAAC,IAAI,EAAG;IAAEC,CAAC,GAAG,CAAC;IAAEC,CAAC,GAAG,CAAC;EAC/B,IAAIoB,OAAO,CAACC,MAAM,EAAE;IAChB,IAAID,OAAO,CAACC,MAAM,CAACvB,CAAC,EAAE;MAAEA,CAAC,GAAGsB,OAAO,CAACC,MAAM,CAACvB,CAAC;;IAC5C,IAAIsB,OAAO,CAACC,MAAM,CAACtB,CAAC,EAAE;MAAEA,CAAC,GAAGqB,OAAO,CAACC,MAAM,CAACtB,CAAC;;IAC5C,IAAIqB,OAAO,CAACC,MAAM,CAACrB,CAAC,EAAE;MAAEA,CAAC,GAAGoB,OAAO,CAACC,MAAM,CAACrB,CAAC;;;EAEhD,6BAAc,EAAC,OAAOF,CAAE,KAAK,QAAQ,IAAIA,CAAC,GAAG,CAAC,IAAIwB,MAAM,CAACC,aAAa,CAACzB,CAAC,CAAC,IAAI,CAAC0B,MAAM,CAAC1B,CAAC,CAAC,GAAG0B,MAAM,CAAC1B,CAAC,GAAG,CAAC,CAAC,MAAM0B,MAAM,CAAC,CAAC,CAAC,EAAE,4BAA4B,EAAE,WAAW,EAAE1B,CAAC,CAAC;EACrK,6BAAc,EAAC,OAAOC,CAAE,KAAK,QAAQ,IAAIA,CAAC,GAAG,CAAC,IAAIuB,MAAM,CAACC,aAAa,CAACxB,CAAC,CAAC,EAAE,4BAA4B,EAAE,WAAW,EAAEA,CAAC,CAAC;EACxH,6BAAc,EAAC,OAAOC,CAAE,KAAK,QAAQ,IAAIA,CAAC,GAAG,CAAC,IAAIsB,MAAM,CAACC,aAAa,CAACvB,CAAC,CAAC,EAAE,4BAA4B,EAAE,WAAW,EAAEA,CAAC,CAAC;EAExH,OAAO;IAAEE,IAAI,EAAE,QAAQ;IAAED,KAAK,EAAE,EAAE;IAAEJ,IAAI;IAAEC,CAAC;IAAEC,CAAC;IAAEC;EAAC,CAAE;AACvD;AAEA,SAASyB,gBAAgB,CAACxD,GAAe,EAAE2B,GAAiB,EAAEV,OAAwB,EAAEkC,OAAuB;EAE3G,MAAMtC,UAAU,GAAG,uBAAQ,EAACI,OAAO,CAACJ,UAAU,EAAE,YAAY,CAAC;EAE7D;EACA,MAAMV,EAAE,GAAIgD,OAAO,CAAChD,EAAE,IAAI,IAAI,GAAI,uBAAQ,EAACgD,OAAO,CAAChD,EAAE,EAAE,YAAY,CAAC,GAAE,0BAAW,EAAC,EAAE,CAAC;EACrF,6BAAc,EAACA,EAAE,CAACsD,MAAM,KAAK,EAAE,EAAE,2BAA2B,EAAE,YAAY,EAAEN,OAAO,CAAChD,EAAE,CAAC;EAEvF;EACA,MAAMuD,UAAU,GAAIP,OAAO,CAACQ,IAAI,IAAI,IAAI,GAAI,uBAAQ,EAACR,OAAO,CAACQ,IAAI,EAAE,cAAc,CAAC,GAAE,0BAAW,EAAC,EAAE,CAAC;EACnG,6BAAc,EAACD,UAAU,CAACD,MAAM,KAAK,EAAE,EAAE,6BAA6B,EAAE,cAAc,EAAEN,OAAO,CAAChD,EAAE,CAAC;EAEnG;EACA;EACA;EACA,MAAMyD,UAAU,GAAG5D,GAAG,CAACU,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;EACnC,MAAMmD,SAAS,GAAG7D,GAAG,CAACU,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;EAEnC;EACA,MAAMN,MAAM,GAAG,IAAIC,YAAG,CAACuD,UAAU,EAAEzD,EAAE,CAAC;EACtC,MAAMF,UAAU,GAAG,uBAAQ,EAACG,MAAM,CAAC0D,OAAO,CAACjD,UAAU,CAAC,CAAC;EAEvD;EACA,MAAMkD,GAAG,GAAG,wBAAS,EAAC,qBAAM,EAAC,CAAEF,SAAS,EAAE5D,UAAU,CAAE,CAAC,CAAC;EAExD;EACA,MAAMT,IAAI,GAA2B;IACjCsB,OAAO,EAAEG,OAAO,CAACH,OAAO,CAACH,SAAS,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE;IACnDoD,EAAE,EAAE,qBAAM,EAACN,UAAU,CAAC;IACtB/D,OAAO,EAAE,CAAC;IACVsE,MAAM,EAAE;MACJ/D,MAAM,EAAE,aAAa;MACrBgE,YAAY,EAAE;QACV/D,EAAE,EAAE,sBAAO,EAACA,EAAE,CAAC,CAACQ,SAAS,CAAC,CAAC;OAC9B;MACDV,UAAU,EAAE,sBAAO,EAACA,UAAU,CAAC,CAACU,SAAS,CAAC,CAAC,CAAC;MAC5CgB,GAAG,EAAE,QAAQ;MACbwC,SAAS,EAAE;QACPvC,IAAI,EAAE,sBAAO,EAACD,GAAG,CAACC,IAAI,CAAC,CAACjB,SAAS,CAAC,CAAC,CAAC;QACpCyD,CAAC,EAAEzC,GAAG,CAACE,CAAC;QACRwC,KAAK,EAAE,EAAE;QACTtC,CAAC,EAAEJ,GAAG,CAACI,CAAC;QACRD,CAAC,EAAEH,GAAG,CAACG;OACV;MACDiC,GAAG,EAAEA,GAAG,CAACpD,SAAS,CAAC,CAAC;;GAE3B;EAED;EACA,IAAIM,OAAO,CAACK,QAAQ,EAAE;IAClB,MAAMgD,MAAM,GAAInB,OAAO,CAACmB,MAAM,IAAI,IAAI,GAAInB,OAAO,CAACmB,MAAM,GAAE,UAAWC,qBAAQ,EAAE;IAE/E,MAAMhD,IAAI,GAAGN,OAAO,CAACK,QAAQ,CAACC,IAAI,IAAIlC,WAAW;IACjD,MAAMmC,MAAM,GAAGP,OAAO,CAACK,QAAQ,CAACE,MAAM,IAAI,IAAI;IAE9C,MAAMN,WAAW,GAAGlB,GAAG,CAACU,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;IAErC,MAAMe,OAAO,GAAG,uBAAQ,EAACR,OAAO,CAACK,QAAQ,CAACG,OAAO,EAAE,0BAA0B,CAAC;IAC9E,MAAML,UAAU,GAAG,0BAAW,EAAC,EAAE,CAAC;IAClC,MAAMC,cAAc,GAAG,IAAIhB,YAAG,CAACa,WAAW,EAAEE,UAAU,CAAC;IACvD,MAAMD,kBAAkB,GAAG,uBAAQ,EAACE,cAAc,CAACyC,OAAO,CAACrC,OAAO,CAAC,CAAC;IAEpE,MAAM+C,GAAG,GAAG,IAAIC,IAAI,EAAE;IACtB,MAAMC,SAAS,GAAIF,GAAG,CAACG,cAAc,EAAE,GAAG,GAAG,GAC1B,mBAAI,EAACH,GAAG,CAACI,WAAW,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,GAAG,GACpC,mBAAI,EAACJ,GAAG,CAACK,UAAU,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,GAC/B,mBAAI,EAACL,GAAG,CAACM,WAAW,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,GAChC,mBAAI,EAACN,GAAG,CAACO,aAAa,EAAE,EAAE,CAAC,CAAC,GAAG,GAAG,GAClC,mBAAI,EAACP,GAAG,CAACQ,aAAa,EAAE,EAAE,CAAC,CAAC,GAAG,KAAM;IACxD,MAAMC,YAAY,GAAI,OAAO,GAAGP,SAAS,GAAG,IAAI,GAAGlF,IAAI,CAACsB,OAAQ;IAEhEtB,IAAI,CAAC,UAAU,CAAC,GAAG;MACf8E,MAAM;MAAEW,YAAY;MAAE1D,IAAI;MAAEC,MAAM;MAClC0D,eAAe,EAAE,sBAAO,EAAC9D,UAAU,CAAC,CAACT,SAAS,CAAC,CAAC,CAAC;MACjDQ,kBAAkB,EAAE,sBAAO,EAACA,kBAAkB,CAAC,CAACR,SAAS,CAAC,CAAC,CAAC;MAC5DhB,OAAO,EAAE;KACZ;;EAGL,OAAOF,IAAI,CAAC0F,SAAS,CAAC3F,IAAI,CAAC;AAC/B;AAEA;;;;;;;;AAQA,SAAgB4F,uBAAuB,CAACnE,OAAwB,EAAEwB,QAA6B,EAAEU,OAAwB;EACrH,IAAIA,OAAO,IAAI,IAAI,EAAE;IAAEA,OAAO,GAAG,EAAG;;EAEpC,MAAMkC,aAAa,GAAG,0BAAW,EAAC5C,QAAQ,CAAC;EAC3C,MAAMd,GAAG,GAAGuB,mBAAmB,CAACC,OAAO,CAAC;EACxC,MAAMnD,GAAG,GAAG,yBAAU,EAACqF,aAAa,EAAE1D,GAAG,CAACC,IAAI,EAAED,GAAG,CAACE,CAAC,EAAEF,GAAG,CAACG,CAAC,EAAEH,GAAG,CAACI,CAAC,EAAE,EAAE,CAAC;EACxE,OAAOyB,gBAAgB,CAAC,uBAAQ,EAACxD,GAAG,CAAC,EAAE2B,GAAG,EAAEV,OAAO,EAAEkC,OAAO,CAAC;AACjE;AAPArD;AASA;;;;;;;;;AASO,eAAewF,mBAAmB,CAACrE,OAAwB,EAAEwB,QAA6B,EAAEU,OAAwB;EACvH,IAAIA,OAAO,IAAI,IAAI,EAAE;IAAEA,OAAO,GAAG,EAAG;;EAEpC,MAAMkC,aAAa,GAAG,0BAAW,EAAC5C,QAAQ,CAAC;EAC3C,MAAMd,GAAG,GAAGuB,mBAAmB,CAACC,OAAO,CAAC;EACxC,MAAMnD,GAAG,GAAG,MAAM,qBAAM,EAACqF,aAAa,EAAE1D,GAAG,CAACC,IAAI,EAAED,GAAG,CAACE,CAAC,EAAEF,GAAG,CAACG,CAAC,EAAEH,GAAG,CAACI,CAAC,EAAE,EAAE,EAAEoB,OAAO,CAACoC,gBAAgB,CAAC;EACpG,OAAO/B,gBAAgB,CAAC,uBAAQ,EAACxD,GAAG,CAAC,EAAE2B,GAAG,EAAEV,OAAO,EAAEkC,OAAO,CAAC;AACjE;AAPArD","names":["defaultPath","isKeystoreJson","json","data","JSON","parse","version","parseInt","error","exports","decrypt","key","ciphertext","cipher","iv","aesCtr","aes_js_1","operation","getAccount","_key","computedMAC","slice","substring","toLowerCase","privateKey","address","check","startsWith","account","mnemonicKey","mnemonicCiphertext","mnemonicIv","mnemonicAesCtr","mnemonic","path","locale","entropy","getDecryptKdfParams","kdf","salt","N","r","p","dkLen","name","prf","algorithm","split","pop","count","decryptKeystoreJsonSync","_password","password","params","stall","duration","Promise","resolve","setTimeout","decryptKeystoreJson","progress","getEncryptKdfParams","options","scrypt","Number","isSafeInteger","BigInt","_encryptKeystore","length","uuidRandom","uuid","derivedKey","macPrefix","encrypt","mac","id","Crypto","cipherparams","kdfparams","n","dklen","client","_version_js_1","now","Date","timestamp","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","gethFilename","mnemonicCounter","stringify","encryptKeystoreJsonSync","passwordBytes","encryptKeystoreJson","progressCallback"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/wallet/json-keystore.ts"],"sourcesContent":["/**\n *  The JSON Wallet formats allow a simple way to store the private\n *  keys needed in Ethereum along with related information and allows\n *  for extensible forms of encryption.\n *\n *  These utilities facilitate decrypting and encrypting the most common\n *  JSON Wallet formats.\n *\n *  @_subsection: api/wallet:JSON Wallets  [json-wallets]\n */\n\nimport { CTR } from \"aes-js\";\n\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256, pbkdf2, randomBytes, scrypt, scryptSync } from \"../crypto/index.js\";\nimport { computeAddress } from \"../transaction/index.js\";\nimport {\n    concat, getBytes, hexlify, uuidV4, assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { getPassword, spelunk, zpad } from \"./utils.js\";\n\nimport type { ProgressCallback } from \"../crypto/index.js\";\nimport type { BytesLike } from \"../utils/index.js\";\n\nimport { version } from \"../_version.js\";\n\n\nconst defaultPath = \"m/44'/60'/0'/0/0\";\n\n/**\n *  The contents of a JSON Keystore Wallet.\n */\nexport type KeystoreAccount = {\n    address: string;\n    privateKey: string;\n    mnemonic?: {\n        path?: string;\n        locale?: string;\n        entropy: string;\n    }\n};\n\n/**\n *  The parameters to use when encrypting a JSON Keystore Wallet.\n */\nexport type EncryptOptions = {\n   progressCallback?: ProgressCallback;\n   iv?: BytesLike;\n   entropy?: BytesLike;\n   client?: string;\n   salt?: BytesLike;\n   uuid?: string;\n   scrypt?: {\n       N?: number;\n       r?: number;\n       p?: number;\n   }\n}\n\n/**\n *  Returns true if %%json%% is a valid JSON Keystore Wallet.\n */\nexport function isKeystoreJson(json: string): boolean {\n    try {\n        const data = JSON.parse(json);\n        const version = ((data.version != null) ? parseInt(data.version): 0);\n        if (version === 3) { return true; }\n    } catch (error) { }\n    return false;\n}\n\nfunction decrypt(data: any, key: Uint8Array, ciphertext: Uint8Array): string {\n    const cipher = spelunk<string>(data, \"crypto.cipher:string\");\n    if (cipher === \"aes-128-ctr\") {\n        const iv = spelunk<Uint8Array>(data, \"crypto.cipherparams.iv:data!\")\n        const aesCtr = new CTR(key, iv);\n        return hexlify(aesCtr.decrypt(ciphertext));\n    }\n\n    assert(false, \"unsupported cipher\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"decrypt\"\n    });\n}\n\nfunction getAccount(data: any, _key: string): KeystoreAccount {\n    const key = getBytes(_key);\n    const ciphertext = spelunk<Uint8Array>(data, \"crypto.ciphertext:data!\");\n\n    const computedMAC = hexlify(keccak256(concat([ key.slice(16, 32), ciphertext ]))).substring(2);\n    assertArgument(computedMAC === spelunk<string>(data, \"crypto.mac:string!\").toLowerCase(),\n        \"incorrect password\", \"password\", \"[ REDACTED ]\");\n\n    const privateKey = decrypt(data, key.slice(0, 16), ciphertext);\n\n    const address = computeAddress(privateKey);\n    if (data.address) {\n        let check = data.address.toLowerCase();\n        if (!check.startsWith(\"0x\")) { check = \"0x\" + check; }\n\n        assertArgument(getAddress(check) === address, \"keystore address/privateKey mismatch\", \"address\", data.address);\n    }\n\n    const account: KeystoreAccount = { address, privateKey };\n\n    // Version 0.1 x-ethers metadata must contain an encrypted mnemonic phrase\n    const version = spelunk(data, \"x-ethers.version:string\");\n    if (version === \"0.1\") {\n        const mnemonicKey = key.slice(32, 64);\n\n        const mnemonicCiphertext = spelunk<Uint8Array>(data, \"x-ethers.mnemonicCiphertext:data!\");\n        const mnemonicIv = spelunk<Uint8Array>(data, \"x-ethers.mnemonicCounter:data!\");\n\n        const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n\n        account.mnemonic = {\n            path: (spelunk<null | string>(data, \"x-ethers.path:string\") || defaultPath),\n            locale: (spelunk<null | string>(data, \"x-ethers.locale:string\") || \"en\"),\n            entropy: hexlify(getBytes(mnemonicAesCtr.decrypt(mnemonicCiphertext)))\n        };\n    }\n\n    return account;\n}\n\ntype ScryptParams = {\n    name: \"scrypt\";\n    salt: Uint8Array;\n    N: number;\n    r: number;\n    p: number;\n    dkLen: number;\n};\n\ntype KdfParams = ScryptParams | {\n    name: \"pbkdf2\";\n    salt: Uint8Array;\n    count: number;\n    dkLen: number;\n    algorithm: \"sha256\" | \"sha512\";\n};\n\nfunction getDecryptKdfParams<T>(data: any): KdfParams {\n    const kdf = spelunk(data, \"crypto.kdf:string\");\n    if (kdf && typeof(kdf) === \"string\") {\n        if (kdf.toLowerCase() === \"scrypt\") {\n            const salt = spelunk<Uint8Array>(data, \"crypto.kdfparams.salt:data!\");\n            const N = spelunk<number>(data, \"crypto.kdfparams.n:int!\");\n            const r = spelunk<number>(data, \"crypto.kdfparams.r:int!\");\n            const p = spelunk<number>(data, \"crypto.kdfparams.p:int!\");\n\n            // Make sure N is a power of 2\n            assertArgument(N > 0 && (N & (N - 1)) === 0, \"invalid kdf.N\", \"kdf.N\", N);\n            assertArgument(r > 0 && p > 0, \"invalid kdf\", \"kdf\", kdf);\n\n            const dkLen = spelunk<number>(data, \"crypto.kdfparams.dklen:int!\");\n            assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dflen\", dkLen);\n\n            return { name: \"scrypt\", salt, N, r, p, dkLen: 64 };\n\n        } else if (kdf.toLowerCase() === \"pbkdf2\") {\n\n            const salt = spelunk<Uint8Array>(data, \"crypto.kdfparams.salt:data!\");\n\n            const prf = spelunk<string>(data, \"crypto.kdfparams.prf:string!\");\n            const algorithm = prf.split(\"-\").pop();\n            assertArgument(algorithm === \"sha256\" || algorithm === \"sha512\", \"invalid kdf.pdf\", \"kdf.pdf\", prf);\n\n            const count = spelunk<number>(data, \"crypto.kdfparams.c:int!\");\n\n            const dkLen = spelunk<number>(data, \"crypto.kdfparams.dklen:int!\");\n            assertArgument(dkLen === 32, \"invalid kdf.dklen\", \"kdf.dklen\", dkLen);\n\n            return { name: \"pbkdf2\", salt, count, dkLen, algorithm };\n        }\n    }\n\n    assertArgument(false, \"unsupported key-derivation function\", \"kdf\", kdf);\n}\n\n\n/**\n *  Returns the account details for the JSON Keystore Wallet %%json%%\n *  using %%password%%.\n *\n *  It is preferred to use the [async version](decryptKeystoreJson)\n *  instead, which allows a [[ProgressCallback]] to keep the user informed\n *  as to the decryption status.\n *\n *  This method will block the event loop (freezing all UI) until decryption\n *  is complete, which can take quite some time, depending on the wallet\n *  paramters and platform.\n */\nexport function decryptKeystoreJsonSync(json: string, _password: string | Uint8Array): KeystoreAccount {\n    const data = JSON.parse(json);\n\n    const password = getPassword(_password);\n\n    const params = getDecryptKdfParams(data);\n    if (params.name === \"pbkdf2\") {\n        const { salt, count, dkLen, algorithm } = params;\n        const key = pbkdf2(password, salt, count, dkLen, algorithm);\n        return getAccount(data, key);\n    }\n\n    assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", { params })\n\n    const { salt, N, r, p, dkLen } = params;\n    const key = scryptSync(password, salt, N, r, p, dkLen);\n    return getAccount(data, key);\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });\n}\n\n/**\n *  Resolves to the decrypted JSON Keystore Wallet %%json%% using the\n *  %%password%%.\n *\n *  If provided, %%progress%% will be called periodically during the\n *  decrpytion to provide feedback, and if the function returns\n *  ``false`` will halt decryption.\n *\n *  The %%progressCallback%% will **always** receive ``0`` before\n *  decryption begins and ``1`` when complete.\n */\nexport async function decryptKeystoreJson(json: string, _password: string | Uint8Array, progress?: ProgressCallback): Promise<KeystoreAccount> {\n    const data = JSON.parse(json);\n\n    const password = getPassword(_password);\n\n    const params = getDecryptKdfParams(data);\n    if (params.name === \"pbkdf2\") {\n        if (progress) {\n            progress(0);\n            await stall(0);\n        }\n        const { salt, count, dkLen, algorithm } = params;\n        const key = pbkdf2(password, salt, count, dkLen, algorithm);\n        if (progress) {\n            progress(1);\n            await stall(0);\n        }\n        return getAccount(data, key);\n    }\n\n    assert(params.name === \"scrypt\", \"cannot be reached\", \"UNKNOWN_ERROR\", { params })\n\n    const { salt, N, r, p, dkLen } = params;\n    const key = await scrypt(password, salt, N, r, p, dkLen, progress);\n    return getAccount(data, key);\n}\n\nfunction getEncryptKdfParams(options: EncryptOptions): ScryptParams {\n    // Check/generate the salt\n    const salt = (options.salt != null) ? getBytes(options.salt, \"options.salt\"): randomBytes(32);\n\n    // Override the scrypt password-based key derivation function parameters\n    let N = (1 << 17), r = 8, p = 1;\n    if (options.scrypt) {\n        if (options.scrypt.N) { N = options.scrypt.N; }\n        if (options.scrypt.r) { r = options.scrypt.r; }\n        if (options.scrypt.p) { p = options.scrypt.p; }\n    }\n    assertArgument(typeof(N) === \"number\" && N > 0 && Number.isSafeInteger(N) && (BigInt(N) & BigInt(N - 1)) === BigInt(0), \"invalid scrypt N parameter\", \"options.N\", N);\n    assertArgument(typeof(r) === \"number\" && r > 0 && Number.isSafeInteger(r), \"invalid scrypt r parameter\", \"options.r\", r);\n    assertArgument(typeof(p) === \"number\" && p > 0 && Number.isSafeInteger(p), \"invalid scrypt p parameter\", \"options.p\", p);\n\n    return { name: \"scrypt\", dkLen: 32, salt, N, r, p };\n}\n\nfunction _encryptKeystore(key: Uint8Array, kdf: ScryptParams, account: KeystoreAccount, options: EncryptOptions): any {\n\n    const privateKey = getBytes(account.privateKey, \"privateKey\");\n\n    // Override initialization vector\n    const iv = (options.iv != null) ? getBytes(options.iv, \"options.iv\"): randomBytes(16);\n    assertArgument(iv.length === 16, \"invalid options.iv length\", \"options.iv\", options.iv);\n\n    // Override the uuid\n    const uuidRandom = (options.uuid != null) ? getBytes(options.uuid, \"options.uuid\"): randomBytes(16);\n    assertArgument(uuidRandom.length === 16, \"invalid options.uuid length\", \"options.uuid\", options.iv);\n\n    // This will be used to encrypt the wallet (as per Web3 secret storage)\n    // - 32 bytes   As normal for the Web3 secret storage (derivedKey, macPrefix)\n    // - 32 bytes   AES key to encrypt mnemonic with (required here to be Ethers Wallet)\n    const derivedKey = key.slice(0, 16);\n    const macPrefix = key.slice(16, 32);\n\n    // Encrypt the private key\n    const aesCtr = new CTR(derivedKey, iv);\n    const ciphertext = getBytes(aesCtr.encrypt(privateKey));\n\n    // Compute the message authentication code, used to check the password\n    const mac = keccak256(concat([ macPrefix, ciphertext ]))\n\n    // See: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition\n    const data: { [key: string]: any } = {\n        address: account.address.substring(2).toLowerCase(),\n        id: uuidV4(uuidRandom),\n        version: 3,\n        Crypto: {\n            cipher: \"aes-128-ctr\",\n            cipherparams: {\n                iv: hexlify(iv).substring(2),\n            },\n            ciphertext: hexlify(ciphertext).substring(2),\n            kdf: \"scrypt\",\n            kdfparams: {\n                salt: hexlify(kdf.salt).substring(2),\n                n: kdf.N,\n                dklen: 32,\n                p: kdf.p,\n                r: kdf.r\n            },\n            mac: mac.substring(2)\n        }\n    };\n\n    // If we have a mnemonic, encrypt it into the JSON wallet\n    if (account.mnemonic) {\n        const client = (options.client != null) ? options.client: `ethers/${ version }`;\n\n        const path = account.mnemonic.path || defaultPath;\n        const locale = account.mnemonic.locale || \"en\";\n\n        const mnemonicKey = key.slice(32, 64);\n\n        const entropy = getBytes(account.mnemonic.entropy, \"account.mnemonic.entropy\");\n        const mnemonicIv = randomBytes(16);\n        const mnemonicAesCtr = new CTR(mnemonicKey, mnemonicIv);\n        const mnemonicCiphertext = getBytes(mnemonicAesCtr.encrypt(entropy));\n\n        const now = new Date();\n        const timestamp = (now.getUTCFullYear() + \"-\" +\n                           zpad(now.getUTCMonth() + 1, 2) + \"-\" +\n                           zpad(now.getUTCDate(), 2) + \"T\" +\n                           zpad(now.getUTCHours(), 2) + \"-\" +\n                           zpad(now.getUTCMinutes(), 2) + \"-\" +\n                           zpad(now.getUTCSeconds(), 2) + \".0Z\");\n        const gethFilename = (\"UTC--\" + timestamp + \"--\" + data.address);\n\n        data[\"x-ethers\"] = {\n            client, gethFilename, path, locale,\n            mnemonicCounter: hexlify(mnemonicIv).substring(2),\n            mnemonicCiphertext: hexlify(mnemonicCiphertext).substring(2),\n            version: \"0.1\"\n        };\n    }\n\n    return JSON.stringify(data);\n}\n\n/**\n *  Return the JSON Keystore Wallet for %%account%% encrypted with\n *  %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used. Any provided [[ProgressCallback]] is ignord.\n */\nexport function encryptKeystoreJsonSync(account: KeystoreAccount, password: string | Uint8Array, options?: EncryptOptions): string {\n    if (options == null) { options = { }; }\n\n    const passwordBytes = getPassword(password);\n    const kdf = getEncryptKdfParams(options);\n    const key = scryptSync(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);\n    return _encryptKeystore(getBytes(key), kdf, account, options);\n}\n\n/**\n *  Resolved to the JSON Keystore Wallet for %%account%% encrypted\n *  with %%password%%.\n *\n *  The %%options%% can be used to tune the password-based key\n *  derivation function parameters, explicitly set the random values\n *  used and provide a [[ProgressCallback]] to receive periodic updates\n *  on the completion status..\n */\nexport async function encryptKeystoreJson(account: KeystoreAccount, password: string | Uint8Array, options?: EncryptOptions): Promise<string> {\n    if (options == null) { options = { }; }\n\n    const passwordBytes = getPassword(password);\n    const kdf = getEncryptKdfParams(options);\n    const key = await scrypt(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);\n    return _encryptKeystore(getBytes(key), kdf, account, options);\n}\n\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}