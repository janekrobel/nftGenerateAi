{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Signature = void 0;\nconst index_js_1 = require(\"../constants/index.js\");\nconst index_js_2 = require(\"../utils/index.js\");\n// Constants\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst _guard = {};\nfunction toUint256(value) {\n  return (0, index_js_2.zeroPadValue)((0, index_js_2.toBeArray)(value), 32);\n}\n/**\n *  A Signature  @TODO\n *\n *\n *  @_docloc: api/crypto:Signing\n */\nclass Signature {\n  #r;\n  #s;\n  #v;\n  #networkV;\n  /**\n   *  The ``r`` value for a signautre.\n   *\n   *  This represents the ``x`` coordinate of a \"reference\" or\n   *  challenge point, from which the ``y`` can be computed.\n   */\n  get r() {\n    return this.#r;\n  }\n  set r(value) {\n    (0, index_js_2.assertArgument)((0, index_js_2.dataLength)(value) === 32, \"invalid r\", \"value\", value);\n    this.#r = (0, index_js_2.hexlify)(value);\n  }\n  /**\n   *  The ``s`` value for a signature.\n   */\n  get s() {\n    return this.#s;\n  }\n  set s(_value) {\n    (0, index_js_2.assertArgument)((0, index_js_2.dataLength)(_value) === 32, \"invalid r\", \"value\", _value);\n    const value = (0, index_js_2.hexlify)(_value);\n    (0, index_js_2.assertArgument)(parseInt(value.substring(0, 3)) < 8, \"non-canonical s\", \"value\", value);\n    this.#s = value;\n  }\n  /**\n   *  The ``v`` value for a signature.\n   *\n   *  Since a given ``x`` value for ``r`` has two possible values for\n   *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\n   *  values to use.\n   *\n   *  It is normalized to the values ``27`` or ``28`` for legacy\n   *  purposes.\n   */\n  get v() {\n    return this.#v;\n  }\n  set v(value) {\n    const v = (0, index_js_2.getNumber)(value, \"value\");\n    (0, index_js_2.assertArgument)(v === 27 || v === 28, \"invalid v\", \"v\", value);\n    this.#v = v;\n  }\n  /**\n   *  The EIP-155 ``v`` for legacy transactions. For non-legacy\n   *  transactions, this value is ``null``.\n   */\n  get networkV() {\n    return this.#networkV;\n  }\n  /**\n   *  The chain ID for EIP-155 legacy transactions. For non-legacy\n   *  transactions, this value is ``null``.\n   */\n  get legacyChainId() {\n    const v = this.networkV;\n    if (v == null) {\n      return null;\n    }\n    return Signature.getChainId(v);\n  }\n  /**\n   *  The ``yParity`` for the signature.\n   *\n   *  See ``v`` for more details on how this value is used.\n   */\n  get yParity() {\n    return this.v === 27 ? 0 : 1;\n  }\n  /**\n   *  The [[link-eip-2098]] compact representation of the ``yParity``\n   *  and ``s`` compacted into a single ``bytes32``.\n   */\n  get yParityAndS() {\n    // The EIP-2098 compact representation\n    const yParityAndS = (0, index_js_2.getBytes)(this.s);\n    if (this.yParity) {\n      yParityAndS[0] |= 0x80;\n    }\n    return (0, index_js_2.hexlify)(yParityAndS);\n  }\n  /**\n   *  The [[link-eip-2098]] compact representation.\n   */\n  get compactSerialized() {\n    return (0, index_js_2.concat)([this.r, this.yParityAndS]);\n  }\n  /**\n   *  The serialized representation.\n   */\n  get serialized() {\n    return (0, index_js_2.concat)([this.r, this.s, this.yParity ? \"0x1c\" : \"0x1b\"]);\n  }\n  /**\n   *  @private\n   */\n  constructor(guard, r, s, v) {\n    (0, index_js_2.assertPrivate)(guard, _guard, \"Signature\");\n    this.#r = r;\n    this.#s = s;\n    this.#v = v;\n    this.#networkV = null;\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return `Signature { r: \"${this.r}\", s: \"${this.s}\", yParity: ${this.yParity}, networkV: ${this.networkV} }`;\n  }\n  /**\n   *  Returns a new identical [[Signature]].\n   */\n  clone() {\n    const clone = new Signature(_guard, this.r, this.s, this.v);\n    if (this.networkV) {\n      clone.#networkV = this.networkV;\n    }\n    return clone;\n  }\n  /**\n   *  Returns a representation that is compatible with ``JSON.stringify``.\n   */\n  toJSON() {\n    const networkV = this.networkV;\n    return {\n      _type: \"signature\",\n      networkV: networkV != null ? networkV.toString() : null,\n      r: this.r,\n      s: this.s,\n      v: this.v\n    };\n  }\n  /**\n   *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\n   *\n   *  @example:\n   *    Signature.getChainId(45)\n   *    //_result:\n   *\n   *    Signature.getChainId(46)\n   *    //_result:\n   */\n  static getChainId(v) {\n    const bv = (0, index_js_2.getBigInt)(v, \"v\");\n    // The v is not an EIP-155 v, so it is the unspecified chain ID\n    if (bv == BN_27 || bv == BN_28) {\n      return BN_0;\n    }\n    // Bad value for an EIP-155 v\n    (0, index_js_2.assertArgument)(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\n    return (bv - BN_35) / BN_2;\n  }\n  /**\n   *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\n   *\n   *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\n   *  property to include the chain ID.\n   *\n   *  @example:\n   *    Signature.getChainIdV(5, 27)\n   *    //_result:\n   *\n   *    Signature.getChainIdV(5, 28)\n   *    //_result:\n   *\n   */\n  static getChainIdV(chainId, v) {\n    return (0, index_js_2.getBigInt)(chainId) * BN_2 + BigInt(35 + v - 27);\n  }\n  /**\n   *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\n   *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\n   *\n   *  @example:\n   *    // The values 0 and 1 imply v is actually yParity\n   *    Signature.getNormalizedV(0)\n   *    //_result:\n   *\n   *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\n   *    Signature.getNormalizedV(27)\n   *    //_result:\n   *\n   *    // Legacy EIP-155 transaction (i.e. >= 35)\n   *    Signature.getNormalizedV(46)\n   *    //_result:\n   *\n   *    // Invalid values throw\n   *    Signature.getNormalizedV(5)\n   *    //_error:\n   */\n  static getNormalizedV(v) {\n    const bv = (0, index_js_2.getBigInt)(v);\n    if (bv === BN_0 || bv === BN_27) {\n      return 27;\n    }\n    if (bv === BN_1 || bv === BN_28) {\n      return 28;\n    }\n    (0, index_js_2.assertArgument)(bv >= BN_35, \"invalid v\", \"v\", v);\n    // Otherwise, EIP-155 v means odd is 27 and even is 28\n    return bv & BN_1 ? 27 : 28;\n  }\n  /**\n   *  Creates a new [[Signature]].\n   *\n   *  If no %%sig%% is provided, a new [[Signature]] is created\n   *  with default values.\n   *\n   *  If %%sig%% is a string, it is parsed.\n   */\n  static from(sig) {\n    function assertError(check, message) {\n      (0, index_js_2.assertArgument)(check, message, \"signature\", sig);\n    }\n    ;\n    if (sig == null) {\n      return new Signature(_guard, index_js_1.ZeroHash, index_js_1.ZeroHash, 27);\n    }\n    if (typeof sig === \"string\") {\n      const bytes = (0, index_js_2.getBytes)(sig, \"signature\");\n      if (bytes.length === 64) {\n        const r = (0, index_js_2.hexlify)(bytes.slice(0, 32));\n        const s = bytes.slice(32, 64);\n        const v = s[0] & 0x80 ? 28 : 27;\n        s[0] &= 0x7f;\n        return new Signature(_guard, r, (0, index_js_2.hexlify)(s), v);\n      }\n      if (bytes.length === 65) {\n        const r = (0, index_js_2.hexlify)(bytes.slice(0, 32));\n        const s = bytes.slice(32, 64);\n        assertError((s[0] & 0x80) === 0, \"non-canonical s\");\n        const v = Signature.getNormalizedV(bytes[64]);\n        return new Signature(_guard, r, (0, index_js_2.hexlify)(s), v);\n      }\n      assertError(false, \"invlaid raw signature length\");\n    }\n    if (sig instanceof Signature) {\n      return sig.clone();\n    }\n    // Get r\n    const _r = sig.r;\n    assertError(_r != null, \"missing r\");\n    const r = toUint256(_r);\n    // Get s; by any means necessary (we check consistency below)\n    const s = function (s, yParityAndS) {\n      if (s != null) {\n        return toUint256(s);\n      }\n      if (yParityAndS != null) {\n        assertError((0, index_js_2.isHexString)(yParityAndS, 32), \"invalid yParityAndS\");\n        const bytes = (0, index_js_2.getBytes)(yParityAndS);\n        bytes[0] &= 0x7f;\n        return (0, index_js_2.hexlify)(bytes);\n      }\n      assertError(false, \"missing s\");\n    }(sig.s, sig.yParityAndS);\n    assertError(((0, index_js_2.getBytes)(s)[0] & 0x80) == 0, \"non-canonical s\");\n    // Get v; by any means necessary (we check consistency below)\n    const {\n      networkV,\n      v\n    } = function (_v, yParityAndS, yParity) {\n      if (_v != null) {\n        const v = (0, index_js_2.getBigInt)(_v);\n        return {\n          networkV: v >= BN_35 ? v : undefined,\n          v: Signature.getNormalizedV(v)\n        };\n      }\n      if (yParityAndS != null) {\n        assertError((0, index_js_2.isHexString)(yParityAndS, 32), \"invalid yParityAndS\");\n        return {\n          v: (0, index_js_2.getBytes)(yParityAndS)[0] & 0x80 ? 28 : 27\n        };\n      }\n      if (yParity != null) {\n        switch (yParity) {\n          case 0:\n            return {\n              v: 27\n            };\n          case 1:\n            return {\n              v: 28\n            };\n        }\n        assertError(false, \"invalid yParity\");\n      }\n      assertError(false, \"missing v\");\n    }(sig.v, sig.yParityAndS, sig.yParity);\n    const result = new Signature(_guard, r, s, v);\n    if (networkV) {\n      result.#networkV = networkV;\n    }\n    // If multiple of v, yParity, yParityAndS we given, check they match\n    assertError(!(\"yParity\" in sig && sig.yParity !== result.yParity), \"yParity mismatch\");\n    assertError(!(\"yParityAndS\" in sig && sig.yParityAndS !== result.yParityAndS), \"yParityAndS mismatch\");\n    return result;\n  }\n}\nexports.Signature = Signature;","map":{"version":3,"mappings":";;;;;;AACA;AACA;AAWA;AACA,MAAMA,IAAI,GAAGC,MAAM,CAAC,CAAC,CAAC;AACtB,MAAMC,IAAI,GAAGD,MAAM,CAAC,CAAC,CAAC;AACtB,MAAME,IAAI,GAAGF,MAAM,CAAC,CAAC,CAAC;AACtB,MAAMG,KAAK,GAAGH,MAAM,CAAC,EAAE,CAAC;AACxB,MAAMI,KAAK,GAAGJ,MAAM,CAAC,EAAE,CAAC;AACxB,MAAMK,KAAK,GAAGL,MAAM,CAAC,EAAE,CAAC;AAGxB,MAAMM,MAAM,GAAG,EAAG;AA6BlB,SAASC,SAAS,CAACC,KAAmB;EAClC,OAAO,2BAAY,EAAC,wBAAS,EAACA,KAAK,CAAC,EAAE,EAAE,CAAC;AAC7C;AAEA;;;;;;AAMA,MAAaC,SAAS;EAClB,EAAE;EACF,EAAE;EACF,EAAE;EACF,SAAS;EAET;;;;;;EAMA,IAAIC,CAAC;IAAa,OAAO,IAAI,CAAC,EAAE;EAAE;EAClC,IAAIA,CAAC,CAACF,KAAgB;IAClB,6BAAc,EAAC,yBAAU,EAACA,KAAK,CAAC,KAAK,EAAE,EAAE,WAAW,EAAE,OAAO,EAAEA,KAAK,CAAC;IACrE,IAAI,CAAC,EAAE,GAAG,sBAAO,EAACA,KAAK,CAAC;EAC5B;EAEA;;;EAGA,IAAIG,CAAC;IAAa,OAAO,IAAI,CAAC,EAAE;EAAE;EAClC,IAAIA,CAAC,CAACC,MAAiB;IACnB,6BAAc,EAAC,yBAAU,EAACA,MAAM,CAAC,KAAK,EAAE,EAAE,WAAW,EAAE,OAAO,EAAEA,MAAM,CAAC;IACvE,MAAMJ,KAAK,GAAG,sBAAO,EAACI,MAAM,CAAC;IAC7B,6BAAc,EAACC,QAAQ,CAACL,KAAK,CAACM,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,iBAAiB,EAAE,OAAO,EAAEN,KAAK,CAAC;IACtF,IAAI,CAAC,EAAE,GAAGA,KAAK;EACnB;EAEA;;;;;;;;;;EAUA,IAAIO,CAAC;IAAc,OAAO,IAAI,CAAC,EAAE;EAAE;EACnC,IAAIA,CAAC,CAACP,KAAmB;IACrB,MAAMO,CAAC,GAAG,wBAAS,EAACP,KAAK,EAAE,OAAO,CAAC;IACnC,6BAAc,EAACO,CAAC,KAAK,EAAE,IAAIA,CAAC,KAAK,EAAE,EAAE,WAAW,EAAE,GAAG,EAAEP,KAAK,CAAC;IAC7D,IAAI,CAAC,EAAE,GAAGO,CAAC;EACf;EAEA;;;;EAIA,IAAIC,QAAQ;IAAoB,OAAO,IAAI,CAAC,SAAS;EAAE;EAEvD;;;;EAIA,IAAIC,aAAa;IACb,MAAMF,CAAC,GAAG,IAAI,CAACC,QAAQ;IACvB,IAAID,CAAC,IAAI,IAAI,EAAE;MAAE,OAAO,IAAI;;IAC5B,OAAON,SAAS,CAACS,UAAU,CAACH,CAAC,CAAC;EAClC;EAEA;;;;;EAKA,IAAII,OAAO;IACP,OAAQ,IAAI,CAACJ,CAAC,KAAK,EAAE,GAAI,CAAC,GAAE,CAAC;EACjC;EAEA;;;;EAIA,IAAIK,WAAW;IACX;IACA,MAAMA,WAAW,GAAG,uBAAQ,EAAC,IAAI,CAACT,CAAC,CAAC;IACpC,IAAI,IAAI,CAACQ,OAAO,EAAE;MAAEC,WAAW,CAAC,CAAC,CAAC,IAAI,IAAI;;IAC1C,OAAO,sBAAO,EAACA,WAAW,CAAC;EAC/B;EAEA;;;EAGA,IAAIC,iBAAiB;IACjB,OAAO,qBAAM,EAAC,CAAE,IAAI,CAACX,CAAC,EAAE,IAAI,CAACU,WAAW,CAAE,CAAC;EAC/C;EAEA;;;EAGA,IAAIE,UAAU;IACV,OAAO,qBAAM,EAAC,CAAE,IAAI,CAACZ,CAAC,EAAE,IAAI,CAACC,CAAC,EAAG,IAAI,CAACQ,OAAO,GAAG,MAAM,GAAE,MAAM,CAAG,CAAC;EACtE;EAEA;;;EAGAI,YAAYC,KAAU,EAAEd,CAAS,EAAEC,CAAS,EAAEI,CAAU;IACpD,4BAAa,EAACS,KAAK,EAAElB,MAAM,EAAE,WAAW,CAAC;IACzC,IAAI,CAAC,EAAE,GAAGI,CAAC;IACX,IAAI,CAAC,EAAE,GAAGC,CAAC;IACX,IAAI,CAAC,EAAE,GAAGI,CAAC;IACX,IAAI,CAAC,SAAS,GAAG,IAAI;EACzB;EAEA,CAACU,MAAM,CAACC,GAAG,CAAC,4BAA4B,CAAC,IAAC;IACtC,OAAO,mBAAoB,IAAI,CAAChB,CAAE,UAAW,IAAI,CAACC,CAAE,eAAgB,IAAI,CAACQ,OAAQ,eAAgB,IAAI,CAACH,QAAS,IAAI;EACvH;EAEA;;;EAGAW,KAAK;IACD,MAAMA,KAAK,GAAG,IAAIlB,SAAS,CAACH,MAAM,EAAE,IAAI,CAACI,CAAC,EAAE,IAAI,CAACC,CAAC,EAAE,IAAI,CAACI,CAAC,CAAC;IAC3D,IAAI,IAAI,CAACC,QAAQ,EAAE;MAAEW,KAAK,CAAC,SAAS,GAAG,IAAI,CAACX,QAAQ;;IACpD,OAAOW,KAAK;EAChB;EAEA;;;EAGAC,MAAM;IACF,MAAMZ,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,OAAO;MACHa,KAAK,EAAE,WAAW;MAClBb,QAAQ,EAAIA,QAAQ,IAAI,IAAI,GAAIA,QAAQ,CAACc,QAAQ,EAAE,GAAE,IAAK;MAC1DpB,CAAC,EAAE,IAAI,CAACA,CAAC;MAAEC,CAAC,EAAE,IAAI,CAACA,CAAC;MAAEI,CAAC,EAAE,IAAI,CAACA;KACjC;EACL;EAEA;;;;;;;;;;EAUA,OAAOG,UAAU,CAACH,CAAe;IAC7B,MAAMgB,EAAE,GAAG,wBAAS,EAAChB,CAAC,EAAE,GAAG,CAAC;IAE5B;IACA,IAAKgB,EAAE,IAAI5B,KAAK,IAAM4B,EAAE,IAAI3B,KAAM,EAAE;MAAE,OAAOL,IAAI;;IAEjD;IACA,6BAAc,EAACgC,EAAE,IAAI1B,KAAK,EAAE,mBAAmB,EAAE,GAAG,EAAEU,CAAC,CAAC;IAExD,OAAO,CAACgB,EAAE,GAAG1B,KAAK,IAAIH,IAAI;EAC9B;EAEA;;;;;;;;;;;;;;EAcA,OAAO8B,WAAW,CAACC,OAAqB,EAAElB,CAAU;IAChD,OAAQ,wBAAS,EAACkB,OAAO,CAAC,GAAG/B,IAAI,GAAIF,MAAM,CAAC,EAAE,GAAGe,CAAC,GAAG,EAAE,CAAC;EAC5D;EAEA;;;;;;;;;;;;;;;;;;;;;EAqBA,OAAOmB,cAAc,CAACnB,CAAe;IACjC,MAAMgB,EAAE,GAAG,wBAAS,EAAChB,CAAC,CAAC;IAEvB,IAAIgB,EAAE,KAAKhC,IAAI,IAAIgC,EAAE,KAAK5B,KAAK,EAAE;MAAE,OAAO,EAAE;;IAC5C,IAAI4B,EAAE,KAAK9B,IAAI,IAAI8B,EAAE,KAAK3B,KAAK,EAAE;MAAE,OAAO,EAAE;;IAE5C,6BAAc,EAAC2B,EAAE,IAAI1B,KAAK,EAAE,WAAW,EAAE,GAAG,EAAEU,CAAC,CAAC;IAEhD;IACA,OAAQgB,EAAE,GAAG9B,IAAI,GAAI,EAAE,GAAE,EAAE;EAC/B;EAEA;;;;;;;;EAQA,OAAOkC,IAAI,CAACC,GAAmB;IAC3B,SAASC,WAAW,CAACC,KAAc,EAAEC,OAAe;MAChD,6BAAc,EAACD,KAAK,EAAEC,OAAO,EAAE,WAAW,EAAEH,GAAG,CAAC;IACpD;IAAC;IAED,IAAIA,GAAG,IAAI,IAAI,EAAE;MACb,OAAO,IAAI3B,SAAS,CAACH,MAAM,EAAEkC,mBAAQ,EAAEA,mBAAQ,EAAE,EAAE,CAAC;;IAGxD,IAAI,OAAOJ,GAAI,KAAK,QAAQ,EAAE;MAC1B,MAAMK,KAAK,GAAG,uBAAQ,EAACL,GAAG,EAAE,WAAW,CAAC;MACxC,IAAIK,KAAK,CAACC,MAAM,KAAK,EAAE,EAAE;QACrB,MAAMhC,CAAC,GAAG,sBAAO,EAAC+B,KAAK,CAACE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACrC,MAAMhC,CAAC,GAAG8B,KAAK,CAACE,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;QAC7B,MAAM5B,CAAC,GAAIJ,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAI,EAAE,GAAE,EAAE;QAChCA,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI;QACZ,OAAO,IAAIF,SAAS,CAACH,MAAM,EAAEI,CAAC,EAAE,sBAAO,EAACC,CAAC,CAAC,EAAEI,CAAC,CAAC;;MAGlD,IAAI0B,KAAK,CAACC,MAAM,KAAK,EAAE,EAAE;QACrB,MAAMhC,CAAC,GAAG,sBAAO,EAAC+B,KAAK,CAACE,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;QACrC,MAAMhC,CAAC,GAAG8B,KAAK,CAACE,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;QAC7BN,WAAW,CAAC,CAAC1B,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,CAAC,EAAE,iBAAiB,CAAC;QACnD,MAAMI,CAAC,GAAGN,SAAS,CAACyB,cAAc,CAACO,KAAK,CAAC,EAAE,CAAC,CAAC;QAC7C,OAAO,IAAIhC,SAAS,CAACH,MAAM,EAAEI,CAAC,EAAE,sBAAO,EAACC,CAAC,CAAC,EAAEI,CAAC,CAAC;;MAGlDsB,WAAW,CAAC,KAAK,EAAE,8BAA8B,CAAC;;IAGtD,IAAID,GAAG,YAAY3B,SAAS,EAAE;MAAE,OAAO2B,GAAG,CAACT,KAAK,EAAE;;IAElD;IACA,MAAMiB,EAAE,GAAGR,GAAG,CAAC1B,CAAC;IAChB2B,WAAW,CAACO,EAAE,IAAI,IAAI,EAAE,WAAW,CAAC;IACpC,MAAMlC,CAAC,GAAGH,SAAS,CAACqC,EAAE,CAAC;IAEvB;IACA,MAAMjC,CAAC,GAAI,UAASA,CAAU,EAAES,WAAoB;MAChD,IAAIT,CAAC,IAAI,IAAI,EAAE;QAAE,OAAOJ,SAAS,CAACI,CAAC,CAAC;;MAEpC,IAAIS,WAAW,IAAI,IAAI,EAAE;QACrBiB,WAAW,CAAC,0BAAW,EAACjB,WAAW,EAAE,EAAE,CAAC,EAAE,qBAAqB,CAAC;QAChE,MAAMqB,KAAK,GAAG,uBAAQ,EAACrB,WAAW,CAAC;QACnCqB,KAAK,CAAC,CAAC,CAAC,IAAI,IAAI;QAChB,OAAO,sBAAO,EAACA,KAAK,CAAC;;MAGzBJ,WAAW,CAAC,KAAK,EAAE,WAAW,CAAC;IACnC,CAAC,CAAED,GAAG,CAACzB,CAAC,EAAEyB,GAAG,CAAChB,WAAW,CAAC;IAC1BiB,WAAW,CAAC,CAAC,uBAAQ,EAAC1B,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,KAAK,CAAC,EAAE,iBAAiB,CAAC;IAE5D;IACA,MAAM;MAAEK,QAAQ;MAAED;IAAC,CAAE,GAAI,UAAS8B,EAAiB,EAAEzB,WAAoB,EAAED,OAAgB;MACvF,IAAI0B,EAAE,IAAI,IAAI,EAAE;QACZ,MAAM9B,CAAC,GAAG,wBAAS,EAAC8B,EAAE,CAAC;QACvB,OAAO;UACH7B,QAAQ,EAAID,CAAC,IAAIV,KAAK,GAAIU,CAAC,GAAE+B,SAAU;UACvC/B,CAAC,EAAEN,SAAS,CAACyB,cAAc,CAACnB,CAAC;SAChC;;MAGL,IAAIK,WAAW,IAAI,IAAI,EAAE;QACrBiB,WAAW,CAAC,0BAAW,EAACjB,WAAW,EAAE,EAAE,CAAC,EAAE,qBAAqB,CAAC;QAChE,OAAO;UAAEL,CAAC,EAAI,uBAAQ,EAACK,WAAW,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,GAAI,EAAE,GAAE;QAAG,CAAE;;MAG9D,IAAID,OAAO,IAAI,IAAI,EAAE;QACjB,QAAQA,OAAO;UACX,KAAK,CAAC;YAAE,OAAO;cAAEJ,CAAC,EAAE;YAAE,CAAE;UACxB,KAAK,CAAC;YAAE,OAAO;cAAEA,CAAC,EAAE;YAAE,CAAE;QAAC;QAE7BsB,WAAW,CAAC,KAAK,EAAE,iBAAiB,CAAC;;MAGzCA,WAAW,CAAC,KAAK,EAAE,WAAW,CAAC;IACnC,CAAC,CAAED,GAAG,CAACrB,CAAC,EAAEqB,GAAG,CAAChB,WAAW,EAAEgB,GAAG,CAACjB,OAAO,CAAC;IAEvC,MAAM4B,MAAM,GAAG,IAAItC,SAAS,CAACH,MAAM,EAAEI,CAAC,EAAEC,CAAC,EAAEI,CAAC,CAAC;IAC7C,IAAIC,QAAQ,EAAE;MAAE+B,MAAM,CAAC,SAAS,GAAI/B,QAAQ;;IAE5C;IACAqB,WAAW,CAAC,EAAE,SAAS,IAAID,GAAG,IAAIA,GAAG,CAACjB,OAAO,KAAK4B,MAAM,CAAC5B,OAAO,CAAC,EAAE,kBAAkB,CAAC;IACtFkB,WAAW,CAAC,EAAE,aAAa,IAAID,GAAG,IAAIA,GAAG,CAAChB,WAAW,KAAK2B,MAAM,CAAC3B,WAAW,CAAC,EAAE,sBAAsB,CAAC;IAEtG,OAAO2B,MAAM;EACjB;;AA3SJC","names":["BN_0","BigInt","BN_1","BN_2","BN_27","BN_28","BN_35","_guard","toUint256","value","Signature","r","s","_value","parseInt","substring","v","networkV","legacyChainId","getChainId","yParity","yParityAndS","compactSerialized","serialized","constructor","guard","Symbol","for","clone","toJSON","_type","toString","bv","getChainIdV","chainId","getNormalizedV","from","sig","assertError","check","message","index_js_1","bytes","length","slice","_r","_v","undefined","result","exports"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/crypto/signature.ts"],"sourcesContent":["\nimport { ZeroHash } from \"../constants/index.js\";\nimport {\n    concat, dataLength, getBigInt, getBytes, getNumber, hexlify,\n    toBeArray, isHexString, zeroPadValue,\n    assertArgument, assertPrivate\n} from \"../utils/index.js\";\n\nimport type {\n    BigNumberish, BytesLike\n} from \"../utils/index.js\";\n\n\n// Constants\nconst BN_0 = BigInt(0);\nconst BN_1 = BigInt(1);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\n\n\nconst _guard = { };\n\n// @TODO: Allow Uint8Array\n\n/**\n *  A SignatureLike\n *\n *  @_docloc: api/crypto:Signing\n */\nexport type SignatureLike = Signature | string | {\n    r: string;\n    s: string;\n    v: BigNumberish;\n    yParity?: 0 | 1;\n    yParityAndS?: string;\n} | {\n    r: string;\n    yParityAndS: string;\n    yParity?: 0 | 1;\n    s?: string;\n    v?: number;\n} | {\n    r: string;\n    s: string;\n    yParity: 0 | 1;\n    v?: BigNumberish;\n    yParityAndS?: string;\n};\n\nfunction toUint256(value: BigNumberish): string {\n    return zeroPadValue(toBeArray(value), 32);\n}\n\n/**\n *  A Signature  @TODO\n *\n *\n *  @_docloc: api/crypto:Signing\n */\nexport class Signature {\n    #r: string;\n    #s: string;\n    #v: 27 | 28;\n    #networkV: null | bigint;\n\n    /**\n     *  The ``r`` value for a signautre.\n     *\n     *  This represents the ``x`` coordinate of a \"reference\" or\n     *  challenge point, from which the ``y`` can be computed.\n     */\n    get r(): string { return this.#r; }\n    set r(value: BytesLike) {\n        assertArgument(dataLength(value) === 32, \"invalid r\", \"value\", value);\n        this.#r = hexlify(value);\n    }\n\n    /**\n     *  The ``s`` value for a signature.\n     */\n    get s(): string { return this.#s; }\n    set s(_value: BytesLike) {\n        assertArgument(dataLength(_value) === 32, \"invalid r\", \"value\", _value);\n        const value = hexlify(_value);\n        assertArgument(parseInt(value.substring(0, 3)) < 8, \"non-canonical s\", \"value\", value);\n        this.#s = value;\n    }\n\n    /**\n     *  The ``v`` value for a signature.\n     *\n     *  Since a given ``x`` value for ``r`` has two possible values for\n     *  its correspondin ``y``, the ``v`` indicates which of the two ``y``\n     *  values to use.\n     *\n     *  It is normalized to the values ``27`` or ``28`` for legacy\n     *  purposes.\n     */\n    get v(): 27 | 28 { return this.#v; }\n    set v(value: BigNumberish) {\n        const v = getNumber(value, \"value\");\n        assertArgument(v === 27 || v === 28, \"invalid v\", \"v\", value);\n        this.#v = v;\n    }\n\n    /**\n     *  The EIP-155 ``v`` for legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n    get networkV(): null | bigint { return this.#networkV; }\n\n    /**\n     *  The chain ID for EIP-155 legacy transactions. For non-legacy\n     *  transactions, this value is ``null``.\n     */\n    get legacyChainId(): null | bigint {\n        const v = this.networkV;\n        if (v == null) { return null; }\n        return Signature.getChainId(v);\n    }\n\n    /**\n     *  The ``yParity`` for the signature.\n     *\n     *  See ``v`` for more details on how this value is used.\n     */\n    get yParity(): 0 | 1 {\n        return (this.v === 27) ? 0: 1;\n    }\n\n    /**\n     *  The [[link-eip-2098]] compact representation of the ``yParity``\n     *  and ``s`` compacted into a single ``bytes32``.\n     */\n    get yParityAndS(): string {\n        // The EIP-2098 compact representation\n        const yParityAndS = getBytes(this.s);\n        if (this.yParity) { yParityAndS[0] |= 0x80; }\n        return hexlify(yParityAndS);\n    }\n\n    /**\n     *  The [[link-eip-2098]] compact representation.\n     */\n    get compactSerialized(): string {\n        return concat([ this.r, this.yParityAndS ]);\n    }\n\n    /**\n     *  The serialized representation.\n     */\n    get serialized(): string {\n        return concat([ this.r, this.s, (this.yParity ? \"0x1c\": \"0x1b\") ]);\n    }\n\n    /**\n     *  @private\n     */\n    constructor(guard: any, r: string, s: string, v: 27 | 28) {\n        assertPrivate(guard, _guard, \"Signature\");\n        this.#r = r;\n        this.#s = s;\n        this.#v = v;\n        this.#networkV = null;\n    }\n\n    [Symbol.for('nodejs.util.inspect.custom')](): string {\n        return `Signature { r: \"${ this.r }\", s: \"${ this.s }\", yParity: ${ this.yParity }, networkV: ${ this.networkV } }`;\n    }\n\n    /**\n     *  Returns a new identical [[Signature]].\n     */\n    clone(): Signature {\n        const clone = new Signature(_guard, this.r, this.s, this.v);\n        if (this.networkV) { clone.#networkV = this.networkV; }\n        return clone;\n    }\n\n    /**\n     *  Returns a representation that is compatible with ``JSON.stringify``.\n     */\n    toJSON(): any {\n        const networkV = this.networkV;\n        return {\n            _type: \"signature\",\n            networkV: ((networkV != null) ? networkV.toString(): null),\n            r: this.r, s: this.s, v: this.v,\n        };\n    }\n\n    /**\n     *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.\n     *\n     *  @example:\n     *    Signature.getChainId(45)\n     *    //_result:\n     *\n     *    Signature.getChainId(46)\n     *    //_result:\n     */\n    static getChainId(v: BigNumberish): bigint {\n        const bv = getBigInt(v, \"v\");\n\n        // The v is not an EIP-155 v, so it is the unspecified chain ID\n        if ((bv == BN_27) || (bv == BN_28)) { return BN_0; }\n\n        // Bad value for an EIP-155 v\n        assertArgument(bv >= BN_35, \"invalid EIP-155 v\", \"v\", v);\n\n        return (bv - BN_35) / BN_2;\n    }\n\n    /**\n     *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.\n     *\n     *  Legacy transactions which use [[link-eip-155]] hijack the ``v``\n     *  property to include the chain ID.\n     *\n     *  @example:\n     *    Signature.getChainIdV(5, 27)\n     *    //_result:\n     *\n     *    Signature.getChainIdV(5, 28)\n     *    //_result:\n     *\n     */\n    static getChainIdV(chainId: BigNumberish, v: 27 | 28): bigint {\n        return (getBigInt(chainId) * BN_2) + BigInt(35 + v - 27);\n    }\n\n    /**\n     *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,\n     *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.\n     *\n     *  @example:\n     *    // The values 0 and 1 imply v is actually yParity\n     *    Signature.getNormalizedV(0)\n     *    //_result:\n     *\n     *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)\n     *    Signature.getNormalizedV(27)\n     *    //_result:\n     *\n     *    // Legacy EIP-155 transaction (i.e. >= 35)\n     *    Signature.getNormalizedV(46)\n     *    //_result:\n     *\n     *    // Invalid values throw\n     *    Signature.getNormalizedV(5)\n     *    //_error:\n     */\n    static getNormalizedV(v: BigNumberish): 27 | 28 {\n        const bv = getBigInt(v);\n\n        if (bv === BN_0 || bv === BN_27) { return 27; }\n        if (bv === BN_1 || bv === BN_28) { return 28; }\n\n        assertArgument(bv >= BN_35, \"invalid v\", \"v\", v);\n\n        // Otherwise, EIP-155 v means odd is 27 and even is 28\n        return (bv & BN_1) ? 27: 28;\n    }\n\n    /**\n     *  Creates a new [[Signature]].\n     *\n     *  If no %%sig%% is provided, a new [[Signature]] is created\n     *  with default values.\n     *\n     *  If %%sig%% is a string, it is parsed.\n     */\n    static from(sig?: SignatureLike): Signature {\n        function assertError(check: unknown, message: string): asserts check {\n            assertArgument(check, message, \"signature\", sig);\n        };\n\n        if (sig == null) {\n            return new Signature(_guard, ZeroHash, ZeroHash, 27);\n        }\n\n        if (typeof(sig) === \"string\") {\n            const bytes = getBytes(sig, \"signature\");\n            if (bytes.length === 64) {\n                const r = hexlify(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                const v = (s[0] & 0x80) ? 28: 27;\n                s[0] &= 0x7f;\n                return new Signature(_guard, r, hexlify(s), v);\n            }\n\n            if (bytes.length === 65) {\n                const r = hexlify(bytes.slice(0, 32));\n                const s = bytes.slice(32, 64);\n                assertError((s[0] & 0x80) === 0, \"non-canonical s\");\n                const v = Signature.getNormalizedV(bytes[64]);\n                return new Signature(_guard, r, hexlify(s), v);\n            }\n\n            assertError(false, \"invlaid raw signature length\");\n        }\n\n        if (sig instanceof Signature) { return sig.clone(); }\n\n        // Get r\n        const _r = sig.r;\n        assertError(_r != null, \"missing r\");\n        const r = toUint256(_r);\n\n        // Get s; by any means necessary (we check consistency below)\n        const s = (function(s?: string, yParityAndS?: string) {\n            if (s != null) { return toUint256(s); }\n\n            if (yParityAndS != null) {\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n                const bytes = getBytes(yParityAndS);\n                bytes[0] &= 0x7f;\n                return hexlify(bytes);\n            }\n\n            assertError(false, \"missing s\");\n        })(sig.s, sig.yParityAndS);\n        assertError((getBytes(s)[0] & 0x80) == 0, \"non-canonical s\");\n\n        // Get v; by any means necessary (we check consistency below)\n        const { networkV, v } = (function(_v?: BigNumberish, yParityAndS?: string, yParity?: number): { networkV?: bigint, v: 27 | 28 } {\n            if (_v != null) {\n                const v = getBigInt(_v);\n                return {\n                    networkV: ((v >= BN_35) ? v: undefined),\n                    v: Signature.getNormalizedV(v)\n                };\n            }\n\n            if (yParityAndS != null) {\n                assertError(isHexString(yParityAndS, 32), \"invalid yParityAndS\");\n                return { v: ((getBytes(yParityAndS)[0] & 0x80) ? 28: 27) };\n            }\n\n            if (yParity != null) {\n                switch (yParity) {\n                    case 0: return { v: 27 };\n                    case 1: return { v: 28 };\n                }\n                assertError(false, \"invalid yParity\");\n            }\n\n            assertError(false, \"missing v\");\n        })(sig.v, sig.yParityAndS, sig.yParity);\n\n        const result = new Signature(_guard, r, s, v);\n        if (networkV) { result.#networkV =  networkV; }\n\n        // If multiple of v, yParity, yParityAndS we given, check they match\n        assertError(!(\"yParity\" in sig && sig.yParity !== result.yParity), \"yParity mismatch\");\n        assertError(!(\"yParityAndS\" in sig && sig.yParityAndS !== result.yParityAndS), \"yParityAndS mismatch\");\n\n        return result;\n    }\n}\n\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}