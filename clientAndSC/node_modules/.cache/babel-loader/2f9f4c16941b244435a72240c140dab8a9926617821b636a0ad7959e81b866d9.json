{"ast":null,"code":"\"use strict\";\n\n// Use the encode-latin.js script to create the necessary\n// data files to be consumed by this class\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WordlistOwl = void 0;\nconst index_js_1 = require(\"../hash/index.js\");\nconst index_js_2 = require(\"../utils/index.js\");\nconst decode_owl_js_1 = require(\"./decode-owl.js\");\nconst wordlist_js_1 = require(\"./wordlist.js\");\n/**\n *  An OWL format Wordlist is an encoding method that exploits\n *  the general locality of alphabetically sorted words to\n *  achieve a simple but effective means of compression.\n *\n *  This class is generally not useful to most developers as\n *  it is used mainly internally to keep Wordlists for languages\n *  based on ASCII-7 small.\n *\n *  If necessary, there are tools within the ``generation/`` folder\n *  to create these necessary data.\n */\nclass WordlistOwl extends wordlist_js_1.Wordlist {\n  #data;\n  #checksum;\n  /**\n   *  Creates a new Wordlist for %%locale%% using the OWL %%data%%\n   *  and validated against the %%checksum%%.\n   */\n  constructor(locale, data, checksum) {\n    super(locale);\n    this.#data = data;\n    this.#checksum = checksum;\n    this.#words = null;\n  }\n  get _data() {\n    return this.#data;\n  }\n  _decodeWords() {\n    return (0, decode_owl_js_1.decodeOwl)(this.#data);\n  }\n  #words;\n  #loadWords() {\n    if (this.#words == null) {\n      const words = this._decodeWords();\n      // Verify the computed list matches the official list\n      const checksum = (0, index_js_1.id)(words.join(\"\\n\") + \"\\n\");\n      /* c8 ignore start */\n      if (checksum !== this.#checksum) {\n        throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);\n      }\n      /* c8 ignore stop */\n      this.#words = words;\n    }\n    return this.#words;\n  }\n  getWord(index) {\n    const words = this.#loadWords();\n    (0, index_js_2.assertArgument)(index >= 0 && index < words.length, `invalid word index: ${index}`, \"index\", index);\n    return words[index];\n  }\n  getWordIndex(word) {\n    return this.#loadWords().indexOf(word);\n  }\n}\nexports.WordlistOwl = WordlistOwl;","map":{"version":3,"mappings":";;AACA;AACA;;;;;AAEA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;AAYA,MAAaA,WAAY,SAAQC,sBAAQ;EACrC,KAAK;EACL,SAAS;EAET;;;;EAIAC,YAAYC,MAAc,EAAEC,IAAY,EAAEC,QAAgB;IACtD,KAAK,CAACF,MAAM,CAAC;IACb,IAAI,CAAC,KAAK,GAAGC,IAAI;IACjB,IAAI,CAAC,SAAS,GAAGC,QAAQ;IACzB,IAAI,CAAC,MAAM,GAAG,IAAI;EACtB;EAEA,IAAIC,KAAK;IAAa,OAAO,IAAI,CAAC,KAAK;EAAE;EAEzCC,YAAY;IACR,OAAO,6BAAS,EAAC,IAAI,CAAC,KAAK,CAAC;EAChC;EAEA,MAAM;EACN,UAAU;IACN,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,EAAE;MACrB,MAAMC,KAAK,GAAG,IAAI,CAACD,YAAY,EAAE;MAEjC;MACA,MAAMF,QAAQ,GAAG,iBAAE,EAACG,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;MAC5C;MACA,IAAIJ,QAAQ,KAAK,IAAI,CAAC,SAAS,EAAE;QAC7B,MAAM,IAAIK,KAAK,CAAC,sBAAuB,IAAI,CAACP,MAAO,SAAS,CAAC;;MAEjE;MAEA,IAAI,CAAC,MAAM,GAAGK,KAAK;;IAEvB,OAAO,IAAI,CAAC,MAAM;EACtB;EAEAG,OAAO,CAACC,KAAa;IACjB,MAAMJ,KAAK,GAAG,IAAI,CAAC,UAAU,EAAE;IAC/B,6BAAc,EAACI,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAGJ,KAAK,CAACK,MAAM,EAAE,uBAAwBD,KAAM,EAAE,EAAE,OAAO,EAAEA,KAAK,CAAC;IACpG,OAAOJ,KAAK,CAACI,KAAK,CAAC;EACvB;EAEAE,YAAY,CAACC,IAAY;IACrB,OAAO,IAAI,CAAC,UAAU,EAAE,CAACC,OAAO,CAACD,IAAI,CAAC;EAC1C;;AA/CJE","names":["WordlistOwl","wordlist_js_1","constructor","locale","data","checksum","_data","_decodeWords","words","join","Error","getWord","index","length","getWordIndex","word","indexOf","exports"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/wordlists/wordlist-owl.ts"],"sourcesContent":["\n// Use the encode-latin.js script to create the necessary\n// data files to be consumed by this class\n\nimport { id } from \"../hash/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\n\nimport { decodeOwl } from \"./decode-owl.js\";\nimport { Wordlist } from \"./wordlist.js\";\n\n/**\n *  An OWL format Wordlist is an encoding method that exploits\n *  the general locality of alphabetically sorted words to\n *  achieve a simple but effective means of compression.\n *\n *  This class is generally not useful to most developers as\n *  it is used mainly internally to keep Wordlists for languages\n *  based on ASCII-7 small.\n *\n *  If necessary, there are tools within the ``generation/`` folder\n *  to create these necessary data.\n */\nexport class WordlistOwl extends Wordlist {\n    #data: string;\n    #checksum: string;\n\n    /**\n     *  Creates a new Wordlist for %%locale%% using the OWL %%data%%\n     *  and validated against the %%checksum%%.\n     */\n    constructor(locale: string, data: string, checksum: string) {\n        super(locale);\n        this.#data = data;\n        this.#checksum = checksum;\n        this.#words = null;\n    }\n\n    get _data(): string { return this.#data; }\n\n    _decodeWords(): Array<string> {\n        return decodeOwl(this.#data);\n    }\n\n    #words: null | Array<string>;\n    #loadWords(): Array<string> {\n        if (this.#words == null) {\n            const words = this._decodeWords();\n\n            // Verify the computed list matches the official list\n            const checksum = id(words.join(\"\\n\") + \"\\n\");\n            /* c8 ignore start */\n            if (checksum !== this.#checksum) {\n                throw new Error(`BIP39 Wordlist for ${ this.locale } FAILED`);\n            }\n            /* c8 ignore stop */\n\n            this.#words = words;\n        }\n        return this.#words;\n    }\n\n    getWord(index: number): string {\n        const words = this.#loadWords();\n        assertArgument(index >= 0 && index < words.length, `invalid word index: ${ index }`, \"index\", index);\n        return words[index];\n    }\n\n    getWordIndex(word: string): number {\n        return this.#loadWords().indexOf(word);\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}