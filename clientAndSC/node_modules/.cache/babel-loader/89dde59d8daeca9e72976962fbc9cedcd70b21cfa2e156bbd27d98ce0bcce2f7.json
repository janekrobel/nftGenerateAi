{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { dynamicRequire, fill, logger } from '@sentry/utils';\nvar OPERATIONS = ['aggregate', 'bulkWrite', 'countDocuments', 'createIndex', 'createIndexes', 'deleteMany', 'deleteOne', 'distinct', 'drop', 'dropIndex', 'dropIndexes', 'estimatedDocumentCount', 'findOne', 'findOneAndDelete', 'findOneAndReplace', 'findOneAndUpdate', 'indexes', 'indexExists', 'indexInformation', 'initializeOrderedBulkOp', 'insertMany', 'insertOne', 'isCapped', 'mapReduce', 'options', 'parallelCollectionScan', 'rename', 'replaceOne', 'stats', 'updateMany', 'updateOne'];\n// All of the operations above take `options` and `callback` as their final parameters, but some of them\n// take additional parameters as well. For those operations, this is a map of\n// { <operation name>:  [<names of additional parameters>] }, as a way to know what to call the operation's\n// positional arguments when we add them to the span's `data` object later\nvar OPERATION_SIGNATURES = {\n  // aggregate intentionally not included because `pipeline` arguments are too complex to serialize well\n  // see https://github.com/getsentry/sentry-javascript/pull/3102\n  bulkWrite: ['operations'],\n  countDocuments: ['query'],\n  createIndex: ['fieldOrSpec'],\n  createIndexes: ['indexSpecs'],\n  deleteMany: ['filter'],\n  deleteOne: ['filter'],\n  distinct: ['key', 'query'],\n  dropIndex: ['indexName'],\n  findOne: ['query'],\n  findOneAndDelete: ['filter'],\n  findOneAndReplace: ['filter', 'replacement'],\n  findOneAndUpdate: ['filter', 'update'],\n  indexExists: ['indexes'],\n  insertMany: ['docs'],\n  insertOne: ['doc'],\n  mapReduce: ['map', 'reduce'],\n  rename: ['newName'],\n  replaceOne: ['filter', 'doc'],\n  updateMany: ['filter', 'update'],\n  updateOne: ['filter', 'update']\n};\n/** Tracing integration for mongo package */\nvar Mongo = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function Mongo(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n    this.name = Mongo.id;\n    this._operations = Array.isArray(options.operations) ? options.operations : OPERATIONS;\n    this._describeOperations = 'describeOperations' in options ? options.describeOperations : true;\n  }\n  /**\n   * @inheritDoc\n   */\n  Mongo.prototype.setupOnce = function (_, getCurrentHub) {\n    var collection;\n    try {\n      var mongodbModule = dynamicRequire(module, 'mongodb');\n      collection = mongodbModule.Collection;\n    } catch (e) {\n      logger.error('Mongo Integration was unable to require `mongodb` package.');\n      return;\n    }\n    this._instrumentOperations(collection, this._operations, getCurrentHub);\n  };\n  /**\n   * Patches original collection methods\n   */\n  Mongo.prototype._instrumentOperations = function (collection, operations, getCurrentHub) {\n    var _this = this;\n    operations.forEach(function (operation) {\n      return _this._patchOperation(collection, operation, getCurrentHub);\n    });\n  };\n  /**\n   * Patches original collection to utilize our tracing functionality\n   */\n  Mongo.prototype._patchOperation = function (collection, operation, getCurrentHub) {\n    if (!(operation in collection.prototype)) return;\n    var getSpanContext = this._getSpanContextFromOperationArguments.bind(this);\n    fill(collection.prototype, operation, function (orig) {\n      return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n        var _a, _b, _c;\n        var lastArg = args[args.length - 1];\n        var scope = getCurrentHub().getScope();\n        var parentSpan = (_a = scope) === null || _a === void 0 ? void 0 : _a.getSpan();\n        // Check if the operation was passed a callback. (mapReduce requires a different check, as\n        // its (non-callback) arguments can also be functions.)\n        if (typeof lastArg !== 'function' || operation === 'mapReduce' && args.length === 2) {\n          var span_1 = (_b = parentSpan) === null || _b === void 0 ? void 0 : _b.startChild(getSpanContext(this, operation, args));\n          return orig.call.apply(orig, __spread([this], args)).then(function (res) {\n            var _a;\n            (_a = span_1) === null || _a === void 0 ? void 0 : _a.finish();\n            return res;\n          });\n        }\n        var span = (_c = parentSpan) === null || _c === void 0 ? void 0 : _c.startChild(getSpanContext(this, operation, args.slice(0, -1)));\n        return orig.call.apply(orig, __spread([this], args.slice(0, -1), [function (err, result) {\n          var _a;\n          (_a = span) === null || _a === void 0 ? void 0 : _a.finish();\n          lastArg(err, result);\n        }]));\n      };\n    });\n  };\n  /**\n   * Form a SpanContext based on the user input to a given operation.\n   */\n  Mongo.prototype._getSpanContextFromOperationArguments = function (collection, operation, args) {\n    var data = {\n      collectionName: collection.collectionName,\n      dbName: collection.dbName,\n      namespace: collection.namespace\n    };\n    var spanContext = {\n      op: \"db\",\n      description: operation,\n      data: data\n    };\n    // If the operation takes no arguments besides `options` and `callback`, or if argument\n    // collection is disabled for this operation, just return early.\n    var signature = OPERATION_SIGNATURES[operation];\n    var shouldDescribe = Array.isArray(this._describeOperations) ? this._describeOperations.includes(operation) : this._describeOperations;\n    if (!signature || !shouldDescribe) {\n      return spanContext;\n    }\n    try {\n      // Special case for `mapReduce`, as the only one accepting functions as arguments.\n      if (operation === 'mapReduce') {\n        var _a = __read(args, 2),\n          map = _a[0],\n          reduce = _a[1];\n        data[signature[0]] = typeof map === 'string' ? map : map.name || '<anonymous>';\n        data[signature[1]] = typeof reduce === 'string' ? reduce : reduce.name || '<anonymous>';\n      } else {\n        for (var i = 0; i < signature.length; i++) {\n          data[signature[i]] = JSON.stringify(args[i]);\n        }\n      }\n    } catch (_oO) {\n      // no-empty\n    }\n    return spanContext;\n  };\n  /**\n   * @inheritDoc\n   */\n  Mongo.id = 'Mongo';\n  return Mongo;\n}();\nexport { Mongo };","map":{"version":3,"mappings":"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","names":["dynamicRequire","fill","logger","OPERATIONS","OPERATION_SIGNATURES","bulkWrite","countDocuments","createIndex","createIndexes","deleteMany","deleteOne","distinct","dropIndex","findOne","findOneAndDelete","findOneAndReplace","findOneAndUpdate","indexExists","insertMany","insertOne","mapReduce","rename","replaceOne","updateMany","updateOne","options","Mongo","id","_operations","Array","isArray","operations","_describeOperations","describeOperations","_","getCurrentHub","collection","mongodbModule","module","Collection","e","error","_instrumentOperations","forEach","operation","_patchOperation","prototype","getSpanContext","_getSpanContextFromOperationArguments","bind","orig","_i","args","lastArg","length","scope","getScope","parentSpan","getSpan","span_1","startChild","call","then","res","finish","span","slice","err","result","data","collectionName","dbName","namespace","spanContext","op","description","signature","shouldDescribe","includes","map","reduce","name","i","JSON","stringify","_oO"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@sentry/tracing/src/integrations/mongo.ts"],"sourcesContent":["import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration, SpanContext } from '@sentry/types';\nimport { dynamicRequire, fill, logger } from '@sentry/utils';\n\n// This allows us to use the same array for both defaults options and the type itself.\n// (note `as const` at the end to make it a union of string literal types (i.e. \"a\" | \"b\" | ... )\n// and not just a string[])\ntype Operation = typeof OPERATIONS[number];\nconst OPERATIONS = [\n  'aggregate', // aggregate(pipeline, options, callback)\n  'bulkWrite', // bulkWrite(operations, options, callback)\n  'countDocuments', // countDocuments(query, options, callback)\n  'createIndex', // createIndex(fieldOrSpec, options, callback)\n  'createIndexes', // createIndexes(indexSpecs, options, callback)\n  'deleteMany', // deleteMany(filter, options, callback)\n  'deleteOne', // deleteOne(filter, options, callback)\n  'distinct', // distinct(key, query, options, callback)\n  'drop', // drop(options, callback)\n  'dropIndex', // dropIndex(indexName, options, callback)\n  'dropIndexes', // dropIndexes(options, callback)\n  'estimatedDocumentCount', // estimatedDocumentCount(options, callback)\n  'findOne', // findOne(query, options, callback)\n  'findOneAndDelete', // findOneAndDelete(filter, options, callback)\n  'findOneAndReplace', // findOneAndReplace(filter, replacement, options, callback)\n  'findOneAndUpdate', // findOneAndUpdate(filter, update, options, callback)\n  'indexes', // indexes(options, callback)\n  'indexExists', // indexExists(indexes, options, callback)\n  'indexInformation', // indexInformation(options, callback)\n  'initializeOrderedBulkOp', // initializeOrderedBulkOp(options, callback)\n  'insertMany', // insertMany(docs, options, callback)\n  'insertOne', // insertOne(doc, options, callback)\n  'isCapped', // isCapped(options, callback)\n  'mapReduce', // mapReduce(map, reduce, options, callback)\n  'options', // options(options, callback)\n  'parallelCollectionScan', // parallelCollectionScan(options, callback)\n  'rename', // rename(newName, options, callback)\n  'replaceOne', // replaceOne(filter, doc, options, callback)\n  'stats', // stats(options, callback)\n  'updateMany', // updateMany(filter, update, options, callback)\n  'updateOne', // updateOne(filter, update, options, callback)\n] as const;\n\n// All of the operations above take `options` and `callback` as their final parameters, but some of them\n// take additional parameters as well. For those operations, this is a map of\n// { <operation name>:  [<names of additional parameters>] }, as a way to know what to call the operation's\n// positional arguments when we add them to the span's `data` object later\nconst OPERATION_SIGNATURES: {\n  [op in Operation]?: string[];\n} = {\n  // aggregate intentionally not included because `pipeline` arguments are too complex to serialize well\n  // see https://github.com/getsentry/sentry-javascript/pull/3102\n  bulkWrite: ['operations'],\n  countDocuments: ['query'],\n  createIndex: ['fieldOrSpec'],\n  createIndexes: ['indexSpecs'],\n  deleteMany: ['filter'],\n  deleteOne: ['filter'],\n  distinct: ['key', 'query'],\n  dropIndex: ['indexName'],\n  findOne: ['query'],\n  findOneAndDelete: ['filter'],\n  findOneAndReplace: ['filter', 'replacement'],\n  findOneAndUpdate: ['filter', 'update'],\n  indexExists: ['indexes'],\n  insertMany: ['docs'],\n  insertOne: ['doc'],\n  mapReduce: ['map', 'reduce'],\n  rename: ['newName'],\n  replaceOne: ['filter', 'doc'],\n  updateMany: ['filter', 'update'],\n  updateOne: ['filter', 'update'],\n};\n\ninterface MongoCollection {\n  collectionName: string;\n  dbName: string;\n  namespace: string;\n  prototype: {\n    [operation in Operation]: (...args: unknown[]) => unknown;\n  };\n}\n\ninterface MongoOptions {\n  operations?: Operation[];\n  describeOperations?: boolean | Operation[];\n}\n\n/** Tracing integration for mongo package */\nexport class Mongo implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Mongo';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Mongo.id;\n\n  private _operations: Operation[];\n  private _describeOperations?: boolean | Operation[];\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: MongoOptions = {}) {\n    this._operations = Array.isArray(options.operations)\n      ? options.operations\n      : ((OPERATIONS as unknown) as Operation[]);\n    this._describeOperations = 'describeOperations' in options ? options.describeOperations : true;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    let collection: MongoCollection;\n\n    try {\n      const mongodbModule = dynamicRequire(module, 'mongodb') as { Collection: MongoCollection };\n      collection = mongodbModule.Collection;\n    } catch (e) {\n      logger.error('Mongo Integration was unable to require `mongodb` package.');\n      return;\n    }\n\n    this._instrumentOperations(collection, this._operations, getCurrentHub);\n  }\n\n  /**\n   * Patches original collection methods\n   */\n  private _instrumentOperations(collection: MongoCollection, operations: Operation[], getCurrentHub: () => Hub): void {\n    operations.forEach((operation: Operation) => this._patchOperation(collection, operation, getCurrentHub));\n  }\n\n  /**\n   * Patches original collection to utilize our tracing functionality\n   */\n  private _patchOperation(collection: MongoCollection, operation: Operation, getCurrentHub: () => Hub): void {\n    if (!(operation in collection.prototype)) return;\n\n    const getSpanContext = this._getSpanContextFromOperationArguments.bind(this);\n\n    fill(collection.prototype, operation, function(orig: () => void | Promise<unknown>) {\n      return function(this: unknown, ...args: unknown[]) {\n        const lastArg = args[args.length - 1];\n        const scope = getCurrentHub().getScope();\n        const parentSpan = scope?.getSpan();\n\n        // Check if the operation was passed a callback. (mapReduce requires a different check, as\n        // its (non-callback) arguments can also be functions.)\n        if (typeof lastArg !== 'function' || (operation === 'mapReduce' && args.length === 2)) {\n          const span = parentSpan?.startChild(getSpanContext(this, operation, args));\n          return (orig.call(this, ...args) as Promise<unknown>).then((res: unknown) => {\n            span?.finish();\n            return res;\n          });\n        }\n\n        const span = parentSpan?.startChild(getSpanContext(this, operation, args.slice(0, -1)));\n        return orig.call(this, ...args.slice(0, -1), function(err: Error, result: unknown) {\n          span?.finish();\n          lastArg(err, result);\n        });\n      };\n    });\n  }\n\n  /**\n   * Form a SpanContext based on the user input to a given operation.\n   */\n  private _getSpanContextFromOperationArguments(\n    collection: MongoCollection,\n    operation: Operation,\n    args: unknown[],\n  ): SpanContext {\n    const data: { [key: string]: string } = {\n      collectionName: collection.collectionName,\n      dbName: collection.dbName,\n      namespace: collection.namespace,\n    };\n    const spanContext: SpanContext = {\n      op: `db`,\n      description: operation,\n      data,\n    };\n\n    // If the operation takes no arguments besides `options` and `callback`, or if argument\n    // collection is disabled for this operation, just return early.\n    const signature = OPERATION_SIGNATURES[operation];\n    const shouldDescribe = Array.isArray(this._describeOperations)\n      ? this._describeOperations.includes(operation)\n      : this._describeOperations;\n\n    if (!signature || !shouldDescribe) {\n      return spanContext;\n    }\n\n    try {\n      // Special case for `mapReduce`, as the only one accepting functions as arguments.\n      if (operation === 'mapReduce') {\n        const [map, reduce] = args as { name?: string }[];\n        data[signature[0]] = typeof map === 'string' ? map : map.name || '<anonymous>';\n        data[signature[1]] = typeof reduce === 'string' ? reduce : reduce.name || '<anonymous>';\n      } else {\n        for (let i = 0; i < signature.length; i++) {\n          data[signature[i]] = JSON.stringify(args[i]);\n        }\n      }\n    } catch (_oO) {\n      // no-empty\n    }\n\n    return spanContext;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}