{"ast":null,"code":"import { SentryError } from './error';\nimport { SyncPromise } from './syncpromise';\n/** A simple queue that holds promises. */\nvar PromiseBuffer = /** @class */function () {\n  function PromiseBuffer(_limit) {\n    this._limit = _limit;\n    /** Internal set of queued Promises */\n    this._buffer = [];\n  }\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n  PromiseBuffer.prototype.isReady = function () {\n    return this._limit === undefined || this.length() < this._limit;\n  };\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns The original promise.\n   */\n  PromiseBuffer.prototype.add = function (task) {\n    var _this = this;\n    if (!this.isReady()) {\n      return SyncPromise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n    task.then(function () {\n      return _this.remove(task);\n    }).then(null, function () {\n      return _this.remove(task).then(null, function () {\n        // We have to add this catch here otherwise we have an unhandledPromiseRejection\n        // because it's a new Promise chain.\n      });\n    });\n    return task;\n  };\n  /**\n   * Remove a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  PromiseBuffer.prototype.remove = function (task) {\n    var removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n    return removedTask;\n  };\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  PromiseBuffer.prototype.length = function () {\n    return this._buffer.length;\n  };\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n  PromiseBuffer.prototype.drain = function (timeout) {\n    var _this = this;\n    return new SyncPromise(function (resolve) {\n      var capturedSetTimeout = setTimeout(function () {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      SyncPromise.all(_this._buffer).then(function () {\n        clearTimeout(capturedSetTimeout);\n        resolve(true);\n      }).then(null, function () {\n        resolve(true);\n      });\n    });\n  };\n  return PromiseBuffer;\n}();\nexport { PromiseBuffer };","map":{"version":3,"mappings":"AAAA,SAASA,WAAW,QAAQ,SAAS;AACrC,SAASC,WAAW,QAAQ,eAAe;AAE3C;AACA;EAIE,uBAA6BC,MAAe;IAAf,WAAM,GAANA,MAAM;IAHnC;IACiB,YAAO,GAA0B,EAAE;EAEL;EAE/C;;;EAGOC,+BAAO,GAAd;IACE,OAAO,IAAI,CAACD,MAAM,KAAKE,SAAS,IAAI,IAAI,CAACC,MAAM,EAAE,GAAG,IAAI,CAACH,MAAM;EACjE,CAAC;EAED;;;;;;EAMOC,2BAAG,GAAV,UAAWG,IAAoB;IAA/B;IACE,IAAI,CAAC,IAAI,CAACC,OAAO,EAAE,EAAE;MACnB,OAAON,WAAW,CAACO,MAAM,CAAC,IAAIR,WAAW,CAAC,iDAAiD,CAAC,CAAC;;IAE/F,IAAI,IAAI,CAACS,OAAO,CAACC,OAAO,CAACJ,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;MACrC,IAAI,CAACG,OAAO,CAACE,IAAI,CAACL,IAAI,CAAC;;IAEzBA,IAAI,CACDM,IAAI,CAAC;MAAM,YAAI,CAACC,MAAM,CAACP,IAAI,CAAC;IAAjB,CAAiB,CAAC,CAC7BM,IAAI,CAAC,IAAI,EAAE;MACV,YAAI,CAACC,MAAM,CAACP,IAAI,CAAC,CAACM,IAAI,CAAC,IAAI,EAAE;QAC3B;QACA;MAAA,CACD,CAAC;IAHF,CAGE,CACH;IACH,OAAON,IAAI;EACb,CAAC;EAED;;;;;;EAMOH,8BAAM,GAAb,UAAcG,IAAoB;IAChC,IAAMQ,WAAW,GAAG,IAAI,CAACL,OAAO,CAACM,MAAM,CAAC,IAAI,CAACN,OAAO,CAACC,OAAO,CAACJ,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;IACzE,OAAOQ,WAAW;EACpB,CAAC;EAED;;;EAGOX,8BAAM,GAAb;IACE,OAAO,IAAI,CAACM,OAAO,CAACJ,MAAM;EAC5B,CAAC;EAED;;;;;;EAMOF,6BAAK,GAAZ,UAAaa,OAAgB;IAA7B;IACE,OAAO,IAAIf,WAAW,CAAU,iBAAO;MACrC,IAAMgB,kBAAkB,GAAGC,UAAU,CAAC;QACpC,IAAIF,OAAO,IAAIA,OAAO,GAAG,CAAC,EAAE;UAC1BG,OAAO,CAAC,KAAK,CAAC;;MAElB,CAAC,EAAEH,OAAO,CAAC;MACXf,WAAW,CAACmB,GAAG,CAACC,KAAI,CAACZ,OAAO,CAAC,CAC1BG,IAAI,CAAC;QACJU,YAAY,CAACL,kBAAkB,CAAC;QAChCE,OAAO,CAAC,IAAI,CAAC;MACf,CAAC,CAAC,CACDP,IAAI,CAAC,IAAI,EAAE;QACVO,OAAO,CAAC,IAAI,CAAC;MACf,CAAC,CAAC;IACN,CAAC,CAAC;EACJ,CAAC;EACH,oBAAC;AAAD,CAAC,EA9ED","names":["SentryError","SyncPromise","_limit","PromiseBuffer","undefined","length","task","isReady","reject","_buffer","indexOf","push","then","remove","removedTask","splice","timeout","capturedSetTimeout","setTimeout","resolve","all","_this","clearTimeout"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@sentry/utils/src/promisebuffer.ts"],"sourcesContent":["import { SentryError } from './error';\nimport { SyncPromise } from './syncpromise';\n\n/** A simple queue that holds promises. */\nexport class PromiseBuffer<T> {\n  /** Internal set of queued Promises */\n  private readonly _buffer: Array<PromiseLike<T>> = [];\n\n  public constructor(protected _limit?: number) {}\n\n  /**\n   * Says if the buffer is ready to take more requests\n   */\n  public isReady(): boolean {\n    return this._limit === undefined || this.length() < this._limit;\n  }\n\n  /**\n   * Add a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns The original promise.\n   */\n  public add(task: PromiseLike<T>): PromiseLike<T> {\n    if (!this.isReady()) {\n      return SyncPromise.reject(new SentryError('Not adding Promise due to buffer limit reached.'));\n    }\n    if (this._buffer.indexOf(task) === -1) {\n      this._buffer.push(task);\n    }\n    task\n      .then(() => this.remove(task))\n      .then(null, () =>\n        this.remove(task).then(null, () => {\n          // We have to add this catch here otherwise we have an unhandledPromiseRejection\n          // because it's a new Promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Remove a promise to the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  public remove(task: PromiseLike<T>): PromiseLike<T> {\n    const removedTask = this._buffer.splice(this._buffer.indexOf(task), 1)[0];\n    return removedTask;\n  }\n\n  /**\n   * This function returns the number of unresolved promises in the queue.\n   */\n  public length(): number {\n    return this._buffer.length;\n  }\n\n  /**\n   * This will drain the whole queue, returns true if queue is empty or drained.\n   * If timeout is provided and the queue takes longer to drain, the promise still resolves but with false.\n   *\n   * @param timeout Number in ms to wait until it resolves with false.\n   */\n  public drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>(resolve => {\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n      SyncPromise.all(this._buffer)\n        .then(() => {\n          clearTimeout(capturedSetTimeout);\n          resolve(true);\n        })\n        .then(null, () => {\n          resolve(true);\n        });\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}