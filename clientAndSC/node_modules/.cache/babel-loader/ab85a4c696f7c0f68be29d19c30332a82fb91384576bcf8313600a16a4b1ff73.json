{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionResponse = exports.TransactionReceipt = exports.Log = exports.Block = exports.copyRequest = exports.FeeData = void 0;\n//import { resolveAddress } from \"@ethersproject/address\";\nconst index_js_1 = require(\"../utils/index.js\");\nconst index_js_2 = require(\"../transaction/index.js\");\nconst BN_0 = BigInt(0);\n// -----------------------\nfunction getValue(value) {\n  if (value == null) {\n    return null;\n  }\n  return value;\n}\nfunction toJson(value) {\n  if (value == null) {\n    return null;\n  }\n  return value.toString();\n}\n// @TODO? <T extends FeeData = { }> implements Required<T>\n/**\n *  A **FeeData** wraps all the fee-related values associated with\n *  the network.\n */\nclass FeeData {\n  /**\n   *  The gas price for legacy networks.\n   */\n  gasPrice;\n  /**\n   *  The maximum fee to pay per gas.\n   *\n   *  The base fee per gas is defined by the network and based on\n   *  congestion, increasing the cost during times of heavy load\n   *  and lowering when less busy.\n   *\n   *  The actual fee per gas will be the base fee for the block\n   *  and the priority fee, up to the max fee per gas.\n   *\n   *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n   */\n  maxFeePerGas;\n  /**\n   *  The additional amout to pay per gas to encourage a validator\n   *  to include the transaction.\n   *\n   *  The purpose of this is to compensate the validator for the\n   *  adjusted risk for including a given transaction.\n   *\n   *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n   */\n  maxPriorityFeePerGas;\n  /**\n   *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\n   *  %%maxPriorityFeePerGas%%.\n   */\n  constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {\n    (0, index_js_1.defineProperties)(this, {\n      gasPrice: getValue(gasPrice),\n      maxFeePerGas: getValue(maxFeePerGas),\n      maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\n    });\n  }\n  /**\n   *  Returns a JSON-friendly value.\n   */\n  toJSON() {\n    const {\n      gasPrice,\n      maxFeePerGas,\n      maxPriorityFeePerGas\n    } = this;\n    return {\n      _type: \"FeeData\",\n      gasPrice: toJson(gasPrice),\n      maxFeePerGas: toJson(maxFeePerGas),\n      maxPriorityFeePerGas: toJson(maxPriorityFeePerGas)\n    };\n  }\n}\nexports.FeeData = FeeData;\n;\nfunction copyRequest(req) {\n  const result = {};\n  // These could be addresses, ENS names or Addressables\n  if (req.to) {\n    result.to = req.to;\n  }\n  if (req.from) {\n    result.from = req.from;\n  }\n  if (req.data) {\n    result.data = (0, index_js_1.hexlify)(req.data);\n  }\n  const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\n  for (const key of bigIntKeys) {\n    if (!(key in req) || req[key] == null) {\n      continue;\n    }\n    result[key] = (0, index_js_1.getBigInt)(req[key], `request.${key}`);\n  }\n  const numberKeys = \"type,nonce\".split(/,/);\n  for (const key of numberKeys) {\n    if (!(key in req) || req[key] == null) {\n      continue;\n    }\n    result[key] = (0, index_js_1.getNumber)(req[key], `request.${key}`);\n  }\n  if (req.accessList) {\n    result.accessList = (0, index_js_2.accessListify)(req.accessList);\n  }\n  if (\"blockTag\" in req) {\n    result.blockTag = req.blockTag;\n  }\n  if (\"enableCcipRead\" in req) {\n    result.enableCcipReadEnabled = !!req.enableCcipRead;\n  }\n  if (\"customData\" in req) {\n    result.customData = req.customData;\n  }\n  return result;\n}\nexports.copyRequest = copyRequest;\n/**\n *  A **Block** represents the data associated with a full block on\n *  Ethereum.\n */\nclass Block {\n  /**\n   *  The provider connected to the block used to fetch additional details\n   *  if necessary.\n   */\n  provider;\n  /**\n   *  The block number, sometimes called the block height. This is a\n   *  sequential number that is one higher than the parent block.\n   */\n  number;\n  /**\n   *  The block hash.\n   */\n  hash;\n  /**\n   *  The timestamp for this block, which is the number of seconds since\n   *  epoch that this block was included.\n   */\n  timestamp;\n  /**\n   *  The block hash of the parent block.\n   */\n  parentHash;\n  /**\n   *  The nonce.\n   *\n   *  On legacy networks, this is the random number inserted which\n   *  permitted the difficulty target to be reached.\n   */\n  nonce;\n  /**\n   *  The difficulty target.\n   *\n   *  On legacy networks, this is the proof-of-work target required\n   *  for a block to meet the protocol rules to be included.\n   *\n   *  On modern networks, this is a random number arrived at using\n   *  randao.  @TODO: Find links?\n   */\n  difficulty;\n  /**\n   *  The total gas limit for this block.\n   */\n  gasLimit;\n  /**\n   *  The total gas used in this block.\n   */\n  gasUsed;\n  /**\n   *  The miner coinbase address, wihch receives any subsidies for\n   *  including this block.\n   */\n  miner;\n  /**\n   *  Any extra data the validator wished to include.\n   */\n  extraData;\n  /**\n   *  The base fee per gas that all transactions in this block were\n   *  charged.\n   *\n   *  This adjusts after each block, depending on how congested the network\n   *  is.\n   */\n  baseFeePerGas;\n  #transactions;\n  /**\n   *  Create a new **Block** object.\n   *\n   *  This should generally not be necessary as the unless implementing a\n   *  low-level library.\n   */\n  constructor(block, provider) {\n    this.#transactions = block.transactions.map(tx => {\n      if (typeof tx !== \"string\") {\n        return new TransactionResponse(tx, provider);\n      }\n      return tx;\n    });\n    (0, index_js_1.defineProperties)(this, {\n      provider,\n      hash: getValue(block.hash),\n      number: block.number,\n      timestamp: block.timestamp,\n      parentHash: block.parentHash,\n      nonce: block.nonce,\n      difficulty: block.difficulty,\n      gasLimit: block.gasLimit,\n      gasUsed: block.gasUsed,\n      miner: block.miner,\n      extraData: block.extraData,\n      baseFeePerGas: getValue(block.baseFeePerGas)\n    });\n  }\n  /**\n   *  Returns the list of transaction hashes.\n   */\n  get transactions() {\n    return this.#transactions.map(tx => {\n      if (typeof tx === \"string\") {\n        return tx;\n      }\n      return tx.hash;\n    });\n  }\n  /**\n   *  Returns the complete transactions for blocks which\n   *  prefetched them, by passing ``true`` to %%prefetchTxs%%\n   *  into [[provider_getBlock]].\n   */\n  get prefetchedTransactions() {\n    const txs = this.#transactions.slice();\n    // Doesn't matter...\n    if (txs.length === 0) {\n      return [];\n    }\n    // Make sure we prefetched the transactions\n    (0, index_js_1.assert)(typeof txs[0] === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"transactionResponses()\"\n    });\n    return txs;\n  }\n  /**\n   *  Returns a JSON-friendly value.\n   */\n  toJSON() {\n    const {\n      baseFeePerGas,\n      difficulty,\n      extraData,\n      gasLimit,\n      gasUsed,\n      hash,\n      miner,\n      nonce,\n      number,\n      parentHash,\n      timestamp,\n      transactions\n    } = this;\n    return {\n      _type: \"Block\",\n      baseFeePerGas: toJson(baseFeePerGas),\n      difficulty: toJson(difficulty),\n      extraData,\n      gasLimit: toJson(gasLimit),\n      gasUsed: toJson(gasUsed),\n      hash,\n      miner,\n      nonce,\n      number,\n      parentHash,\n      timestamp,\n      transactions\n    };\n  }\n  [Symbol.iterator]() {\n    let index = 0;\n    const txs = this.transactions;\n    return {\n      next: () => {\n        if (index < this.length) {\n          return {\n            value: txs[index++],\n            done: false\n          };\n        }\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  /**\n   *  The number of transactions in this block.\n   */\n  get length() {\n    return this.#transactions.length;\n  }\n  /**\n   *  The [[link-js-date]] this block was included at.\n   */\n  get date() {\n    if (this.timestamp == null) {\n      return null;\n    }\n    return new Date(this.timestamp * 1000);\n  }\n  /**\n   *  Get the transaction at %%indexe%% within this block.\n   */\n  async getTransaction(indexOrHash) {\n    // Find the internal value by its index or hash\n    let tx = undefined;\n    if (typeof indexOrHash === \"number\") {\n      tx = this.#transactions[indexOrHash];\n    } else {\n      const hash = indexOrHash.toLowerCase();\n      for (const v of this.#transactions) {\n        if (typeof v === \"string\") {\n          if (v !== hash) {\n            continue;\n          }\n          tx = v;\n          break;\n        } else {\n          if (v.hash === hash) {\n            continue;\n          }\n          tx = v;\n          break;\n        }\n      }\n    }\n    if (tx == null) {\n      throw new Error(\"no such tx\");\n    }\n    if (typeof tx === \"string\") {\n      return await this.provider.getTransaction(tx);\n    } else {\n      return tx;\n    }\n  }\n  getPrefetchedTransaction(indexOrHash) {\n    const txs = this.prefetchedTransactions;\n    if (typeof indexOrHash === \"number\") {\n      return txs[indexOrHash];\n    }\n    indexOrHash = indexOrHash.toLowerCase();\n    for (const tx of txs) {\n      if (tx.hash === indexOrHash) {\n        return tx;\n      }\n    }\n    (0, index_js_1.assertArgument)(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n  }\n  /**\n   *  Has this block been mined.\n   *\n   *  If true, the block has been typed-gaurded that all mined\n   *  properties are non-null.\n   */\n  isMined() {\n    return !!this.hash;\n  }\n  /**\n   *\n   */\n  isLondon() {\n    return !!this.baseFeePerGas;\n  }\n  orphanedEvent() {\n    if (!this.isMined()) {\n      throw new Error(\"\");\n    }\n    return createOrphanedBlockFilter(this);\n  }\n}\nexports.Block = Block;\n//////////////////////\n// Log\nclass Log {\n  provider;\n  transactionHash;\n  blockHash;\n  blockNumber;\n  removed;\n  address;\n  data;\n  topics;\n  index;\n  transactionIndex;\n  constructor(log, provider) {\n    this.provider = provider;\n    const topics = Object.freeze(log.topics.slice());\n    (0, index_js_1.defineProperties)(this, {\n      transactionHash: log.transactionHash,\n      blockHash: log.blockHash,\n      blockNumber: log.blockNumber,\n      removed: log.removed,\n      address: log.address,\n      data: log.data,\n      topics,\n      index: log.index,\n      transactionIndex: log.transactionIndex\n    });\n  }\n  toJSON() {\n    const {\n      address,\n      blockHash,\n      blockNumber,\n      data,\n      index,\n      removed,\n      topics,\n      transactionHash,\n      transactionIndex\n    } = this;\n    return {\n      _type: \"log\",\n      address,\n      blockHash,\n      blockNumber,\n      data,\n      index,\n      removed,\n      topics,\n      transactionHash,\n      transactionIndex\n    };\n  }\n  async getBlock() {\n    const block = await this.provider.getBlock(this.blockHash);\n    (0, index_js_1.assert)(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n    return block;\n  }\n  async getTransaction() {\n    const tx = await this.provider.getTransaction(this.transactionHash);\n    (0, index_js_1.assert)(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", {});\n    return tx;\n  }\n  async getTransactionReceipt() {\n    const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\n    (0, index_js_1.assert)(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", {});\n    return receipt;\n  }\n  removedEvent() {\n    return createRemovedLogFilter(this);\n  }\n}\nexports.Log = Log;\n//////////////////////\n// Transaction Receipt\n/*\nexport interface LegacyTransactionReceipt {\n    byzantium: false;\n    status: null;\n    root: string;\n}\n\nexport interface ByzantiumTransactionReceipt {\n    byzantium: true;\n    status: number;\n    root: null;\n}\n*/\nclass TransactionReceipt {\n  provider;\n  to;\n  from;\n  contractAddress;\n  hash;\n  index;\n  blockHash;\n  blockNumber;\n  logsBloom;\n  gasUsed;\n  cumulativeGasUsed;\n  gasPrice;\n  type;\n  //readonly byzantium!: boolean;\n  status;\n  root;\n  #logs;\n  constructor(tx, provider) {\n    this.#logs = Object.freeze(tx.logs.map(log => {\n      return new Log(log, provider);\n    }));\n    (0, index_js_1.defineProperties)(this, {\n      provider,\n      to: tx.to,\n      from: tx.from,\n      contractAddress: tx.contractAddress,\n      hash: tx.hash,\n      index: tx.index,\n      blockHash: tx.blockHash,\n      blockNumber: tx.blockNumber,\n      logsBloom: tx.logsBloom,\n      gasUsed: tx.gasUsed,\n      cumulativeGasUsed: tx.cumulativeGasUsed,\n      gasPrice: tx.effectiveGasPrice || tx.gasPrice,\n      type: tx.type,\n      //byzantium: tx.byzantium,\n      status: tx.status,\n      root: tx.root\n    });\n  }\n  get logs() {\n    return this.#logs;\n  }\n  toJSON() {\n    const {\n      to,\n      from,\n      contractAddress,\n      hash,\n      index,\n      blockHash,\n      blockNumber,\n      logsBloom,\n      logs,\n      //byzantium, \n      status,\n      root\n    } = this;\n    return {\n      _type: \"TransactionReceipt\",\n      blockHash,\n      blockNumber,\n      //byzantium, \n      contractAddress,\n      cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n      from,\n      gasPrice: toJson(this.gasPrice),\n      gasUsed: toJson(this.gasUsed),\n      hash,\n      index,\n      logs,\n      logsBloom,\n      root,\n      status,\n      to\n    };\n  }\n  get length() {\n    return this.logs.length;\n  }\n  [Symbol.iterator]() {\n    let index = 0;\n    return {\n      next: () => {\n        if (index < this.length) {\n          return {\n            value: this.logs[index++],\n            done: false\n          };\n        }\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  get fee() {\n    return this.gasUsed * this.gasPrice;\n  }\n  async getBlock() {\n    const block = await this.provider.getBlock(this.blockHash);\n    if (block == null) {\n      throw new Error(\"TODO\");\n    }\n    return block;\n  }\n  async getTransaction() {\n    const tx = await this.provider.getTransaction(this.hash);\n    if (tx == null) {\n      throw new Error(\"TODO\");\n    }\n    return tx;\n  }\n  async getResult() {\n    return await this.provider.getTransactionResult(this.hash);\n  }\n  async confirmations() {\n    return (await this.provider.getBlockNumber()) - this.blockNumber + 1;\n  }\n  removedEvent() {\n    return createRemovedTransactionFilter(this);\n  }\n  reorderedEvent(other) {\n    (0, index_js_1.assert)(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"reorderedEvent(other)\"\n    });\n    return createReorderedTransactionFilter(this, other);\n  }\n}\nexports.TransactionReceipt = TransactionReceipt;\n/*\nexport type ReplacementDetectionSetup = {\n    to: string;\n    from: string;\n    value: bigint;\n    data: string;\n    nonce: number;\n    block: number;\n};\n*/\nclass TransactionResponse {\n  provider;\n  blockNumber;\n  blockHash;\n  index;\n  hash;\n  type;\n  to;\n  from;\n  nonce;\n  gasLimit;\n  gasPrice;\n  maxPriorityFeePerGas;\n  maxFeePerGas;\n  data;\n  value;\n  chainId;\n  signature;\n  accessList;\n  #startBlock;\n  constructor(tx, provider) {\n    this.provider = provider;\n    this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;\n    this.blockHash = tx.blockHash != null ? tx.blockHash : null;\n    this.hash = tx.hash;\n    this.index = tx.index;\n    this.type = tx.type;\n    this.from = tx.from;\n    this.to = tx.to || null;\n    this.gasLimit = tx.gasLimit;\n    this.nonce = tx.nonce;\n    this.data = tx.data;\n    this.value = tx.value;\n    this.gasPrice = tx.gasPrice;\n    this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;\n    this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;\n    this.chainId = tx.chainId;\n    this.signature = tx.signature;\n    this.accessList = tx.accessList != null ? tx.accessList : null;\n    this.#startBlock = -1;\n  }\n  toJSON() {\n    const {\n      blockNumber,\n      blockHash,\n      index,\n      hash,\n      type,\n      to,\n      from,\n      nonce,\n      data,\n      signature,\n      accessList\n    } = this;\n    return {\n      _type: \"TransactionReceipt\",\n      accessList,\n      blockNumber,\n      blockHash,\n      chainId: toJson(this.chainId),\n      data,\n      from,\n      gasLimit: toJson(this.gasLimit),\n      gasPrice: toJson(this.gasPrice),\n      hash,\n      maxFeePerGas: toJson(this.maxFeePerGas),\n      maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n      nonce,\n      signature,\n      to,\n      index,\n      type,\n      value: toJson(this.value)\n    };\n  }\n  async getBlock() {\n    let blockNumber = this.blockNumber;\n    if (blockNumber == null) {\n      const tx = await this.getTransaction();\n      if (tx) {\n        blockNumber = tx.blockNumber;\n      }\n    }\n    if (blockNumber == null) {\n      return null;\n    }\n    const block = this.provider.getBlock(blockNumber);\n    if (block == null) {\n      throw new Error(\"TODO\");\n    }\n    return block;\n  }\n  async getTransaction() {\n    return this.provider.getTransaction(this.hash);\n  }\n  async wait(_confirms, _timeout) {\n    const confirms = _confirms == null ? 1 : _confirms;\n    const timeout = _timeout == null ? 0 : _timeout;\n    let startBlock = this.#startBlock;\n    let nextScan = -1;\n    let stopScanning = startBlock === -1 ? true : false;\n    const checkReplacement = async () => {\n      // Get the current transaction count for this sender\n      if (stopScanning) {\n        return null;\n      }\n      const {\n        blockNumber,\n        nonce\n      } = await (0, index_js_1.resolveProperties)({\n        blockNumber: this.provider.getBlockNumber(),\n        nonce: this.provider.getTransactionCount(this.from)\n      });\n      // No transaction or our nonce has not been mined yet; but we\n      // can start scanning later when we do start\n      if (nonce < this.nonce) {\n        startBlock = blockNumber;\n        return;\n      }\n      // We were mined; no replacement\n      if (stopScanning) {\n        return null;\n      }\n      const mined = await this.getTransaction();\n      if (mined && mined.blockNumber != null) {\n        return;\n      }\n      // We were replaced; start scanning for that transaction\n      // Starting to scan; look back a few extra blocks for safety\n      if (nextScan === -1) {\n        nextScan = startBlock - 3;\n        if (nextScan < this.#startBlock) {\n          nextScan = this.#startBlock;\n        }\n      }\n      while (nextScan <= blockNumber) {\n        // Get the next block to scan\n        if (stopScanning) {\n          return null;\n        }\n        const block = await this.provider.getBlock(nextScan, true);\n        // This should not happen; but we'll try again shortly\n        if (block == null) {\n          return;\n        }\n        // We were mined; no replacement\n        for (const hash of block) {\n          if (hash === this.hash) {\n            return;\n          }\n        }\n        // Search for the transaction that replaced us\n        for (let i = 0; i < block.length; i++) {\n          const tx = await block.getTransaction(i);\n          if (tx.from === this.from && tx.nonce === this.nonce) {\n            // Get the receipt\n            if (stopScanning) {\n              return null;\n            }\n            const receipt = await this.provider.getTransactionReceipt(tx.hash);\n            // This should not happen; but we'll try again shortly\n            if (receipt == null) {\n              return;\n            }\n            // We will retry this on the next block (this case could be optimized)\n            if (blockNumber - receipt.blockNumber + 1 < confirms) {\n              return;\n            }\n            // The reason we were replaced\n            let reason = \"replaced\";\n            if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\n              reason = \"repriced\";\n            } else if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\n              reason = \"cancelled\";\n            }\n            (0, index_js_1.assert)(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n              cancelled: reason === \"replaced\" || reason === \"cancelled\",\n              reason,\n              replacement: tx.replaceableTransaction(startBlock),\n              hash: tx.hash,\n              receipt\n            });\n          }\n        }\n        nextScan++;\n      }\n      return;\n    };\n    const receipt = await this.provider.getTransactionReceipt(this.hash);\n    if (receipt) {\n      if ((await receipt.confirmations()) >= confirms) {\n        return receipt;\n      }\n    } else {\n      // Check for a replacement; throws if a replacement was found\n      await checkReplacement();\n      // Allow null only when the confirms is 0\n      if (confirms === 0) {\n        return null;\n      }\n    }\n    const waiter = new Promise((resolve, reject) => {\n      // List of things to cancel when we have a result (one way or the other)\n      const cancellers = [];\n      const cancel = () => {\n        cancellers.forEach(c => c());\n      };\n      // On cancel, stop scanning for replacements\n      cancellers.push(() => {\n        stopScanning = true;\n      });\n      // Set up any timeout requested\n      if (timeout > 0) {\n        const timer = setTimeout(() => {\n          cancel();\n          reject((0, index_js_1.makeError)(\"wait for transaction timeout\", \"TIMEOUT\"));\n        }, timeout);\n        cancellers.push(() => {\n          clearTimeout(timer);\n        });\n      }\n      const txListener = async receipt => {\n        // Done; return it!\n        if ((await receipt.confirmations()) >= confirms) {\n          cancel();\n          resolve(receipt);\n        }\n      };\n      cancellers.push(() => {\n        this.provider.off(this.hash, txListener);\n      });\n      this.provider.on(this.hash, txListener);\n      // We support replacement detection; start checking\n      if (startBlock >= 0) {\n        const replaceListener = async () => {\n          try {\n            // Check for a replacement; this throws only if one is found\n            await checkReplacement();\n          } catch (error) {\n            // We were replaced (with enough confirms); re-throw the error\n            if ((0, index_js_1.isError)(error, \"TRANSACTION_REPLACED\")) {\n              cancel();\n              reject(error);\n              return;\n            }\n          }\n          // Rescheudle a check on the next block\n          if (!stopScanning) {\n            this.provider.once(\"block\", replaceListener);\n          }\n        };\n        cancellers.push(() => {\n          this.provider.off(\"block\", replaceListener);\n        });\n        this.provider.once(\"block\", replaceListener);\n      }\n    });\n    return await waiter;\n  }\n  isMined() {\n    return this.blockHash != null;\n  }\n  isLegacy() {\n    return this.type === 0;\n  }\n  isBerlin() {\n    return this.type === 1;\n  }\n  isLondon() {\n    return this.type === 2;\n  }\n  removedEvent() {\n    (0, index_js_1.assert)(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"removeEvent()\"\n    });\n    return createRemovedTransactionFilter(this);\n  }\n  reorderedEvent(other) {\n    (0, index_js_1.assert)(this.isMined(), \"unmined transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"removeEvent()\"\n    });\n    (0, index_js_1.assert)(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"removeEvent()\"\n    });\n    return createReorderedTransactionFilter(this, other);\n  }\n  /**\n   *  Returns a new TransactionResponse instance which has the ability to\n   *  detect (and throw an error) if the transaction is replaced, which\n   *  will begin scanning at %%startBlock%%.\n   *\n   *  This should generally not be used by developers and is intended\n   *  primarily for internal use. Setting an incorrect %%startBlock%% can\n   *  have devastating performance consequences if used incorrectly.\n   */\n  replaceableTransaction(startBlock) {\n    (0, index_js_1.assertArgument)(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n    const tx = new TransactionResponse(this, this.provider);\n    tx.#startBlock = startBlock;\n    return tx;\n  }\n}\nexports.TransactionResponse = TransactionResponse;\nfunction createOrphanedBlockFilter(block) {\n  return {\n    orphan: \"drop-block\",\n    hash: block.hash,\n    number: block.number\n  };\n}\nfunction createReorderedTransactionFilter(tx, other) {\n  return {\n    orphan: \"reorder-transaction\",\n    tx,\n    other\n  };\n}\nfunction createRemovedTransactionFilter(tx) {\n  return {\n    orphan: \"drop-transaction\",\n    tx\n  };\n}\nfunction createRemovedLogFilter(log) {\n  return {\n    orphan: \"drop-log\",\n    log: {\n      transactionHash: log.transactionHash,\n      blockHash: log.blockHash,\n      blockNumber: log.blockNumber,\n      address: log.address,\n      data: log.data,\n      topics: Object.freeze(log.topics.slice()),\n      index: log.index\n    }\n  };\n}","map":{"version":3,"mappings":"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","names":["BN_0","BigInt","getValue","value","toJson","toString","FeeData","gasPrice","maxFeePerGas","maxPriorityFeePerGas","constructor","toJSON","_type","exports","copyRequest","req","result","to","from","data","bigIntKeys","split","key","numberKeys","accessList","blockTag","enableCcipReadEnabled","enableCcipRead","customData","Block","provider","number","hash","timestamp","parentHash","nonce","difficulty","gasLimit","gasUsed","miner","extraData","baseFeePerGas","block","transactions","map","tx","TransactionResponse","prefetchedTransactions","txs","slice","length","operation","Symbol","iterator","index","next","done","undefined","date","Date","getTransaction","indexOrHash","toLowerCase","v","Error","getPrefetchedTransaction","isMined","isLondon","orphanedEvent","createOrphanedBlockFilter","Log","transactionHash","blockHash","blockNumber","removed","address","topics","transactionIndex","log","Object","freeze","getBlock","getTransactionReceipt","receipt","removedEvent","createRemovedLogFilter","TransactionReceipt","contractAddress","logsBloom","cumulativeGasUsed","type","status","root","logs","effectiveGasPrice","fee","getResult","getTransactionResult","confirmations","getBlockNumber","createRemovedTransactionFilter","reorderedEvent","other","createReorderedTransactionFilter","chainId","signature","wait","_confirms","_timeout","confirms","timeout","startBlock","nextScan","stopScanning","checkReplacement","getTransactionCount","mined","i","reason","cancelled","replacement","replaceableTransaction","waiter","Promise","resolve","reject","cancellers","cancel","forEach","c","push","timer","setTimeout","clearTimeout","txListener","off","on","replaceListener","error","once","isLegacy","isBerlin","Number","isInteger","orphan"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/providers/provider.ts"],"sourcesContent":["//import { resolveAddress } from \"@ethersproject/address\";\nimport {\n    defineProperties, getBigInt, getNumber, hexlify, resolveProperties,\n    assert, assertArgument, isError, makeError\n} from \"../utils/index.js\";\nimport { accessListify } from \"../transaction/index.js\";\n\nimport type { AddressLike, NameResolver } from \"../address/index.js\";\nimport type { BigNumberish, EventEmitterable } from \"../utils/index.js\";\nimport type { Signature } from \"../crypto/index.js\";\nimport type { AccessList, AccessListish, TransactionLike } from \"../transaction/index.js\";\n\nimport type { ContractRunner } from \"./contracts.js\";\nimport type { Network } from \"./network.js\";\n\n\nconst BN_0 = BigInt(0);\n\nexport type BlockTag = number | string;\n\nimport {\n    BlockParams, LogParams, TransactionReceiptParams,\n    TransactionResponseParams\n} from \"./formatting.js\";\n\n// -----------------------\n\nfunction getValue<T>(value: undefined | null | T): null | T {\n    if (value == null) { return null; }\n    return value;\n}\n\nfunction toJson(value: null | bigint): null | string {\n    if (value == null) { return null; }\n    return value.toString();\n}\n\n// @TODO? <T extends FeeData = { }> implements Required<T>\n\n/**\n *  A **FeeData** wraps all the fee-related values associated with\n *  the network.\n */\nexport class FeeData {\n    /**\n     *  The gas price for legacy networks.\n     */\n    readonly gasPrice!: null | bigint;\n\n    /**\n     *  The maximum fee to pay per gas.\n     *\n     *  The base fee per gas is defined by the network and based on\n     *  congestion, increasing the cost during times of heavy load\n     *  and lowering when less busy.\n     *\n     *  The actual fee per gas will be the base fee for the block\n     *  and the priority fee, up to the max fee per gas.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    readonly maxFeePerGas!: null | bigint;\n\n    /**\n     *  The additional amout to pay per gas to encourage a validator\n     *  to include the transaction.\n     *\n     *  The purpose of this is to compensate the validator for the\n     *  adjusted risk for including a given transaction.\n     *\n     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))\n     */\n    readonly maxPriorityFeePerGas!: null | bigint;\n\n    /**\n     *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and\n     *  %%maxPriorityFeePerGas%%.\n     */\n    constructor(gasPrice?: null | bigint, maxFeePerGas?: null | bigint, maxPriorityFeePerGas?: null | bigint) {\n        defineProperties<FeeData>(this, {\n            gasPrice: getValue(gasPrice),\n            maxFeePerGas: getValue(maxFeePerGas),\n            maxPriorityFeePerGas: getValue(maxPriorityFeePerGas)\n        });\n    }\n\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON(): any {\n        const {\n            gasPrice, maxFeePerGas, maxPriorityFeePerGas\n        } = this;\n        return {\n            _type: \"FeeData\",\n            gasPrice: toJson(gasPrice),\n            maxFeePerGas: toJson(maxFeePerGas),\n            maxPriorityFeePerGas: toJson(maxPriorityFeePerGas),\n        };\n    }\n}\n\n\nexport interface TransactionRequest {\n    type?: null | number;\n\n    to?: null | AddressLike;\n    from?: null | AddressLike;\n\n    nonce?: null | number;\n\n    gasLimit?: null | BigNumberish;\n    gasPrice?: null | BigNumberish;\n\n    maxPriorityFeePerGas?: null | BigNumberish;\n    maxFeePerGas?: null | BigNumberish;\n\n    data?: null | string;\n    value?: null | BigNumberish;\n    chainId?: null | BigNumberish;\n\n    accessList?: null | AccessListish;\n\n    customData?: any;\n\n    // Only meaningful when used for call\n    blockTag?: BlockTag;\n    enableCcipRead?: boolean;\n\n    // Todo?\n    //gasMultiplier?: number;\n};\n\nexport interface PreparedTransactionRequest {\n    type?: number;\n\n    to?: AddressLike;\n    from?: AddressLike;\n\n    nonce?: number;\n\n    gasLimit?: bigint;\n    gasPrice?: bigint;\n\n    maxPriorityFeePerGas?: bigint;\n    maxFeePerGas?: bigint;\n\n    data?: string;\n    value?: bigint;\n    chainId?: bigint;\n\n    accessList?: AccessList;\n\n    customData?: any;\n\n    blockTag?: BlockTag;\n    enableCcipRead?: boolean;\n}\n\nexport function copyRequest(req: TransactionRequest): PreparedTransactionRequest {\n    const result: any = { };\n\n    // These could be addresses, ENS names or Addressables\n    if (req.to) { result.to = req.to; }\n    if (req.from) { result.from = req.from; }\n\n    if (req.data) { result.data = hexlify(req.data); }\n\n    const bigIntKeys = \"chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value\".split(/,/);\n    for (const key of bigIntKeys) {\n        if (!(key in req) || (<any>req)[key] == null) { continue; }\n        result[key] = getBigInt((<any>req)[key], `request.${ key }`);\n    }\n\n    const numberKeys = \"type,nonce\".split(/,/);\n    for (const key of numberKeys) {\n        if (!(key in req) || (<any>req)[key] == null) { continue; }\n        result[key] = getNumber((<any>req)[key], `request.${ key }`);\n    }\n\n    if (req.accessList) {\n        result.accessList = accessListify(req.accessList);\n    }\n\n    if (\"blockTag\" in req) { result.blockTag = req.blockTag; }\n\n    if (\"enableCcipRead\" in req) {\n        result.enableCcipReadEnabled = !!req.enableCcipRead\n    }\n\n    if (\"customData\" in req) {\n        result.customData = req.customData;\n    }\n\n    return result;\n}\n\n//////////////////////\n// Block\n\nexport interface MinedBlock extends Block {\n    readonly number: number;\n    readonly hash: string;\n    readonly timestamp: number;\n    readonly date: Date;\n    readonly miner: string;\n}\n\n/**\n *  A **Block** represents the data associated with a full block on\n *  Ethereum.\n */\nexport class Block implements BlockParams, Iterable<string> {\n    /**\n     *  The provider connected to the block used to fetch additional details\n     *  if necessary.\n     */\n    readonly provider!: Provider;\n\n    /**\n     *  The block number, sometimes called the block height. This is a\n     *  sequential number that is one higher than the parent block.\n     */\n    readonly number!: number;\n\n    /**\n     *  The block hash.\n     */\n    readonly hash!: null | string;\n\n    /**\n     *  The timestamp for this block, which is the number of seconds since\n     *  epoch that this block was included.\n     */\n    readonly timestamp!: number;\n\n    /**\n     *  The block hash of the parent block.\n     */\n    readonly parentHash!: string;\n\n    /**\n     *  The nonce.\n     *\n     *  On legacy networks, this is the random number inserted which\n     *  permitted the difficulty target to be reached.\n     */\n    readonly nonce!: string;\n\n    /**\n     *  The difficulty target.\n     *\n     *  On legacy networks, this is the proof-of-work target required\n     *  for a block to meet the protocol rules to be included.\n     *\n     *  On modern networks, this is a random number arrived at using\n     *  randao.  @TODO: Find links?\n     */\n    readonly difficulty!: bigint;\n\n\n    /**\n     *  The total gas limit for this block.\n     */\n    readonly gasLimit!: bigint;\n\n    /**\n     *  The total gas used in this block.\n     */\n    readonly gasUsed!: bigint;\n\n    /**\n     *  The miner coinbase address, wihch receives any subsidies for\n     *  including this block.\n     */\n    readonly miner!: string;\n\n    /**\n     *  Any extra data the validator wished to include.\n     */\n    readonly extraData!: string;\n\n    /**\n     *  The base fee per gas that all transactions in this block were\n     *  charged.\n     *\n     *  This adjusts after each block, depending on how congested the network\n     *  is.\n     */\n    readonly baseFeePerGas!: null | bigint;\n\n    readonly #transactions: Array<string | TransactionResponse>;\n\n    /**\n     *  Create a new **Block** object.\n     *\n     *  This should generally not be necessary as the unless implementing a\n     *  low-level library.\n     */\n    constructor(block: BlockParams, provider: Provider) {\n\n        this.#transactions = block.transactions.map((tx) => {\n            if (typeof(tx) !== \"string\") {\n                return new TransactionResponse(tx, provider);\n            }\n            return tx;\n        });\n\n        defineProperties<Block>(this, {\n            provider,\n\n            hash: getValue(block.hash),\n\n            number: block.number,\n            timestamp: block.timestamp,\n\n            parentHash: block.parentHash,\n\n            nonce: block.nonce,\n            difficulty: block.difficulty,\n\n            gasLimit: block.gasLimit,\n            gasUsed: block.gasUsed,\n            miner: block.miner,\n            extraData: block.extraData,\n\n            baseFeePerGas: getValue(block.baseFeePerGas)\n        });\n    }\n\n    /**\n     *  Returns the list of transaction hashes.\n     */\n    get transactions(): ReadonlyArray<string> {\n        return this.#transactions.map((tx) => {\n            if (typeof(tx) === \"string\") { return tx; }\n            return tx.hash;\n        });\n    }\n\n    /**\n     *  Returns the complete transactions for blocks which\n     *  prefetched them, by passing ``true`` to %%prefetchTxs%%\n     *  into [[provider_getBlock]].\n     */\n    get prefetchedTransactions(): Array<TransactionResponse> {\n        const txs = this.#transactions.slice();\n\n        // Doesn't matter...\n        if (txs.length === 0) { return [ ]; }\n\n        // Make sure we prefetched the transactions\n        assert(typeof(txs[0]) === \"object\", \"transactions were not prefetched with block request\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"transactionResponses()\"\n        });\n\n        return <Array<TransactionResponse>>txs;\n    }\n\n    /**\n     *  Returns a JSON-friendly value.\n     */\n    toJSON(): any {\n        const {\n            baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash,\n            miner, nonce, number, parentHash, timestamp, transactions\n        } = this;\n\n        return {\n            _type: \"Block\",\n            baseFeePerGas: toJson(baseFeePerGas),\n            difficulty: toJson(difficulty),\n            extraData,\n            gasLimit: toJson(gasLimit),\n            gasUsed: toJson(gasUsed),\n            hash, miner, nonce, number, parentHash, timestamp,\n            transactions,\n        };\n    }\n\n    [Symbol.iterator](): Iterator<string> {\n        let index = 0;\n        const txs = this.transactions;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return {\n                        value: txs[index++], done: false\n                    }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    /**\n     *  The number of transactions in this block.\n     */\n    get length(): number { return this.#transactions.length; }\n\n    /**\n     *  The [[link-js-date]] this block was included at.\n     */\n    get date(): null | Date {\n        if (this.timestamp == null) { return null; }\n        return new Date(this.timestamp * 1000);\n    }\n\n    /**\n     *  Get the transaction at %%indexe%% within this block.\n     */\n    async getTransaction(indexOrHash: number | string): Promise<TransactionResponse> {\n        // Find the internal value by its index or hash\n        let tx: string | TransactionResponse | undefined = undefined;\n        if (typeof(indexOrHash) === \"number\") {\n            tx = this.#transactions[indexOrHash];\n\n        } else {\n            const hash = indexOrHash.toLowerCase();\n            for (const v of this.#transactions) {\n                if (typeof(v) === \"string\") {\n                    if (v !== hash) { continue; }\n                    tx = v;\n                    break;\n                } else {\n                    if (v.hash === hash) { continue; }\n                    tx = v;\n                    break;\n                }\n            }\n        }\n        if (tx == null) { throw new Error(\"no such tx\"); }\n\n        if (typeof(tx) === \"string\") {\n            return <TransactionResponse>(await this.provider.getTransaction(tx));\n        } else {\n            return tx;\n        }\n    }\n\n    getPrefetchedTransaction(indexOrHash: number | string): TransactionResponse {\n        const txs = this.prefetchedTransactions;\n        if (typeof(indexOrHash) === \"number\") {\n            return txs[indexOrHash];\n        }\n\n        indexOrHash = indexOrHash.toLowerCase();\n        for (const tx of txs) {\n            if (tx.hash === indexOrHash) { return tx; }\n        }\n\n        assertArgument(false, \"no matching transaction\", \"indexOrHash\", indexOrHash);\n    }\n\n    /**\n     *  Has this block been mined.\n     *\n     *  If true, the block has been typed-gaurded that all mined\n     *  properties are non-null.\n     */\n    isMined(): this is MinedBlock { return !!this.hash; }\n\n    /**\n     *\n     */\n    isLondon(): this is (Block & { baseFeePerGas: bigint }) {\n        return !!this.baseFeePerGas;\n    }\n\n    orphanedEvent(): OrphanFilter {\n        if (!this.isMined()) { throw new Error(\"\"); }\n        return createOrphanedBlockFilter(this);\n    }\n}\n\n//////////////////////\n// Log\n\nexport class Log implements LogParams {\n    readonly provider: Provider;\n\n    readonly transactionHash!: string;\n    readonly blockHash!: string;\n    readonly blockNumber!: number;\n\n    readonly removed!: boolean;\n\n    readonly address!: string;\n    readonly data!: string;\n\n    readonly topics!: ReadonlyArray<string>;\n\n    readonly index!: number;\n    readonly transactionIndex!: number;\n\n\n    constructor(log: LogParams, provider: Provider) {\n        this.provider = provider;\n\n        const topics = Object.freeze(log.topics.slice());\n        defineProperties<Log>(this, {\n            transactionHash: log.transactionHash,\n            blockHash: log.blockHash,\n            blockNumber: log.blockNumber,\n\n            removed: log.removed,\n\n            address: log.address,\n            data: log.data,\n\n            topics,\n\n            index: log.index,\n            transactionIndex: log.transactionIndex,\n        });\n    }\n\n    toJSON(): any {\n        const {\n            address, blockHash, blockNumber, data, index,\n            removed, topics, transactionHash, transactionIndex\n        } = this;\n\n        return {\n            _type: \"log\",\n            address, blockHash, blockNumber, data, index,\n            removed, topics, transactionHash, transactionIndex\n        };\n    }\n\n    async getBlock(): Promise<Block> {\n        const block = await this.provider.getBlock(this.blockHash);\n        assert(!!block, \"failed to find transaction\", \"UNKNOWN_ERROR\", { });\n        return block;\n    }\n\n    async getTransaction(): Promise<TransactionResponse> {\n        const tx = await this.provider.getTransaction(this.transactionHash);\n        assert(!!tx, \"failed to find transaction\", \"UNKNOWN_ERROR\", { });\n        return tx;\n    }\n\n    async getTransactionReceipt(): Promise<TransactionReceipt> {\n        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);\n        assert(!!receipt, \"failed to find transaction receipt\", \"UNKNOWN_ERROR\", { });\n        return receipt;\n    }\n\n    removedEvent(): OrphanFilter {\n        return createRemovedLogFilter(this);\n    }\n}\n\n//////////////////////\n// Transaction Receipt\n\n/*\nexport interface LegacyTransactionReceipt {\n    byzantium: false;\n    status: null;\n    root: string;\n}\n\nexport interface ByzantiumTransactionReceipt {\n    byzantium: true;\n    status: number;\n    root: null;\n}\n*/\n\nexport class TransactionReceipt implements TransactionReceiptParams, Iterable<Log> {\n    readonly provider!: Provider;\n\n    readonly to!: null | string;\n    readonly from!: string;\n    readonly contractAddress!: null | string;\n\n    readonly hash!: string;\n    readonly index!: number;\n\n    readonly blockHash!: string;\n    readonly blockNumber!: number;\n\n    readonly logsBloom!: string;\n\n    readonly gasUsed!: bigint;\n    readonly cumulativeGasUsed!: bigint;\n    readonly gasPrice!: bigint;\n\n    readonly type!: number;\n    //readonly byzantium!: boolean;\n    readonly status!: null | number;\n    readonly root!: null | string;\n\n    readonly #logs: ReadonlyArray<Log>;\n\n    constructor(tx: TransactionReceiptParams, provider: Provider) {\n        this.#logs = Object.freeze(tx.logs.map((log) => {\n            return new Log(log, provider);\n        }));\n\n        defineProperties<TransactionReceipt>(this, {\n            provider,\n\n            to: tx.to,\n            from: tx.from,\n            contractAddress: tx.contractAddress,\n\n            hash: tx.hash,\n            index: tx.index,\n\n            blockHash: tx.blockHash,\n            blockNumber: tx.blockNumber,\n\n            logsBloom: tx.logsBloom,\n\n            gasUsed: tx.gasUsed,\n            cumulativeGasUsed: tx.cumulativeGasUsed,\n            gasPrice: ((tx.effectiveGasPrice || tx.gasPrice) as bigint),\n\n            type: tx.type,\n            //byzantium: tx.byzantium,\n            status: tx.status,\n            root: tx.root\n        });\n    }\n\n    get logs(): ReadonlyArray<Log> { return this.#logs; }\n\n    toJSON(): any {\n        const {\n            to, from, contractAddress, hash, index, blockHash, blockNumber, logsBloom,\n            logs, //byzantium, \n            status, root\n        } = this;\n\n        return {\n            _type: \"TransactionReceipt\",\n            blockHash, blockNumber,\n            //byzantium, \n            contractAddress,\n            cumulativeGasUsed: toJson(this.cumulativeGasUsed),\n            from,\n            gasPrice: toJson(this.gasPrice),\n            gasUsed: toJson(this.gasUsed),\n            hash, index, logs, logsBloom, root, status, to\n        };\n    }\n\n    get length(): number { return this.logs.length; }\n\n    [Symbol.iterator](): Iterator<Log> {\n        let index = 0;\n        return {\n            next: () => {\n                if (index < this.length) {\n                    return { value: this.logs[index++], done: false }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    get fee(): bigint {\n        return this.gasUsed * this.gasPrice;\n    }\n\n    async getBlock(): Promise<Block> {\n        const block = await this.provider.getBlock(this.blockHash);\n        if (block == null) { throw new Error(\"TODO\"); }\n        return block;\n    }\n\n    async getTransaction(): Promise<TransactionResponse> {\n        const tx = await this.provider.getTransaction(this.hash);\n        if (tx == null) { throw new Error(\"TODO\"); }\n        return tx;\n    }\n\n    async getResult(): Promise<string> {\n        return <string>(await this.provider.getTransactionResult(this.hash));\n    }\n\n    async confirmations(): Promise<number> {\n        return (await this.provider.getBlockNumber()) - this.blockNumber + 1;\n    }\n\n    removedEvent(): OrphanFilter {\n        return createRemovedTransactionFilter(this);\n    }\n\n    reorderedEvent(other?: TransactionResponse): OrphanFilter {\n        assert(!other || other.isMined(), \"unmined 'other' transction cannot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"reorderedEvent(other)\" });\n        return createReorderedTransactionFilter(this, other);\n    }\n}\n\n\n//////////////////////\n// Transaction Response\n\nexport interface MinedTransactionResponse extends TransactionResponse {\n    blockNumber: number;\n    blockHash: string;\n    date: Date;\n}\n\n/*\nexport type ReplacementDetectionSetup = {\n    to: string;\n    from: string;\n    value: bigint;\n    data: string;\n    nonce: number;\n    block: number;\n};\n*/\nexport class TransactionResponse implements TransactionLike<string>, TransactionResponseParams {\n    readonly provider: Provider;\n\n    readonly blockNumber: null | number;\n    readonly blockHash: null | string;\n\n    readonly index!: number;\n\n    readonly hash!: string;\n\n    readonly type!: number;\n\n    readonly to!: null | string;\n    readonly from!: string;\n\n    readonly nonce!: number;\n\n    readonly gasLimit!: bigint;\n\n    readonly gasPrice!: bigint;\n\n    readonly maxPriorityFeePerGas!: null | bigint;\n    readonly maxFeePerGas!: null | bigint;\n\n    readonly data!: string;\n    readonly value!: bigint;\n    readonly chainId!: bigint;\n\n    readonly signature!: Signature;\n\n    readonly accessList!: null | AccessList;\n\n    #startBlock: number;\n\n    constructor(tx: TransactionResponseParams, provider: Provider) {\n        this.provider = provider;\n\n        this.blockNumber = (tx.blockNumber != null) ? tx.blockNumber: null;\n        this.blockHash = (tx.blockHash != null) ? tx.blockHash: null;\n\n        this.hash = tx.hash;\n        this.index = tx.index;\n\n        this.type = tx.type;\n\n        this.from = tx.from;\n        this.to = tx.to || null;\n\n        this.gasLimit = tx.gasLimit;\n        this.nonce = tx.nonce;\n        this.data = tx.data;\n        this.value = tx.value;\n\n        this.gasPrice = tx.gasPrice;\n        this.maxPriorityFeePerGas = (tx.maxPriorityFeePerGas != null) ? tx.maxPriorityFeePerGas: null;\n        this.maxFeePerGas = (tx.maxFeePerGas != null) ? tx.maxFeePerGas: null;\n\n        this.chainId = tx.chainId;\n        this.signature = tx.signature;\n\n        this.accessList = (tx.accessList != null) ? tx.accessList: null;\n\n        this.#startBlock = -1;\n    }\n\n    toJSON(): any {\n        const {\n            blockNumber, blockHash, index, hash, type, to, from, nonce,\n            data, signature, accessList\n        } = this;\n\n        return {\n            _type: \"TransactionReceipt\",\n            accessList, blockNumber, blockHash,\n            chainId: toJson(this.chainId),\n            data, from,\n            gasLimit: toJson(this.gasLimit),\n            gasPrice: toJson(this.gasPrice),\n            hash,\n            maxFeePerGas: toJson(this.maxFeePerGas),\n            maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),\n            nonce, signature, to, index, type,\n            value: toJson(this.value),\n        };\n    }\n\n    async getBlock(): Promise<null | Block> {\n        let blockNumber = this.blockNumber;\n        if (blockNumber == null) {\n            const tx = await this.getTransaction();\n            if (tx) { blockNumber = tx.blockNumber; }\n        }\n        if (blockNumber == null) { return null; }\n        const block = this.provider.getBlock(blockNumber);\n        if (block == null) { throw new Error(\"TODO\"); }\n        return block;\n    }\n\n    async getTransaction(): Promise<null | TransactionResponse> {\n        return this.provider.getTransaction(this.hash);\n    }\n\n    async wait(_confirms?: number, _timeout?: number): Promise<null | TransactionReceipt> {\n        const confirms = (_confirms == null) ? 1: _confirms;\n        const timeout = (_timeout == null) ? 0: _timeout;\n\n        let startBlock = this.#startBlock\n        let nextScan = -1;\n        let stopScanning = (startBlock === -1) ? true: false;\n        const checkReplacement = async () => {\n            // Get the current transaction count for this sender\n            if (stopScanning) { return null; }\n            const { blockNumber, nonce } = await resolveProperties({\n                blockNumber: this.provider.getBlockNumber(),\n                nonce: this.provider.getTransactionCount(this.from)\n            });\n\n            // No transaction or our nonce has not been mined yet; but we\n            // can start scanning later when we do start\n            if (nonce < this.nonce) {\n                startBlock = blockNumber;\n                return;\n            }\n\n            // We were mined; no replacement\n            if (stopScanning) { return null; }\n            const mined = await this.getTransaction();\n            if (mined && mined.blockNumber != null) { return; }\n\n            // We were replaced; start scanning for that transaction\n\n            // Starting to scan; look back a few extra blocks for safety\n            if (nextScan === -1) {\n                nextScan = startBlock - 3;\n                if (nextScan < this.#startBlock) { nextScan = this.#startBlock; }\n            }\n\n            while (nextScan <= blockNumber) {\n                // Get the next block to scan\n                if (stopScanning) { return null; }\n                const block = await this.provider.getBlock(nextScan, true);\n\n                // This should not happen; but we'll try again shortly\n                if (block == null) { return; }\n\n                // We were mined; no replacement\n                for (const hash of block) {\n                    if (hash === this.hash) { return; }\n                }\n\n                // Search for the transaction that replaced us\n                for (let i = 0; i < block.length; i++) {\n                    const tx: TransactionResponse = await block.getTransaction(i);\n\n                    if (tx.from === this.from && tx.nonce === this.nonce) {\n                        // Get the receipt\n                        if (stopScanning) { return null; }\n                        const receipt = await this.provider.getTransactionReceipt(tx.hash);\n\n                        // This should not happen; but we'll try again shortly\n                        if (receipt == null) { return; }\n\n                        // We will retry this on the next block (this case could be optimized)\n                        if ((blockNumber - receipt.blockNumber + 1) < confirms) { return; }\n\n                        // The reason we were replaced\n                        let reason: \"replaced\" | \"repriced\" | \"cancelled\" = \"replaced\";\n                        if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {\n                            reason = \"repriced\";\n                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value === BN_0) {\n                            reason = \"cancelled\"\n                        }\n\n                        assert(false, \"transaction was replaced\", \"TRANSACTION_REPLACED\", {\n                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                            reason,\n                            replacement: tx.replaceableTransaction(startBlock),\n                            hash: tx.hash,\n                            receipt\n                        });\n                    }\n                }\n\n                nextScan++;\n            }\n            return;\n        };\n\n        const receipt = await this.provider.getTransactionReceipt(this.hash);\n\n        if (receipt) {\n            if ((await receipt.confirmations()) >= confirms) { return receipt; }\n\n        } else {\n            // Check for a replacement; throws if a replacement was found\n            await checkReplacement();\n\n            // Allow null only when the confirms is 0\n            if (confirms === 0) { return null; }\n        }\n\n        const waiter = new Promise((resolve, reject) => {\n            // List of things to cancel when we have a result (one way or the other)\n            const cancellers: Array<() => void> = [ ];\n            const cancel = () => { cancellers.forEach((c) => c()); };\n\n            // On cancel, stop scanning for replacements\n            cancellers.push(() => { stopScanning = true; });\n\n            // Set up any timeout requested\n            if (timeout > 0) {\n                const timer = setTimeout(() => {\n                    cancel();\n                    reject(makeError(\"wait for transaction timeout\", \"TIMEOUT\"));\n                }, timeout);\n                cancellers.push(() => { clearTimeout(timer); });\n            }\n\n            const txListener = async (receipt: TransactionReceipt) => {\n                // Done; return it!\n                if ((await receipt.confirmations()) >= confirms) {\n                    cancel();\n                    resolve(receipt);\n                }\n\n            };\n            cancellers.push(() => { this.provider.off(this.hash, txListener); });\n            this.provider.on(this.hash, txListener);\n            // We support replacement detection; start checking\n            if (startBlock >= 0) {\n                const replaceListener = async () => {\n                    try {\n                        // Check for a replacement; this throws only if one is found\n                        await checkReplacement();\n\n                    } catch (error) {\n                        // We were replaced (with enough confirms); re-throw the error\n                        if (isError(error, \"TRANSACTION_REPLACED\")) {\n                            cancel();\n                            reject(error);\n                            return;\n                        }\n                    }\n\n                    // Rescheudle a check on the next block\n                    if (!stopScanning) {\n                        this.provider.once(\"block\", replaceListener);\n                    }\n                };\n                cancellers.push(() => { this.provider.off(\"block\", replaceListener); });\n                this.provider.once(\"block\", replaceListener);\n            }\n        });\n\n        return await <Promise<TransactionReceipt>>waiter;\n    }\n\n    isMined(): this is MinedTransactionResponse {\n        return (this.blockHash != null);\n    }\n\n    isLegacy(): this is (TransactionResponse & { accessList: null, maxFeePerGas: null, maxPriorityFeePerGas: null }) {\n        return (this.type === 0)\n    }\n\n    isBerlin(): this is (TransactionResponse & { accessList: AccessList, maxFeePerGas: null, maxPriorityFeePerGas: null }) {\n        return (this.type === 1);\n    }\n\n    isLondon(): this is (TransactionResponse & { accessList: AccessList, maxFeePerGas: bigint, maxPriorityFeePerGas: bigint }){\n        return (this.type === 2);\n    }\n\n    removedEvent(): OrphanFilter {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n        return createRemovedTransactionFilter(this);\n    }\n\n    reorderedEvent(other?: TransactionResponse): OrphanFilter {\n        assert(this.isMined(), \"unmined transaction canot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n\n        assert(!other || other.isMined(), \"unmined 'other' transaction canot be orphaned\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"removeEvent()\" });\n\n        return createReorderedTransactionFilter(this, other);\n    }\n\n    /**\n     *  Returns a new TransactionResponse instance which has the ability to\n     *  detect (and throw an error) if the transaction is replaced, which\n     *  will begin scanning at %%startBlock%%.\n     *\n     *  This should generally not be used by developers and is intended\n     *  primarily for internal use. Setting an incorrect %%startBlock%% can\n     *  have devastating performance consequences if used incorrectly.\n     */\n    replaceableTransaction(startBlock: number): TransactionResponse {\n        assertArgument(Number.isInteger(startBlock) && startBlock >= 0, \"invalid startBlock\", \"startBlock\", startBlock);\n        const tx = new TransactionResponse(this, this.provider);\n        tx.#startBlock = startBlock;\n        return tx;\n    }\n}\n\n\n//////////////////////\n// OrphanFilter\n\nexport type OrphanFilter = {\n    orphan: \"drop-block\",\n    hash: string,\n    number: number\n} | {\n    orphan: \"drop-transaction\",\n    tx: { hash: string, blockHash: string, blockNumber: number },\n    other?: { hash: string, blockHash: string, blockNumber: number }\n} | {\n    orphan: \"reorder-transaction\",\n    tx: { hash: string, blockHash: string, blockNumber: number },\n    other?: { hash: string, blockHash: string, blockNumber: number }\n} | {\n    orphan: \"drop-log\",\n    log: {\n        transactionHash: string,\n        blockHash: string,\n        blockNumber: number,\n        address: string,\n        data: string,\n        topics: ReadonlyArray<string>,\n        index: number\n    }\n};\n\nfunction createOrphanedBlockFilter(block: { hash: string, number: number }): OrphanFilter {\n    return { orphan: \"drop-block\", hash: block.hash, number: block.number };\n}\n\nfunction createReorderedTransactionFilter(tx: { hash: string, blockHash: string, blockNumber: number }, other?: { hash: string, blockHash: string, blockNumber: number }): OrphanFilter {\n    return { orphan: \"reorder-transaction\", tx, other };\n}\n\nfunction createRemovedTransactionFilter(tx: { hash: string, blockHash: string, blockNumber: number }): OrphanFilter {\n    return { orphan: \"drop-transaction\", tx };\n}\n\nfunction createRemovedLogFilter(log: { blockHash: string, transactionHash: string, blockNumber: number, address: string, data: string, topics: ReadonlyArray<string>, index: number }): OrphanFilter {\n    return { orphan: \"drop-log\", log: {\n        transactionHash: log.transactionHash,\n        blockHash: log.blockHash,\n        blockNumber: log.blockNumber,\n        address: log.address,\n        data: log.data,\n        topics: Object.freeze(log.topics.slice()),\n        index: log.index\n    } };\n}\n\n//////////////////////\n// EventFilter\n\nexport type TopicFilter = Array<null | string | Array<string>>;\n\n// @TODO:\n//export type DeferableTopicFilter = Array<null | string | Promise<string> | Array<string | Promise<string>>>;\n\nexport interface EventFilter {\n    address?: AddressLike | Array<AddressLike>;\n    topics?: TopicFilter;\n}\n\nexport interface Filter extends EventFilter {\n    fromBlock?: BlockTag;\n    toBlock?: BlockTag;\n}\n\nexport interface FilterByBlockHash extends EventFilter {\n    blockHash?: string;\n}\n\n\n//////////////////////\n// ProviderEvent\n\nexport type ProviderEvent = string | Array<string | Array<string>> | EventFilter | OrphanFilter;\n\n\n//////////////////////\n// Provider\n\n/**\n *  A **Provider** is the primary method to interact with the read-only\n *  content on Ethereum.\n *\n *  It allows access to details about accounts, blocks and transactions\n *  and the ability to query event logs and simulate contract execution.\n *\n *  Account data includes the [balance](getBalance),\n *  [transaction count](getTransactionCount), [code](getCode) and\n *  [state trie storage](getStorage).\n *\n *  Simulating execution can be used to [call](call),\n *  [estimate gas](estimateGas) and\n *  [get transaction results](getTransactionResult).\n *\n *  The [[broadcastTransaction]] is the only method which allows updating\n *  the blockchain, but it is usually accessed by a [[Signer]], since a\n *  private key must be used to sign the transaction before it can be\n *  broadcast.\n */\nexport interface Provider extends ContractRunner, EventEmitterable<ProviderEvent>, NameResolver {\n\n    /**\n     *  The provider iteself.\n     *\n     *  This is part of the necessary API for executing a contract, as\n     *  it provides a common property on any [[ContractRunner]] that\n     *  can be used to access the read-only portion of the runner.\n     */\n    provider: this;\n\n    /**\n     *  Shutdown any resources this provider is using. No additional\n     *  calls should be made to this provider after calling this.\n     */\n    destroy(): void;\n\n    ////////////////////\n    // State\n\n    /**\n     *  Get the current block number.\n     */\n    getBlockNumber(): Promise<number>;\n\n    /**\n     *  Get the connected [[Network]].\n     */\n    getNetwork(): Promise<Network>;\n\n    /**\n     *  Get the best guess at the recommended [[FeeData]].\n     */\n    getFeeData(): Promise<FeeData>;\n\n\n    ////////////////////\n    // Account\n\n    /**\n     *  Get the account balance (in wei) of %%address%%. If %%blockTag%%\n     *  is specified and the node supports archive access for that\n     *  %%blockTag%%, the balance is as of that [[BlockTag]].\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getBalance(address: AddressLike, blockTag?: BlockTag): Promise<bigint>;\n\n    /**\n     *  Get the number of transactions ever sent for %%address%%, which\n     *  is used as the ``nonce`` when sending a transaction. If\n     *  %%blockTag%% is specified and the node supports archive access\n     *  for that %%blockTag%%, the transaction count is as of that\n     *  [[BlockTag]].\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getTransactionCount(address: AddressLike, blockTag?: BlockTag): Promise<number>;\n\n    /**\n     *  Get the bytecode for %%address%%.\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getCode(address: AddressLike, blockTag?: BlockTag): Promise<string>\n\n    /**\n     *  Get the storage slot value for %%address%% at slot %%position%%.\n     *\n     *  @note On nodes without archive access enabled, the %%blockTag%% may be\n     *        **silently ignored** by the node, which may cause issues if relied on.\n     */\n    getStorage(address: AddressLike, position: BigNumberish, blockTag?: BlockTag): Promise<string>\n\n\n    ////////////////////\n    // Execution\n\n    /**\n     *  Estimates the amount of gas required to executre %%tx%%.\n     */\n    estimateGas(tx: TransactionRequest): Promise<bigint>;\n\n    /**\n     *  Simulate the execution of %%tx%%. If the call reverts, it will\n     *  throw a [[CallExceptionError]] which includes the revert data.\n     */\n    call(tx: TransactionRequest): Promise<string>\n\n    /**\n     *  Broadcasts the %%signedTx%% to the network, adding it to the\n     *  memory pool of any node for which the transaction meets the\n     *  rebroadcast requirements.\n     */\n    broadcastTransaction(signedTx: string): Promise<TransactionResponse>;\n\n\n    ////////////////////\n    // Queries\n\n    /**\n     *  Resolves to the block for %%blockHashOrBlockTag%%.\n     *\n     *  If %%prefetchTxs%%, and the backend supports including transactions\n     *  with block requests, all transactions will be included and the\n     *  [[Block]] object will not need to make remote calls for getting\n     *  transactions.\n     */\n    getBlock(blockHashOrBlockTag: BlockTag | string, prefetchTxs?: boolean): Promise<null | Block>;\n\n    /**\n     *  Resolves to the transaction for %%hash%%.\n     *\n     *  If the transaction is unknown or on pruning nodes which\n     *  discard old transactions this resolves to ``null``.\n     */\n    getTransaction(hash: string): Promise<null | TransactionResponse>;\n\n    /**\n     *  Resolves to the transaction receipt for %%hash%%, if mined.\n     *\n     *  If the transaction has not been mined, is unknown or on\n     *  pruning nodes which discard old transactions this resolves to\n     *  ``null``.\n     */\n    getTransactionReceipt(hash: string): Promise<null | TransactionReceipt>;\n\n    /**\n     *  Resolves to the result returned by the executions of %%hash%%.\n     *\n     *  This is only supported on nodes with archive access and with\n     *  the necessary debug APIs enabled.\n     */\n    getTransactionResult(hash: string): Promise<null | string>;\n\n\n    ////////////////////\n    // Bloom-filter Queries\n\n    /**\n     *  Resolves to the list of Logs that match %%filter%%\n     */\n    getLogs(filter: Filter | FilterByBlockHash): Promise<Array<Log>>;\n\n\n    ////////////////////\n    // ENS\n\n    /**\n     *  Resolves to the address configured for the %%ensName%% or\n     *  ``null`` if unconfigured.\n     */\n    resolveName(ensName: string): Promise<null | string>;\n\n    /**\n     *  Resolves to the ENS name associated for the %%address%% or\n     *  ``null`` if the //primary name// is not configured.\n     *\n     *  Users must perform additional steps to configure a //primary name//,\n     *  which is not currently common.\n     */\n    lookupAddress(address: string): Promise<null | string>;\n\n    /**\n     *  Waits until the transaction %%hash%% is mined and has %%confirms%%\n     *  confirmations.\n     */\n    waitForTransaction(hash: string, confirms?: number, timeout?: number): Promise<null | TransactionReceipt>;\n\n    /**\n     *  Resolves to the block at %%blockTag%% once it has been mined.\n     *\n     *  This can be useful for waiting some number of blocks by using\n     *  the ``currentBlockNumber + N``.\n     */\n    waitForBlock(blockTag?: BlockTag): Promise<Block>;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}