{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HardhatContext = void 0;\nconst extenders_1 = require(\"./core/config/extenders\");\nconst errors_1 = require(\"./core/errors\");\nconst errors_list_1 = require(\"./core/errors-list\");\nconst dsl_1 = require(\"./core/tasks/dsl\");\nconst platform_1 = require(\"./util/platform\");\nclass HardhatContext {\n  constructor() {\n    this.tasksDSL = new dsl_1.TasksDSL();\n    this.extendersManager = new extenders_1.ExtenderManager();\n    this.configExtenders = [];\n    // NOTE: This is experimental and will be removed. Please contact our team if\n    // you are planning to use it.\n    this.experimentalHardhatNetworkMessageTraceHooks = [];\n  }\n  static isCreated() {\n    const globalWithHardhatContext = global;\n    return globalWithHardhatContext.__hardhatContext !== undefined;\n  }\n  static createHardhatContext() {\n    if (this.isCreated()) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_ALREADY_CREATED);\n    }\n    const globalWithHardhatContext = global;\n    const ctx = new HardhatContext();\n    globalWithHardhatContext.__hardhatContext = ctx;\n    return ctx;\n  }\n  static getHardhatContext() {\n    const globalWithHardhatContext = global;\n    const ctx = globalWithHardhatContext.__hardhatContext;\n    if (ctx === undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_NOT_CREATED);\n    }\n    return ctx;\n  }\n  static deleteHardhatContext() {\n    const globalAsAny = global;\n    globalAsAny.__hardhatContext = undefined;\n  }\n  setHardhatRuntimeEnvironment(env) {\n    if (this.environment !== undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_HRE_ALREADY_DEFINED);\n    }\n    this.environment = env;\n  }\n  getHardhatRuntimeEnvironment() {\n    if (this.environment === undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.CONTEXT_HRE_NOT_DEFINED);\n    }\n    return this.environment;\n  }\n  setConfigLoadingAsStarted() {\n    this._filesLoadedBeforeConfig = (0, platform_1.getRequireCachedFiles)();\n  }\n  setConfigLoadingAsFinished() {\n    this._filesLoadedAfterConfig = (0, platform_1.getRequireCachedFiles)();\n  }\n  getFilesLoadedDuringConfig() {\n    // No config was loaded\n    if (this._filesLoadedBeforeConfig === undefined) {\n      return [];\n    }\n    (0, errors_1.assertHardhatInvariant)(this._filesLoadedAfterConfig !== undefined, \"Config loading was set as started and not finished\");\n    return arraysDifference(this._filesLoadedAfterConfig, this._filesLoadedBeforeConfig);\n  }\n}\nexports.HardhatContext = HardhatContext;\nfunction arraysDifference(a, b) {\n  return a.filter(e => !b.includes(e));\n}","map":{"version":3,"mappings":";;;;;;AAMA;AACA;AACA;AACA;AACA;AAMA,MAAaA,cAAc;EAA3BC;IA8BkB,aAAQ,GAAG,IAAIC,cAAQ,EAAE;IACzB,qBAAgB,GAAG,IAAIC,2BAAe,EAAE;IAExC,oBAAe,GAAqB,EAAE;IAEtD;IACA;IACgB,gDAA2C,GACzD,EAAE;EA0CN;EA/ES,OAAOC,SAAS;IACrB,MAAMC,wBAAwB,GAAGC,MAAkC;IACnE,OAAOD,wBAAwB,CAACE,gBAAgB,KAAKC,SAAS;EAChE;EAEO,OAAOC,oBAAoB;IAChC,IAAI,IAAI,CAACL,SAAS,EAAE,EAAE;MACpB,MAAM,IAAIM,qBAAY,CAACC,oBAAM,CAACC,OAAO,CAACC,uBAAuB,CAAC;;IAEhE,MAAMR,wBAAwB,GAAGC,MAAkC;IACnE,MAAMQ,GAAG,GAAG,IAAId,cAAc,EAAE;IAChCK,wBAAwB,CAACE,gBAAgB,GAAGO,GAAG;IAC/C,OAAOA,GAAG;EACZ;EAEO,OAAOC,iBAAiB;IAC7B,MAAMV,wBAAwB,GAAGC,MAAkC;IACnE,MAAMQ,GAAG,GAAGT,wBAAwB,CAACE,gBAAgB;IACrD,IAAIO,GAAG,KAAKN,SAAS,EAAE;MACrB,MAAM,IAAIE,qBAAY,CAACC,oBAAM,CAACC,OAAO,CAACI,mBAAmB,CAAC;;IAE5D,OAAOF,GAAG;EACZ;EAEO,OAAOG,oBAAoB;IAChC,MAAMC,WAAW,GAAGZ,MAAa;IACjCY,WAAW,CAACX,gBAAgB,GAAGC,SAAS;EAC1C;EAcOW,4BAA4B,CAACC,GAA8B;IAChE,IAAI,IAAI,CAACC,WAAW,KAAKb,SAAS,EAAE;MAClC,MAAM,IAAIE,qBAAY,CAACC,oBAAM,CAACC,OAAO,CAACU,2BAA2B,CAAC;;IAEpE,IAAI,CAACD,WAAW,GAAGD,GAAG;EACxB;EAEOG,4BAA4B;IACjC,IAAI,IAAI,CAACF,WAAW,KAAKb,SAAS,EAAE;MAClC,MAAM,IAAIE,qBAAY,CAACC,oBAAM,CAACC,OAAO,CAACY,uBAAuB,CAAC;;IAEhE,OAAO,IAAI,CAACH,WAAW;EACzB;EAEOI,yBAAyB;IAC9B,IAAI,CAACC,wBAAwB,GAAG,oCAAqB,GAAE;EACzD;EAEOC,0BAA0B;IAC/B,IAAI,CAACC,uBAAuB,GAAG,oCAAqB,GAAE;EACxD;EAEOC,0BAA0B;IAC/B;IACA,IAAI,IAAI,CAACH,wBAAwB,KAAKlB,SAAS,EAAE;MAC/C,OAAO,EAAE;;IAGX,mCAAsB,EACpB,IAAI,CAACoB,uBAAuB,KAAKpB,SAAS,EAC1C,oDAAoD,CACrD;IAED,OAAOsB,gBAAgB,CACrB,IAAI,CAACF,uBAAuB,EAC5B,IAAI,CAACF,wBAAwB,CAC9B;EACH;;AA/EFK;AAkFA,SAASD,gBAAgB,CAAIE,CAAM,EAAEC,CAAM;EACzC,OAAOD,CAAC,CAACE,MAAM,CAAEC,CAAC,IAAK,CAACF,CAAC,CAACG,QAAQ,CAACD,CAAC,CAAC,CAAC;AACxC","names":["HardhatContext","constructor","dsl_1","extenders_1","isCreated","globalWithHardhatContext","global","__hardhatContext","undefined","createHardhatContext","errors_1","errors_list_1","GENERAL","CONTEXT_ALREADY_CREATED","ctx","getHardhatContext","CONTEXT_NOT_CREATED","deleteHardhatContext","globalAsAny","setHardhatRuntimeEnvironment","env","environment","CONTEXT_HRE_ALREADY_DEFINED","getHardhatRuntimeEnvironment","CONTEXT_HRE_NOT_DEFINED","setConfigLoadingAsStarted","_filesLoadedBeforeConfig","setConfigLoadingAsFinished","_filesLoadedAfterConfig","getFilesLoadedDuringConfig","arraysDifference","exports","a","b","filter","e","includes"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/hardhat/src/internal/context.ts"],"sourcesContent":["import {\n  ConfigExtender,\n  ExperimentalHardhatNetworkMessageTraceHook,\n  HardhatRuntimeEnvironment,\n} from \"../types\";\n\nimport { ExtenderManager } from \"./core/config/extenders\";\nimport { assertHardhatInvariant, HardhatError } from \"./core/errors\";\nimport { ERRORS } from \"./core/errors-list\";\nimport { TasksDSL } from \"./core/tasks/dsl\";\nimport { getRequireCachedFiles } from \"./util/platform\";\n\nexport type GlobalWithHardhatContext = typeof global & {\n  __hardhatContext: HardhatContext;\n};\n\nexport class HardhatContext {\n  public static isCreated(): boolean {\n    const globalWithHardhatContext = global as GlobalWithHardhatContext;\n    return globalWithHardhatContext.__hardhatContext !== undefined;\n  }\n\n  public static createHardhatContext(): HardhatContext {\n    if (this.isCreated()) {\n      throw new HardhatError(ERRORS.GENERAL.CONTEXT_ALREADY_CREATED);\n    }\n    const globalWithHardhatContext = global as GlobalWithHardhatContext;\n    const ctx = new HardhatContext();\n    globalWithHardhatContext.__hardhatContext = ctx;\n    return ctx;\n  }\n\n  public static getHardhatContext(): HardhatContext {\n    const globalWithHardhatContext = global as GlobalWithHardhatContext;\n    const ctx = globalWithHardhatContext.__hardhatContext;\n    if (ctx === undefined) {\n      throw new HardhatError(ERRORS.GENERAL.CONTEXT_NOT_CREATED);\n    }\n    return ctx;\n  }\n\n  public static deleteHardhatContext() {\n    const globalAsAny = global as any;\n    globalAsAny.__hardhatContext = undefined;\n  }\n\n  public readonly tasksDSL = new TasksDSL();\n  public readonly extendersManager = new ExtenderManager();\n  public environment?: HardhatRuntimeEnvironment;\n  public readonly configExtenders: ConfigExtender[] = [];\n\n  // NOTE: This is experimental and will be removed. Please contact our team if\n  // you are planning to use it.\n  public readonly experimentalHardhatNetworkMessageTraceHooks: ExperimentalHardhatNetworkMessageTraceHook[] =\n    [];\n  private _filesLoadedBeforeConfig?: string[];\n  private _filesLoadedAfterConfig?: string[];\n\n  public setHardhatRuntimeEnvironment(env: HardhatRuntimeEnvironment) {\n    if (this.environment !== undefined) {\n      throw new HardhatError(ERRORS.GENERAL.CONTEXT_HRE_ALREADY_DEFINED);\n    }\n    this.environment = env;\n  }\n\n  public getHardhatRuntimeEnvironment(): HardhatRuntimeEnvironment {\n    if (this.environment === undefined) {\n      throw new HardhatError(ERRORS.GENERAL.CONTEXT_HRE_NOT_DEFINED);\n    }\n    return this.environment;\n  }\n\n  public setConfigLoadingAsStarted() {\n    this._filesLoadedBeforeConfig = getRequireCachedFiles();\n  }\n\n  public setConfigLoadingAsFinished() {\n    this._filesLoadedAfterConfig = getRequireCachedFiles();\n  }\n\n  public getFilesLoadedDuringConfig(): string[] {\n    // No config was loaded\n    if (this._filesLoadedBeforeConfig === undefined) {\n      return [];\n    }\n\n    assertHardhatInvariant(\n      this._filesLoadedAfterConfig !== undefined,\n      \"Config loading was set as started and not finished\"\n    );\n\n    return arraysDifference(\n      this._filesLoadedAfterConfig,\n      this._filesLoadedBeforeConfig\n    );\n  }\n}\n\nfunction arraysDifference<T>(a: T[], b: T[]): T[] {\n  return a.filter((e) => !b.includes(e));\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}