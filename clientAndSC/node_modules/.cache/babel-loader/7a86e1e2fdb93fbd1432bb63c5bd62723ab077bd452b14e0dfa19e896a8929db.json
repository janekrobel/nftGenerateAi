{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.weiToHumanReadableString = void 0;\n/**\n * This function turns a wei value in a human readable string. It shows values\n * in ETH, gwei or wei, depending on how large it is.\n *\n * It never show more than 99999 wei or gwei, moving to the larger denominator\n * when necessary.\n *\n * It never shows more than 4 decimal digits. Adapting denominator and\n * truncating as necessary.\n */\nfunction weiToHumanReadableString(wei) {\n  if (typeof wei === \"number\") {\n    wei = BigInt(wei);\n  }\n  if (wei === 0n) {\n    return \"0 ETH\";\n  }\n  if (wei < 100000n) {\n    return `${wei.toString()} wei`;\n  }\n  if (wei < 10n ** 14n) {\n    return `${toDecimalString(wei, 9, 4)} gwei`;\n  }\n  return `${toDecimalString(wei, 18, 4)} ETH`;\n}\nexports.weiToHumanReadableString = weiToHumanReadableString;\nfunction toDecimalString(value, digitsToInteger) {\n  let decimalDigits = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 4;\n  const oneUnit = 10n ** BigInt(digitsToInteger);\n  const oneDecimal = 10n ** BigInt(digitsToInteger - decimalDigits);\n  const integer = value / oneUnit;\n  const decimals = value % oneUnit / oneDecimal;\n  if (decimals === 0n) {\n    return integer.toString(10);\n  }\n  const decimalsString = removeRightZeros(decimals.toString(10).padStart(decimalDigits, \"0\"));\n  return `${integer.toString(10)}.${decimalsString}`;\n}\nfunction removeRightZeros(str) {\n  let zeros = 0;\n  for (let i = str.length - 1; i >= 0; i--) {\n    if (str.charAt(i) !== \"0\") {\n      break;\n    }\n    zeros += 1;\n  }\n  return str.substr(0, str.length - zeros);\n}","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;;;AAUA,SAAgBA,wBAAwB,CAACC,GAAoB;EAC3D,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;IAC3BA,GAAG,GAAGC,MAAM,CAACD,GAAG,CAAC;;EAGnB,IAAIA,GAAG,KAAK,EAAE,EAAE;IACd,OAAO,OAAO;;EAGhB,IAAIA,GAAG,GAAG,OAAQ,EAAE;IAClB,OAAO,GAAGA,GAAG,CAACE,QAAQ,EAAE,MAAM;;EAGhC,IAAIF,GAAG,GAAG,GAAG,IAAI,GAAG,EAAE;IACpB,OAAO,GAAGG,eAAe,CAACH,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,OAAO;;EAG7C,OAAO,GAAGG,eAAe,CAACH,GAAG,EAAE,EAAE,EAAE,CAAC,CAAC,MAAM;AAC7C;AAlBAI;AAoBA,SAASD,eAAe,CACtBE,KAAa,EACbC,eAAuB,EACE;EAAA,IAAzBC,oFAAwB,CAAC;EAEzB,MAAMC,OAAO,GAAG,GAAG,IAAIP,MAAM,CAACK,eAAe,CAAC;EAC9C,MAAMG,UAAU,GAAG,GAAG,IAAIR,MAAM,CAACK,eAAe,GAAGC,aAAa,CAAC;EAEjE,MAAMG,OAAO,GAAGL,KAAK,GAAGG,OAAO;EAE/B,MAAMG,QAAQ,GAAIN,KAAK,GAAGG,OAAO,GAAIC,UAAU;EAC/C,IAAIE,QAAQ,KAAK,EAAE,EAAE;IACnB,OAAOD,OAAO,CAACR,QAAQ,CAAC,EAAE,CAAC;;EAG7B,MAAMU,cAAc,GAAGC,gBAAgB,CACrCF,QAAQ,CAACT,QAAQ,CAAC,EAAE,CAAC,CAACY,QAAQ,CAACP,aAAa,EAAE,GAAG,CAAC,CACnD;EAED,OAAO,GAAGG,OAAO,CAACR,QAAQ,CAAC,EAAE,CAAC,IAAIU,cAAc,EAAE;AACpD;AAEA,SAASC,gBAAgB,CAACE,GAAW;EACnC,IAAIC,KAAK,GAAG,CAAC;EAEb,KAAK,IAAIC,CAAC,GAAGF,GAAG,CAACG,MAAM,GAAG,CAAC,EAAED,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxC,IAAIF,GAAG,CAACI,MAAM,CAACF,CAAC,CAAC,KAAK,GAAG,EAAE;MACzB;;IAGFD,KAAK,IAAI,CAAC;;EAGZ,OAAOD,GAAG,CAACK,MAAM,CAAC,CAAC,EAAEL,GAAG,CAACG,MAAM,GAAGF,KAAK,CAAC;AAC1C","names":["weiToHumanReadableString","wei","BigInt","toString","toDecimalString","exports","value","digitsToInteger","decimalDigits","oneUnit","oneDecimal","integer","decimals","decimalsString","removeRightZeros","padStart","str","zeros","i","length","charAt","substr"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/hardhat/src/internal/util/wei-values.ts"],"sourcesContent":["/**\n * This function turns a wei value in a human readable string. It shows values\n * in ETH, gwei or wei, depending on how large it is.\n *\n * It never show more than 99999 wei or gwei, moving to the larger denominator\n * when necessary.\n *\n * It never shows more than 4 decimal digits. Adapting denominator and\n * truncating as necessary.\n */\nexport function weiToHumanReadableString(wei: bigint | number): string {\n  if (typeof wei === \"number\") {\n    wei = BigInt(wei);\n  }\n\n  if (wei === 0n) {\n    return \"0 ETH\";\n  }\n\n  if (wei < 100_000n) {\n    return `${wei.toString()} wei`;\n  }\n\n  if (wei < 10n ** 14n) {\n    return `${toDecimalString(wei, 9, 4)} gwei`;\n  }\n\n  return `${toDecimalString(wei, 18, 4)} ETH`;\n}\n\nfunction toDecimalString(\n  value: bigint,\n  digitsToInteger: number,\n  decimalDigits: number = 4\n): string {\n  const oneUnit = 10n ** BigInt(digitsToInteger);\n  const oneDecimal = 10n ** BigInt(digitsToInteger - decimalDigits);\n\n  const integer = value / oneUnit;\n\n  const decimals = (value % oneUnit) / oneDecimal;\n  if (decimals === 0n) {\n    return integer.toString(10);\n  }\n\n  const decimalsString = removeRightZeros(\n    decimals.toString(10).padStart(decimalDigits, \"0\")\n  );\n\n  return `${integer.toString(10)}.${decimalsString}`;\n}\n\nfunction removeRightZeros(str: string): string {\n  let zeros = 0;\n\n  for (let i = str.length - 1; i >= 0; i--) {\n    if (str.charAt(i) !== \"0\") {\n      break;\n    }\n\n    zeros += 1;\n  }\n\n  return str.substr(0, str.length - zeros);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}