{"ast":null,"code":"\"use strict\";\n\n/**\n *  When interacting with Ethereum, it is necessary to use a private\n *  key authenticate actions by signing a payload.\n *\n *  Wallets are the simplest way to expose the concept of an\n *  //Externally Owner Account// (EOA) as it wraps a private key\n *  and supports high-level methods to sign common types of interaction\n *  and send transactions.\n *\n *  The class most developers will want to use is [[Wallet]], which\n *  can load a private key directly or from any common wallet format.\n *\n *  The [[HDNodeWallet]] can be used when it is necessary to access\n *  low-level details of how an HD wallets are derived, exported\n *  or imported.\n *\n *  @_section: api/wallet:Wallets  [about-wallets]\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Wallet = exports.Mnemonic = exports.encryptKeystoreJsonSync = exports.encryptKeystoreJson = exports.decryptKeystoreJson = exports.decryptKeystoreJsonSync = exports.isKeystoreJson = exports.decryptCrowdsaleJson = exports.isCrowdsaleJson = exports.HDNodeVoidWallet = exports.HDNodeWallet = exports.getAccountPath = exports.defaultPath = exports.BaseWallet = void 0;\nvar base_wallet_js_1 = require(\"./base-wallet.js\");\nObject.defineProperty(exports, \"BaseWallet\", {\n  enumerable: true,\n  get: function () {\n    return base_wallet_js_1.BaseWallet;\n  }\n});\nvar hdwallet_js_1 = require(\"./hdwallet.js\");\nObject.defineProperty(exports, \"defaultPath\", {\n  enumerable: true,\n  get: function () {\n    return hdwallet_js_1.defaultPath;\n  }\n});\nObject.defineProperty(exports, \"getAccountPath\", {\n  enumerable: true,\n  get: function () {\n    return hdwallet_js_1.getAccountPath;\n  }\n});\nObject.defineProperty(exports, \"HDNodeWallet\", {\n  enumerable: true,\n  get: function () {\n    return hdwallet_js_1.HDNodeWallet;\n  }\n});\nObject.defineProperty(exports, \"HDNodeVoidWallet\", {\n  enumerable: true,\n  get: function () {\n    return hdwallet_js_1.HDNodeVoidWallet;\n  }\n});\nvar json_crowdsale_js_1 = require(\"./json-crowdsale.js\");\nObject.defineProperty(exports, \"isCrowdsaleJson\", {\n  enumerable: true,\n  get: function () {\n    return json_crowdsale_js_1.isCrowdsaleJson;\n  }\n});\nObject.defineProperty(exports, \"decryptCrowdsaleJson\", {\n  enumerable: true,\n  get: function () {\n    return json_crowdsale_js_1.decryptCrowdsaleJson;\n  }\n});\nvar json_keystore_js_1 = require(\"./json-keystore.js\");\nObject.defineProperty(exports, \"isKeystoreJson\", {\n  enumerable: true,\n  get: function () {\n    return json_keystore_js_1.isKeystoreJson;\n  }\n});\nObject.defineProperty(exports, \"decryptKeystoreJsonSync\", {\n  enumerable: true,\n  get: function () {\n    return json_keystore_js_1.decryptKeystoreJsonSync;\n  }\n});\nObject.defineProperty(exports, \"decryptKeystoreJson\", {\n  enumerable: true,\n  get: function () {\n    return json_keystore_js_1.decryptKeystoreJson;\n  }\n});\nObject.defineProperty(exports, \"encryptKeystoreJson\", {\n  enumerable: true,\n  get: function () {\n    return json_keystore_js_1.encryptKeystoreJson;\n  }\n});\nObject.defineProperty(exports, \"encryptKeystoreJsonSync\", {\n  enumerable: true,\n  get: function () {\n    return json_keystore_js_1.encryptKeystoreJsonSync;\n  }\n});\nvar mnemonic_js_1 = require(\"./mnemonic.js\");\nObject.defineProperty(exports, \"Mnemonic\", {\n  enumerable: true,\n  get: function () {\n    return mnemonic_js_1.Mnemonic;\n  }\n});\nvar wallet_js_1 = require(\"./wallet.js\");\nObject.defineProperty(exports, \"Wallet\", {\n  enumerable: true,\n  get: function () {\n    return wallet_js_1.Wallet;\n  }\n});","map":{"version":3,"mappings":";;AAAA;;;;;;;;;;;;;;;;;;;;;;AAmBA;AAASA;EAAAC;EAAAC;IAAA,kCAAU;EAAA;AAAA;AAEnB;AACIF;EAAAC;EAAAC;IAAA,gCAAW;EAAA;AAAA;AAEXF;EAAAC;EAAAC;IAAA,mCAAc;EAAA;AAAA;AAEdF;EAAAC;EAAAC;IAAA,iCAAY;EAAA;AAAA;AACZF;EAAAC;EAAAC;IAAA,qCAAgB;EAAA;AAAA;AAGpB;AAASF;EAAAC;EAAAC;IAAA,0CAAe;EAAA;AAAA;AAAEF;EAAAC;EAAAC;IAAA,+CAAoB;EAAA;AAAA;AAE9C;AACIF;EAAAC;EAAAC;IAAA,wCAAc;EAAA;AAAA;AACdF;EAAAC;EAAAC;IAAA,iDAAuB;EAAA;AAAA;AAAEF;EAAAC;EAAAC;IAAA,6CAAmB;EAAA;AAAA;AAC5CF;EAAAC;EAAAC;IAAA,6CAAmB;EAAA;AAAA;AAAEF;EAAAC;EAAAC;IAAA,iDAAuB;EAAA;AAAA;AAGhD;AAASF;EAAAC;EAAAC;IAAA,6BAAQ;EAAA;AAAA;AAEjB;AAASF;EAAAC;EAAAC;IAAA,yBAAM;EAAA;AAAA","names":["Object","enumerable","get"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/wallet/index.ts"],"sourcesContent":["/**\n *  When interacting with Ethereum, it is necessary to use a private\n *  key authenticate actions by signing a payload.\n *\n *  Wallets are the simplest way to expose the concept of an\n *  //Externally Owner Account// (EOA) as it wraps a private key\n *  and supports high-level methods to sign common types of interaction\n *  and send transactions.\n *\n *  The class most developers will want to use is [[Wallet]], which\n *  can load a private key directly or from any common wallet format.\n *\n *  The [[HDNodeWallet]] can be used when it is necessary to access\n *  low-level details of how an HD wallets are derived, exported\n *  or imported.\n *\n *  @_section: api/wallet:Wallets  [about-wallets]\n */\n\nexport { BaseWallet } from \"./base-wallet.js\";\n\nexport {\n    defaultPath,\n\n    getAccountPath,\n\n    HDNodeWallet,\n    HDNodeVoidWallet,\n} from \"./hdwallet.js\";\n\nexport { isCrowdsaleJson, decryptCrowdsaleJson } from \"./json-crowdsale.js\";\n\nexport {\n    isKeystoreJson,\n    decryptKeystoreJsonSync, decryptKeystoreJson,\n    encryptKeystoreJson, encryptKeystoreJsonSync\n} from \"./json-keystore.js\";\n\nexport { Mnemonic } from \"./mnemonic.js\";\n\nexport { Wallet } from \"./wallet.js\";\n\n\nexport type { CrowdsaleAccount } from \"./json-crowdsale.js\";\nexport type {\n    KeystoreAccount, EncryptOptions\n} from \"./json-keystore.js\"\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}