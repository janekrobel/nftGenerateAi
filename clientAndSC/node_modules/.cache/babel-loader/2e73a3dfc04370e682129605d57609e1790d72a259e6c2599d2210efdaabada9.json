{"ast":null,"code":"\"use strict\";\n\n/**\n *  About Interface\n *\n *  @_subsection api/abi:Interfaces  [interfaces]\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Interface = exports.Indexed = exports.ErrorDescription = exports.TransactionDescription = exports.LogDescription = exports.Result = exports.checkResultErrors = void 0;\nconst index_js_1 = require(\"../crypto/index.js\");\nconst index_js_2 = require(\"../hash/index.js\");\nconst index_js_3 = require(\"../utils/index.js\");\nconst abi_coder_js_1 = require(\"./abi-coder.js\");\nconst abstract_coder_js_1 = require(\"./coders/abstract-coder.js\");\nObject.defineProperty(exports, \"checkResultErrors\", {\n  enumerable: true,\n  get: function () {\n    return abstract_coder_js_1.checkResultErrors;\n  }\n});\nObject.defineProperty(exports, \"Result\", {\n  enumerable: true,\n  get: function () {\n    return abstract_coder_js_1.Result;\n  }\n});\nconst fragments_js_1 = require(\"./fragments.js\");\nconst typed_js_1 = require(\"./typed.js\");\nclass LogDescription {\n  fragment;\n  name;\n  signature;\n  topic;\n  args;\n  constructor(fragment, topic, args) {\n    const name = fragment.name,\n      signature = fragment.format();\n    (0, index_js_3.defineProperties)(this, {\n      fragment,\n      name,\n      signature,\n      topic,\n      args\n    });\n  }\n}\nexports.LogDescription = LogDescription;\nclass TransactionDescription {\n  fragment;\n  name;\n  args;\n  signature;\n  selector;\n  value;\n  constructor(fragment, selector, args, value) {\n    const name = fragment.name,\n      signature = fragment.format();\n    (0, index_js_3.defineProperties)(this, {\n      fragment,\n      name,\n      args,\n      signature,\n      selector,\n      value\n    });\n  }\n}\nexports.TransactionDescription = TransactionDescription;\nclass ErrorDescription {\n  fragment;\n  name;\n  args;\n  signature;\n  selector;\n  constructor(fragment, selector, args) {\n    const name = fragment.name,\n      signature = fragment.format();\n    (0, index_js_3.defineProperties)(this, {\n      fragment,\n      name,\n      args,\n      signature,\n      selector\n    });\n  }\n}\nexports.ErrorDescription = ErrorDescription;\nclass Indexed {\n  hash;\n  _isIndexed;\n  static isIndexed(value) {\n    return !!(value && value._isIndexed);\n  }\n  constructor(hash) {\n    (0, index_js_3.defineProperties)(this, {\n      hash,\n      _isIndexed: true\n    });\n  }\n}\nexports.Indexed = Indexed;\n// https://docs.soliditylang.org/en/v0.8.13/control-structures.html?highlight=panic#panic-via-assert-and-error-via-require\nconst PanicReasons = {\n  \"0\": \"generic panic\",\n  \"1\": \"assert(false)\",\n  \"17\": \"arithmetic overflow\",\n  \"18\": \"division or modulo by zero\",\n  \"33\": \"enum overflow\",\n  \"34\": \"invalid encoded storage byte array accessed\",\n  \"49\": \"out-of-bounds array access; popping on an empty array\",\n  \"50\": \"out-of-bounds access of an array or bytesN\",\n  \"65\": \"out of memory\",\n  \"81\": \"uninitialized function\"\n};\nconst BuiltinErrors = {\n  \"0x08c379a0\": {\n    signature: \"Error(string)\",\n    name: \"Error\",\n    inputs: [\"string\"],\n    reason: message => {\n      return `reverted with reason string ${JSON.stringify(message)}`;\n    }\n  },\n  \"0x4e487b71\": {\n    signature: \"Panic(uint256)\",\n    name: \"Panic\",\n    inputs: [\"uint256\"],\n    reason: code => {\n      let reason = \"unknown panic code\";\n      if (code >= 0 && code <= 0xff && PanicReasons[code.toString()]) {\n        reason = PanicReasons[code.toString()];\n      }\n      return `reverted with panic code 0x${code.toString(16)} (${reason})`;\n    }\n  }\n};\n/**\n *  An Interface abstracts many of the low-level details for\n *  encoding and decoding the data on the blockchain.\n *\n *  An ABI provides information on how to encode data to send to\n *  a Contract, how to decode the results and events and how to\n *  interpret revert errors.\n *\n *  The ABI can be specified by [any supported format](InterfaceAbi).\n */\nclass Interface {\n  /**\n   *  All the Contract ABI members (i.e. methods, events, errors, etc).\n   */\n  fragments;\n  /**\n   *  The Contract constructor.\n   */\n  deploy;\n  /**\n   *  The Fallback method, if any.\n   */\n  fallback;\n  /**\n   *  If receiving ether is supported.\n   */\n  receive;\n  #errors;\n  #events;\n  #functions;\n  //    #structs: Map<string, StructFragment>;\n  #abiCoder;\n  /**\n   *  Create a new Interface for the %%fragments%%.\n   */\n  constructor(fragments) {\n    let abi = [];\n    if (typeof fragments === \"string\") {\n      abi = JSON.parse(fragments);\n    } else {\n      abi = fragments;\n    }\n    this.#functions = new Map();\n    this.#errors = new Map();\n    this.#events = new Map();\n    //        this.#structs = new Map();\n    const frags = [];\n    for (const a of abi) {\n      try {\n        frags.push(fragments_js_1.Fragment.from(a));\n      } catch (error) {\n        console.log(\"EE\", error);\n      }\n    }\n    (0, index_js_3.defineProperties)(this, {\n      fragments: Object.freeze(frags)\n    });\n    let fallback = null;\n    let receive = false;\n    this.#abiCoder = this.getAbiCoder();\n    // Add all fragments by their signature\n    this.fragments.forEach((fragment, index) => {\n      let bucket;\n      switch (fragment.type) {\n        case \"constructor\":\n          if (this.deploy) {\n            console.log(\"duplicate definition - constructor\");\n            return;\n          }\n          //checkNames(fragment, \"input\", fragment.inputs);\n          (0, index_js_3.defineProperties)(this, {\n            deploy: fragment\n          });\n          return;\n        case \"fallback\":\n          if (fragment.inputs.length === 0) {\n            receive = true;\n          } else {\n            (0, index_js_3.assertArgument)(!fallback || fragment.payable !== fallback.payable, \"conflicting fallback fragments\", `fragments[${index}]`, fragment);\n            fallback = fragment;\n            receive = fallback.payable;\n          }\n          return;\n        case \"function\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n          bucket = this.#functions;\n          break;\n        case \"event\":\n          //checkNames(fragment, \"input\", fragment.inputs);\n          bucket = this.#events;\n          break;\n        case \"error\":\n          bucket = this.#errors;\n          break;\n        default:\n          return;\n      }\n      // Two identical entries; ignore it\n      const signature = fragment.format();\n      if (bucket.has(signature)) {\n        return;\n      }\n      bucket.set(signature, fragment);\n    });\n    // If we do not have a constructor add a default\n    if (!this.deploy) {\n      (0, index_js_3.defineProperties)(this, {\n        deploy: fragments_js_1.ConstructorFragment.from(\"constructor()\")\n      });\n    }\n    (0, index_js_3.defineProperties)(this, {\n      fallback,\n      receive\n    });\n  }\n  /**\n   *  Returns the entire Human-Readable ABI, as an array of\n   *  signatures, optionally as %%minimal%% strings, which\n   *  removes parameter names and unneceesary spaces.\n   */\n  format(minimal) {\n    const format = minimal ? \"minimal\" : \"full\";\n    const abi = this.fragments.map(f => f.format(format));\n    return abi;\n  }\n  /**\n   *  Return the JSON-encoded ABI. This is the format Solidiy\n   *  returns.\n   */\n  formatJson() {\n    const abi = this.fragments.map(f => f.format(\"json\"));\n    // We need to re-bundle the JSON fragments a bit\n    return JSON.stringify(abi.map(j => JSON.parse(j)));\n  }\n  /**\n   *  The ABI coder that will be used to encode and decode binary\n   *  data.\n   */\n  getAbiCoder() {\n    return abi_coder_js_1.AbiCoder.defaultAbiCoder();\n  }\n  // Find a function definition by any means necessary (unless it is ambiguous)\n  #getFunction(key, values, forceUnique) {\n    // Selector\n    if ((0, index_js_3.isHexString)(key)) {\n      const selector = key.toLowerCase();\n      for (const fragment of this.#functions.values()) {\n        if (selector === fragment.selector) {\n          return fragment;\n        }\n      }\n      return null;\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (key.indexOf(\"(\") === -1) {\n      const matching = [];\n      for (const [name, fragment] of this.#functions) {\n        if (name.split(\"(\" /* fix:) */)[0] === key) {\n          matching.push(fragment);\n        }\n      }\n      if (values) {\n        const lastValue = values.length > 0 ? values[values.length - 1] : null;\n        let valueLength = values.length;\n        let allowOptions = true;\n        if (typed_js_1.Typed.isTyped(lastValue) && lastValue.type === \"overrides\") {\n          allowOptions = false;\n          valueLength--;\n        }\n        // Remove all matches that don't have a compatible length. The args\n        // may contain an overrides, so the match may have n or n - 1 parameters\n        for (let i = matching.length - 1; i >= 0; i--) {\n          const inputs = matching[i].inputs.length;\n          if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {\n            matching.splice(i, 1);\n          }\n        }\n        // Remove all matches that don't match the Typed signature\n        for (let i = matching.length - 1; i >= 0; i--) {\n          const inputs = matching[i].inputs;\n          for (let j = 0; j < values.length; j++) {\n            // Not a typed value\n            if (!typed_js_1.Typed.isTyped(values[j])) {\n              continue;\n            }\n            // We are past the inputs\n            if (j >= inputs.length) {\n              if (values[j].type === \"overrides\") {\n                continue;\n              }\n              matching.splice(i, 1);\n              break;\n            }\n            // Make sure the value type matches the input type\n            if (values[j].type !== inputs[j].baseType) {\n              matching.splice(i, 1);\n              break;\n            }\n          }\n        }\n      }\n      // We found a single matching signature with an overrides, but the\n      // last value is something that cannot possibly be an options\n      if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {\n        const lastArg = values[values.length - 1];\n        if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== \"object\") {\n          matching.splice(0, 1);\n        }\n      }\n      if (matching.length === 0) {\n        return null;\n      }\n      if (matching.length > 1 && forceUnique) {\n        const matchStr = matching.map(m => JSON.stringify(m.format())).join(\", \");\n        (0, index_js_3.assertArgument)(false, `ambiguous function description (i.e. matches ${matchStr})`, \"key\", key);\n      }\n      return matching[0];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.#functions.get(fragments_js_1.FunctionFragment.from(key).format());\n    if (result) {\n      return result;\n    }\n    return null;\n  }\n  /**\n   *  Get the function name for %%key%%, which may be a function selector,\n   *  function name or function signature that belongs to the ABI.\n   */\n  getFunctionName(key) {\n    const fragment = this.#getFunction(key, null, false);\n    (0, index_js_3.assertArgument)(fragment, \"no matching function\", \"key\", key);\n    return fragment.name;\n  }\n  /**\n   *  Get the [[FunctionFragment]] for %%key%%, which may be a function\n   *  selector, function name or function signature that belongs to the ABI.\n   *\n   *  If %%values%% is provided, it will use the Typed API to handle\n   *  ambiguous cases where multiple functions match by name.\n   *\n   *  If the %%key%% and %%values%% do not refine to a single function in\n   *  the ABI, this will throw.\n   */\n  getFunction(key, values) {\n    return this.#getFunction(key, values || null, true);\n  }\n  /**\n   *  Iterate over all functions, calling %%callback%%, sorted by their name.\n   */\n  forEachFunction(callback) {\n    const names = Array.from(this.#functions.keys());\n    names.sort((a, b) => a.localeCompare(b));\n    for (let i = 0; i < names.length; i++) {\n      const name = names[i];\n      callback(this.#functions.get(name), i);\n    }\n  }\n  // Find an event definition by any means necessary (unless it is ambiguous)\n  #getEvent(key, values, forceUnique) {\n    // EventTopic\n    if ((0, index_js_3.isHexString)(key)) {\n      const eventTopic = key.toLowerCase();\n      for (const fragment of this.#events.values()) {\n        if (eventTopic === fragment.topicHash) {\n          return fragment;\n        }\n      }\n      return null;\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (key.indexOf(\"(\") === -1) {\n      const matching = [];\n      for (const [name, fragment] of this.#events) {\n        if (name.split(\"(\" /* fix:) */)[0] === key) {\n          matching.push(fragment);\n        }\n      }\n      if (values) {\n        // Remove all matches that don't have a compatible length.\n        for (let i = matching.length - 1; i >= 0; i--) {\n          if (matching[i].inputs.length < values.length) {\n            matching.splice(i, 1);\n          }\n        }\n        // Remove all matches that don't match the Typed signature\n        for (let i = matching.length - 1; i >= 0; i--) {\n          const inputs = matching[i].inputs;\n          for (let j = 0; j < values.length; j++) {\n            // Not a typed value\n            if (!typed_js_1.Typed.isTyped(values[j])) {\n              continue;\n            }\n            // Make sure the value type matches the input type\n            if (values[j].type !== inputs[j].baseType) {\n              matching.splice(i, 1);\n              break;\n            }\n          }\n        }\n      }\n      if (matching.length === 0) {\n        return null;\n      }\n      if (matching.length > 1 && forceUnique) {\n        const matchStr = matching.map(m => JSON.stringify(m.format())).join(\", \");\n        (0, index_js_3.assertArgument)(false, `ambiguous event description (i.e. matches ${matchStr})`, \"key\", key);\n      }\n      return matching[0];\n    }\n    // Normalize the signature and lookup the function\n    const result = this.#events.get(fragments_js_1.EventFragment.from(key).format());\n    if (result) {\n      return result;\n    }\n    return null;\n  }\n  /**\n   *  Get the event name for %%key%%, which may be a topic hash,\n   *  event name or event signature that belongs to the ABI.\n   */\n  getEventName(key) {\n    const fragment = this.#getEvent(key, null, false);\n    (0, index_js_3.assertArgument)(fragment, \"no matching event\", \"key\", key);\n    return fragment.name;\n  }\n  /**\n   *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,\n   *  event name or event signature that belongs to the ABI.\n   *\n   *  If %%values%% is provided, it will use the Typed API to handle\n   *  ambiguous cases where multiple events match by name.\n   *\n   *  If the %%key%% and %%values%% do not refine to a single event in\n   *  the ABI, this will throw.\n   */\n  getEvent(key, values) {\n    return this.#getEvent(key, values || null, true);\n  }\n  /**\n   *  Iterate over all events, calling %%callback%%, sorted by their name.\n   */\n  forEachEvent(callback) {\n    const names = Array.from(this.#events.keys());\n    names.sort((a, b) => a.localeCompare(b));\n    for (let i = 0; i < names.length; i++) {\n      const name = names[i];\n      callback(this.#events.get(name), i);\n    }\n  }\n  /**\n   *  Get the [[ErrorFragment]] for %%key%%, which may be an error\n   *  selector, error name or error signature that belongs to the ABI.\n   *\n   *  If %%values%% is provided, it will use the Typed API to handle\n   *  ambiguous cases where multiple errors match by name.\n   *\n   *  If the %%key%% and %%values%% do not refine to a single error in\n   *  the ABI, this will throw.\n   */\n  getError(key, values) {\n    if ((0, index_js_3.isHexString)(key)) {\n      const selector = key.toLowerCase();\n      if (BuiltinErrors[selector]) {\n        return fragments_js_1.ErrorFragment.from(BuiltinErrors[selector].signature);\n      }\n      for (const fragment of this.#errors.values()) {\n        if (selector === fragment.selector) {\n          return fragment;\n        }\n      }\n      return null;\n    }\n    // It is a bare name, look up the function (will return null if ambiguous)\n    if (key.indexOf(\"(\") === -1) {\n      const matching = [];\n      for (const [name, fragment] of this.#errors) {\n        if (name.split(\"(\" /* fix:) */)[0] === key) {\n          matching.push(fragment);\n        }\n      }\n      if (matching.length === 0) {\n        if (key === \"Error\") {\n          return fragments_js_1.ErrorFragment.from(\"error Error(string)\");\n        }\n        if (key === \"Panic\") {\n          return fragments_js_1.ErrorFragment.from(\"error Panic(uint256)\");\n        }\n        return null;\n      } else if (matching.length > 1) {\n        const matchStr = matching.map(m => JSON.stringify(m.format())).join(\", \");\n        (0, index_js_3.assertArgument)(false, `ambiguous error description (i.e. ${matchStr})`, \"name\", key);\n      }\n      return matching[0];\n    }\n    // Normalize the signature and lookup the function\n    key = fragments_js_1.ErrorFragment.from(key).format();\n    if (key === \"Error(string)\") {\n      return fragments_js_1.ErrorFragment.from(\"error Error(string)\");\n    }\n    if (key === \"Panic(uint256)\") {\n      return fragments_js_1.ErrorFragment.from(\"error Panic(uint256)\");\n    }\n    const result = this.#errors.get(key);\n    if (result) {\n      return result;\n    }\n    return null;\n  }\n  /**\n   *  Iterate over all errors, calling %%callback%%, sorted by their name.\n   */\n  forEachError(callback) {\n    const names = Array.from(this.#errors.keys());\n    names.sort((a, b) => a.localeCompare(b));\n    for (let i = 0; i < names.length; i++) {\n      const name = names[i];\n      callback(this.#errors.get(name), i);\n    }\n  }\n  // Get the 4-byte selector used by Solidity to identify a function\n  /*\n  getSelector(fragment: ErrorFragment | FunctionFragment): string {\n  if (typeof(fragment) === \"string\") {\n      const matches: Array<Fragment> = [ ];\n       try { matches.push(this.getFunction(fragment)); } catch (error) { }\n      try { matches.push(this.getError(<string>fragment)); } catch (_) { }\n       if (matches.length === 0) {\n          logger.throwArgumentError(\"unknown fragment\", \"key\", fragment);\n      } else if (matches.length > 1) {\n          logger.throwArgumentError(\"ambiguous fragment matches function and error\", \"key\", fragment);\n      }\n       fragment = matches[0];\n  }\n   return dataSlice(id(fragment.format()), 0, 4);\n  }\n  */\n  // Get the 32-byte topic hash used by Solidity to identify an event\n  /*\n  getEventTopic(fragment: EventFragment): string {\n      //if (typeof(fragment) === \"string\") { fragment = this.getEvent(eventFragment); }\n      return id(fragment.format());\n  }\n  */\n  _decodeParams(params, data) {\n    return this.#abiCoder.decode(params, data);\n  }\n  _encodeParams(params, values) {\n    return this.#abiCoder.encode(params, values);\n  }\n  /**\n   *  Encodes a ``tx.data`` object for deploying the Contract with\n   *  the %%values%% as the constructor arguments.\n   */\n  encodeDeploy(values) {\n    return this._encodeParams(this.deploy.inputs, values || []);\n  }\n  /**\n   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n   *  specified error (see [[getError]] for valid values for\n   *  %%key%%).\n   *\n   *  Most developers should prefer the [[parseCallResult]] method instead,\n   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n   *  corresponding error.\n   */\n  decodeErrorResult(fragment, data) {\n    if (typeof fragment === \"string\") {\n      const f = this.getError(fragment);\n      (0, index_js_3.assertArgument)(f, \"unknown error\", \"fragment\", fragment);\n      fragment = f;\n    }\n    (0, index_js_3.assertArgument)((0, index_js_3.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, \"data\", data);\n    return this._decodeParams(fragment.inputs, (0, index_js_3.dataSlice)(data, 4));\n  }\n  /**\n   *  Encodes the transaction revert data for a call result that\n   *  reverted from the the Contract with the sepcified %%error%%\n   *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.\n   *\n   *  This is generally not used by most developers, unless trying to mock\n   *  a result from a Contract.\n   */\n  encodeErrorResult(fragment, values) {\n    if (typeof fragment === \"string\") {\n      const f = this.getError(fragment);\n      (0, index_js_3.assertArgument)(f, \"unknown error\", \"fragment\", fragment);\n      fragment = f;\n    }\n    return (0, index_js_3.concat)([fragment.selector, this._encodeParams(fragment.inputs, values || [])]);\n  }\n  /**\n   *  Decodes the %%data%% from a transaction ``tx.data`` for\n   *  the function specified (see [[getFunction]] for valid values\n   *  for %%fragment%%).\n   *\n   *  Most developers should prefer the [[parseTransaction]] method\n   *  instead, which will automatically detect the fragment.\n   */\n  decodeFunctionData(fragment, data) {\n    if (typeof fragment === \"string\") {\n      const f = this.getFunction(fragment);\n      (0, index_js_3.assertArgument)(f, \"unknown function\", \"fragment\", fragment);\n      fragment = f;\n    }\n    (0, index_js_3.assertArgument)((0, index_js_3.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, \"data\", data);\n    return this._decodeParams(fragment.inputs, (0, index_js_3.dataSlice)(data, 4));\n  }\n  /**\n   *  Encodes the ``tx.data`` for a transaction that calls the function\n   *  specified (see [[getFunction]] for valid values for %%fragment%%) with\n   *  the %%values%%.\n   */\n  encodeFunctionData(fragment, values) {\n    if (typeof fragment === \"string\") {\n      const f = this.getFunction(fragment);\n      (0, index_js_3.assertArgument)(f, \"unknown function\", \"fragment\", fragment);\n      fragment = f;\n    }\n    return (0, index_js_3.concat)([fragment.selector, this._encodeParams(fragment.inputs, values || [])]);\n  }\n  /**\n   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n   *  specified function (see [[getFunction]] for valid values for\n   *  %%key%%).\n   *\n   *  Most developers should prefer the [[parseCallResult]] method instead,\n   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n   *  corresponding error.\n   */\n  decodeFunctionResult(fragment, data) {\n    if (typeof fragment === \"string\") {\n      const f = this.getFunction(fragment);\n      (0, index_js_3.assertArgument)(f, \"unknown function\", \"fragment\", fragment);\n      fragment = f;\n    }\n    let message = \"invalid length for result data\";\n    const bytes = (0, index_js_3.getBytesCopy)(data);\n    if (bytes.length % 32 === 0) {\n      try {\n        return this.#abiCoder.decode(fragment.outputs, bytes);\n      } catch (error) {\n        message = \"could not decode result data\";\n      }\n    }\n    // Call returned data with no error, but the data is junk\n    (0, index_js_3.assert)(false, message, \"BAD_DATA\", {\n      value: (0, index_js_3.hexlify)(bytes),\n      info: {\n        method: fragment.name,\n        signature: fragment.format()\n      }\n    });\n  }\n  makeError(_data, tx) {\n    const data = (0, index_js_3.getBytes)(_data, \"data\");\n    const error = abi_coder_js_1.AbiCoder.getBuiltinCallException(\"call\", tx, data);\n    // Not a built-in error; try finding a custom error\n    const customPrefix = \"execution reverted (unknown custom error)\";\n    if (error.message.startsWith(customPrefix)) {\n      const selector = (0, index_js_3.hexlify)(data.slice(0, 4));\n      const ef = this.getError(selector);\n      if (ef) {\n        try {\n          const args = this.#abiCoder.decode(ef.inputs, data.slice(4));\n          error.revert = {\n            name: ef.name,\n            signature: ef.format(),\n            args\n          };\n          error.reason = error.revert.signature;\n          error.message = `execution reverted: ${error.reason}`;\n        } catch (e) {\n          error.message = `execution reverted (coult not decode custom error)`;\n        }\n      }\n    }\n    // Add the invocation, if available\n    const parsed = this.parseTransaction(tx);\n    if (parsed) {\n      error.invocation = {\n        method: parsed.name,\n        signature: parsed.signature,\n        args: parsed.args\n      };\n    }\n    return error;\n  }\n  /**\n   *  Encodes the result data (e.g. from an ``eth_call``) for the\n   *  specified function (see [[getFunction]] for valid values\n   *  for %%fragment%%) with %%values%%.\n   *\n   *  This is generally not used by most developers, unless trying to mock\n   *  a result from a Contract.\n   */\n  encodeFunctionResult(fragment, values) {\n    if (typeof fragment === \"string\") {\n      const f = this.getFunction(fragment);\n      (0, index_js_3.assertArgument)(f, \"unknown function\", \"fragment\", fragment);\n      fragment = f;\n    }\n    return (0, index_js_3.hexlify)(this.#abiCoder.encode(fragment.outputs, values || []));\n  }\n  /*\n      spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {\n          const promises: Array<Promise<>> = [ ];\n          const process = function(type: ParamType, value: any): any {\n              if (type.baseType === \"array\") {\n                  return descend(type.child\n              }\n              if (type. === \"address\") {\n              }\n          };\n  \n          const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {\n              if (inputs.length !== values.length) { throw new Error(\"length mismatch\"); }\n              \n          };\n  \n          const result: Array<any> = [ ];\n          values.forEach((value, index) => {\n              if (value == null) {\n                  topics.push(null);\n              } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                  logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n              } else if (Array.isArray(value)) {\n                  topics.push(value.map((value) => encodeTopic(param, value)));\n              } else {\n                  topics.push(encodeTopic(param, value));\n              }\n          });\n      }\n  */\n  // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n  encodeFilterTopics(fragment, values) {\n    if (typeof fragment === \"string\") {\n      const f = this.getEvent(fragment);\n      (0, index_js_3.assertArgument)(f, \"unknown event\", \"eventFragment\", fragment);\n      fragment = f;\n    }\n    (0, index_js_3.assert)(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, \"UNEXPECTED_ARGUMENT\", {\n      count: values.length,\n      expectedCount: fragment.inputs.length\n    });\n    const topics = [];\n    if (!fragment.anonymous) {\n      topics.push(fragment.topicHash);\n    }\n    // @TODO: Use the coders for this; to properly support tuples, etc.\n    const encodeTopic = (param, value) => {\n      if (param.type === \"string\") {\n        return (0, index_js_2.id)(value);\n      } else if (param.type === \"bytes\") {\n        return (0, index_js_1.keccak256)((0, index_js_3.hexlify)(value));\n      }\n      if (param.type === \"bool\" && typeof value === \"boolean\") {\n        value = value ? \"0x01\" : \"0x00\";\n      }\n      if (param.type.match(/^u?int/)) {\n        value = (0, index_js_3.toBeHex)(value);\n      }\n      // Check addresses are valid\n      if (param.type === \"address\") {\n        this.#abiCoder.encode([\"address\"], [value]);\n      }\n      return (0, index_js_3.zeroPadValue)((0, index_js_3.hexlify)(value), 32);\n      //@TOOD should probably be return toHex(value, 32)\n    };\n\n    values.forEach((value, index) => {\n      const param = fragment.inputs[index];\n      if (!param.indexed) {\n        (0, index_js_3.assertArgument)(value == null, \"cannot filter non-indexed parameters; must be null\", \"contract.\" + param.name, value);\n        return;\n      }\n      if (value == null) {\n        topics.push(null);\n      } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n        (0, index_js_3.assertArgument)(false, \"filtering with tuples or arrays not supported\", \"contract.\" + param.name, value);\n      } else if (Array.isArray(value)) {\n        topics.push(value.map(value => encodeTopic(param, value)));\n      } else {\n        topics.push(encodeTopic(param, value));\n      }\n    });\n    // Trim off trailing nulls\n    while (topics.length && topics[topics.length - 1] === null) {\n      topics.pop();\n    }\n    return topics;\n  }\n  encodeEventLog(fragment, values) {\n    if (typeof fragment === \"string\") {\n      const f = this.getEvent(fragment);\n      (0, index_js_3.assertArgument)(f, \"unknown event\", \"eventFragment\", fragment);\n      fragment = f;\n    }\n    const topics = [];\n    const dataTypes = [];\n    const dataValues = [];\n    if (!fragment.anonymous) {\n      topics.push(fragment.topicHash);\n    }\n    (0, index_js_3.assertArgument)(values.length === fragment.inputs.length, \"event arguments/values mismatch\", \"values\", values);\n    fragment.inputs.forEach((param, index) => {\n      const value = values[index];\n      if (param.indexed) {\n        if (param.type === \"string\") {\n          topics.push((0, index_js_2.id)(value));\n        } else if (param.type === \"bytes\") {\n          topics.push((0, index_js_1.keccak256)(value));\n        } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n          // @TODO\n          throw new Error(\"not implemented\");\n        } else {\n          topics.push(this.#abiCoder.encode([param.type], [value]));\n        }\n      } else {\n        dataTypes.push(param);\n        dataValues.push(value);\n      }\n    });\n    return {\n      data: this.#abiCoder.encode(dataTypes, dataValues),\n      topics: topics\n    };\n  }\n  // Decode a filter for the event and the search criteria\n  decodeEventLog(fragment, data, topics) {\n    if (typeof fragment === \"string\") {\n      const f = this.getEvent(fragment);\n      (0, index_js_3.assertArgument)(f, \"unknown event\", \"eventFragment\", fragment);\n      fragment = f;\n    }\n    if (topics != null && !fragment.anonymous) {\n      const eventTopic = fragment.topicHash;\n      (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(topics[0], 32) && topics[0].toLowerCase() === eventTopic, \"fragment/topic mismatch\", \"topics[0]\", topics[0]);\n      topics = topics.slice(1);\n    }\n    const indexed = [];\n    const nonIndexed = [];\n    const dynamic = [];\n    fragment.inputs.forEach((param, index) => {\n      if (param.indexed) {\n        if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n          indexed.push(fragments_js_1.ParamType.from({\n            type: \"bytes32\",\n            name: param.name\n          }));\n          dynamic.push(true);\n        } else {\n          indexed.push(param);\n          dynamic.push(false);\n        }\n      } else {\n        nonIndexed.push(param);\n        dynamic.push(false);\n      }\n    });\n    const resultIndexed = topics != null ? this.#abiCoder.decode(indexed, (0, index_js_3.concat)(topics)) : null;\n    const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);\n    //const result: (Array<any> & { [ key: string ]: any }) = [ ];\n    const values = [];\n    const keys = [];\n    let nonIndexedIndex = 0,\n      indexedIndex = 0;\n    fragment.inputs.forEach((param, index) => {\n      let value = null;\n      if (param.indexed) {\n        if (resultIndexed == null) {\n          value = new Indexed(null);\n        } else if (dynamic[index]) {\n          value = new Indexed(resultIndexed[indexedIndex++]);\n        } else {\n          try {\n            value = resultIndexed[indexedIndex++];\n          } catch (error) {\n            value = error;\n          }\n        }\n      } else {\n        try {\n          value = resultNonIndexed[nonIndexedIndex++];\n        } catch (error) {\n          value = error;\n        }\n      }\n      values.push(value);\n      keys.push(param.name || null);\n    });\n    return abstract_coder_js_1.Result.fromItems(values, keys);\n  }\n  /**\n   *  Parses a transaction, finding the matching function and extracts\n   *  the parameter values along with other useful function details.\n   *\n   *  If the matching function cannot be found, return null.\n   */\n  parseTransaction(tx) {\n    const data = (0, index_js_3.getBytes)(tx.data, \"tx.data\");\n    const value = (0, index_js_3.getBigInt)(tx.value != null ? tx.value : 0, \"tx.value\");\n    const fragment = this.getFunction((0, index_js_3.hexlify)(data.slice(0, 4)));\n    if (!fragment) {\n      return null;\n    }\n    const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));\n    return new TransactionDescription(fragment, fragment.selector, args, value);\n  }\n  parseCallResult(data) {\n    throw new Error(\"@TODO\");\n  }\n  /**\n   *  Parses a receipt log, finding the matching event and extracts\n   *  the parameter values along with other useful event details.\n   *\n   *  If the matching event cannot be found, returns null.\n   */\n  parseLog(log) {\n    const fragment = this.getEvent(log.topics[0]);\n    if (!fragment || fragment.anonymous) {\n      return null;\n    }\n    // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n    //        Probably not, because just because it is the only event in the ABI does\n    //        not mean we have the full ABI; maybe just a fragment?\n    return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));\n  }\n  /**\n   *  Parses a revert data, finding the matching error and extracts\n   *  the parameter values along with other useful error details.\n   *\n   *  If the matching event cannot be found, returns null.\n   */\n  parseError(data) {\n    const hexData = (0, index_js_3.hexlify)(data);\n    const fragment = this.getError((0, index_js_3.dataSlice)(hexData, 0, 4));\n    if (!fragment) {\n      return null;\n    }\n    const args = this.#abiCoder.decode(fragment.inputs, (0, index_js_3.dataSlice)(hexData, 4));\n    return new ErrorDescription(fragment, fragment.selector, args);\n  }\n  /**\n   *  Creates a new [[Interface]] from the ABI %%value%%.\n   *\n   *  The %%value%% may be provided as an existing [[Interface]] object,\n   *  a JSON-encoded ABI or any Human-Readable ABI format.\n   */\n  static from(value) {\n    // Already an Interface, which is immutable\n    if (value instanceof Interface) {\n      return value;\n    }\n    // JSON\n    if (typeof value === \"string\") {\n      return new Interface(JSON.parse(value));\n    }\n    // Maybe an interface from an older version, or from a symlinked copy\n    if (typeof value.format === \"function\") {\n      return new Interface(value.format(\"json\"));\n    }\n    // Array of fragments\n    return new Interface(value);\n  }\n}\nexports.Interface = Interface;","map":{"version":3,"mappings":";;AAAA;;;;;;;;;AAMA;AACA;AACA;AAMA;AACA;AAYSA;EAAAC;EAAAC;IAAA,OAZAC,qCAAiB;EAAA;AAAA;AAYEH;EAAAC;EAAAC;IAAA,OAZAC,0BAAM;EAAA;AAAA;AAClC;AAIA;AASA,MAAaC,cAAc;EACdC,QAAQ;EACRC,IAAI;EACJC,SAAS;EACTC,KAAK;EACLC,IAAI;EAEbC,YAAYL,QAAuB,EAAEG,KAAa,EAAEC,IAAY;IAC5D,MAAMH,IAAI,GAAGD,QAAQ,CAACC,IAAI;MAAEC,SAAS,GAAGF,QAAQ,CAACM,MAAM,EAAE;IACzD,+BAAgB,EAAiB,IAAI,EAAE;MACnCN,QAAQ;MAAEC,IAAI;MAAEC,SAAS;MAAEC,KAAK;MAAEC;KACrC,CAAC;EACN;;AAZJG;AAeA,MAAaC,sBAAsB;EACtBR,QAAQ;EACRC,IAAI;EACJG,IAAI;EACJF,SAAS;EACTO,QAAQ;EACRC,KAAK;EAEdL,YAAYL,QAA0B,EAAES,QAAgB,EAAEL,IAAY,EAAEM,KAAa;IACjF,MAAMT,IAAI,GAAGD,QAAQ,CAACC,IAAI;MAAEC,SAAS,GAAGF,QAAQ,CAACM,MAAM,EAAE;IACzD,+BAAgB,EAAyB,IAAI,EAAE;MAC3CN,QAAQ;MAAEC,IAAI;MAAEG,IAAI;MAAEF,SAAS;MAAEO,QAAQ;MAAEC;KAC9C,CAAC;EACN;;AAbJH;AAgBA,MAAaI,gBAAgB;EAChBX,QAAQ;EACRC,IAAI;EACJG,IAAI;EACJF,SAAS;EACTO,QAAQ;EAEjBJ,YAAYL,QAAuB,EAAES,QAAgB,EAAEL,IAAY;IAC/D,MAAMH,IAAI,GAAGD,QAAQ,CAACC,IAAI;MAAEC,SAAS,GAAGF,QAAQ,CAACM,MAAM,EAAE;IACzD,+BAAgB,EAAmB,IAAI,EAAE;MACrCN,QAAQ;MAAEC,IAAI;MAAEG,IAAI;MAAEF,SAAS;MAAEO;KACpC,CAAC;EACN;;AAZJF;AAeA,MAAaK,OAAO;EACPC,IAAI;EACJC,UAAU;EAEnB,OAAOC,SAAS,CAACL,KAAU;IACvB,OAAO,CAAC,EAAEA,KAAK,IAAIA,KAAK,CAACI,UAAU,CAAC;EACxC;EAEAT,YAAYQ,IAAmB;IAC3B,+BAAgB,EAAU,IAAI,EAAE;MAAEA,IAAI;MAAEC,UAAU,EAAE;IAAI,CAAE,CAAC;EAC/D;;AAVJP;AAoBA;AACA,MAAMS,YAAY,GAA2B;EACzC,GAAG,EAAE,eAAe;EACpB,GAAG,EAAE,eAAe;EACpB,IAAI,EAAE,qBAAqB;EAC3B,IAAI,EAAE,4BAA4B;EAClC,IAAI,EAAE,eAAe;EACrB,IAAI,EAAE,6CAA6C;EACnD,IAAI,EAAE,uDAAuD;EAC7D,IAAI,EAAE,4CAA4C;EAClD,IAAI,EAAE,eAAe;EACrB,IAAI,EAAE;CACT;AAED,MAAMC,aAAa,GAA8B;EAC7C,YAAY,EAAE;IACVf,SAAS,EAAE,eAAe;IAC1BD,IAAI,EAAE,OAAO;IACbiB,MAAM,EAAE,CAAE,QAAQ,CAAE;IACpBC,MAAM,EAAGC,OAAe,IAAI;MACxB,OAAO,+BAAgCC,IAAI,CAACC,SAAS,CAACF,OAAO,CAAE,EAAE;IACrE;GACH;EACD,YAAY,EAAE;IACVlB,SAAS,EAAE,gBAAgB;IAC3BD,IAAI,EAAE,OAAO;IACbiB,MAAM,EAAE,CAAE,SAAS,CAAE;IACrBC,MAAM,EAAGI,IAAY,IAAI;MACrB,IAAIJ,MAAM,GAAG,oBAAoB;MACjC,IAAII,IAAI,IAAI,CAAC,IAAIA,IAAI,IAAI,IAAI,IAAIP,YAAY,CAACO,IAAI,CAACC,QAAQ,EAAE,CAAC,EAAE;QAC5DL,MAAM,GAAGH,YAAY,CAACO,IAAI,CAACC,QAAQ,EAAE,CAAC;;MAE1C,OAAO,8BAA+BD,IAAI,CAACC,QAAQ,CAAC,EAAE,CAAE,KAAML,MAAO,GAAG;IAC5E;;CAEP;AA4BD;;;;;;;;;;AAUA,MAAaM,SAAS;EAElB;;;EAGSC,SAAS;EAElB;;;EAGSC,MAAM;EAEf;;;EAGSC,QAAQ;EAEjB;;;EAGSC,OAAO;EAEhB,OAAO;EACP,OAAO;EACP,UAAU;EACd;EAEI,SAAS;EAET;;;EAGAxB,YAAYqB,SAAuB;IAC/B,IAAII,GAAG,GAAoD,EAAG;IAC9D,IAAI,OAAOJ,SAAU,KAAK,QAAQ,EAAE;MAChCI,GAAG,GAAGT,IAAI,CAACU,KAAK,CAACL,SAAS,CAAC;KAC9B,MAAM;MACHI,GAAG,GAAGJ,SAAS;;IAGnB,IAAI,CAAC,UAAU,GAAG,IAAIM,GAAG,EAAE;IAC3B,IAAI,CAAC,OAAO,GAAG,IAAIA,GAAG,EAAE;IACxB,IAAI,CAAC,OAAO,GAAG,IAAIA,GAAG,EAAE;IAChC;IAGQ,MAAMC,KAAK,GAAoB,EAAG;IAClC,KAAK,MAAMC,CAAC,IAAIJ,GAAG,EAAE;MACjB,IAAI;QACAG,KAAK,CAACE,IAAI,CAACC,uBAAQ,CAACC,IAAI,CAACH,CAAC,CAAC,CAAC;OAC/B,CAAC,OAAOI,KAAK,EAAE;QACZC,OAAO,CAACC,GAAG,CAAC,IAAI,EAAEF,KAAK,CAAC;;;IAIhC,+BAAgB,EAAY,IAAI,EAAE;MAC9BZ,SAAS,EAAE/B,MAAM,CAAC8C,MAAM,CAACR,KAAK;KACjC,CAAC;IAEF,IAAIL,QAAQ,GAA4B,IAAI;IAC5C,IAAIC,OAAO,GAAG,KAAK;IAEnB,IAAI,CAAC,SAAS,GAAG,IAAI,CAACa,WAAW,EAAE;IAEnC;IACA,IAAI,CAAChB,SAAS,CAACiB,OAAO,CAAC,CAAC3C,QAAQ,EAAE4C,KAAK,KAAI;MACvC,IAAIC,MAA6B;MACjC,QAAQ7C,QAAQ,CAAC8C,IAAI;QACjB,KAAK,aAAa;UACd,IAAI,IAAI,CAACnB,MAAM,EAAE;YACbY,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;YACjD;;UAEJ;UACA,+BAAgB,EAAY,IAAI,EAAE;YAAEb,MAAM,EAAuB3B;UAAQ,CAAE,CAAC;UAC5E;QAEJ,KAAK,UAAU;UACX,IAAIA,QAAQ,CAACkB,MAAM,CAAC6B,MAAM,KAAK,CAAC,EAAE;YAC9BlB,OAAO,GAAG,IAAI;WACjB,MAAM;YACH,6BAAc,EAAC,CAACD,QAAQ,IAAuB5B,QAAS,CAACgD,OAAO,KAAKpB,QAAQ,CAACoB,OAAO,EACjF,gCAAgC,EAAE,aAAcJ,KAAM,GAAG,EAAE5C,QAAQ,CAAC;YACxE4B,QAAQ,GAAqB5B,QAAQ;YACrC6B,OAAO,GAAGD,QAAQ,CAACoB,OAAO;;UAE9B;QAEJ,KAAK,UAAU;UACX;UACA;UACAH,MAAM,GAAG,IAAI,CAAC,UAAU;UACxB;QAEJ,KAAK,OAAO;UACR;UACAA,MAAM,GAAG,IAAI,CAAC,OAAO;UACrB;QAEJ,KAAK,OAAO;UACRA,MAAM,GAAG,IAAI,CAAC,OAAO;UACrB;QAEJ;UACI;MAAO;MAGf;MACA,MAAM3C,SAAS,GAAGF,QAAQ,CAACM,MAAM,EAAE;MACnC,IAAIuC,MAAM,CAACI,GAAG,CAAC/C,SAAS,CAAC,EAAE;QAAE;;MAE7B2C,MAAM,CAACK,GAAG,CAAChD,SAAS,EAAEF,QAAQ,CAAC;IACnC,CAAC,CAAC;IAEF;IACA,IAAI,CAAC,IAAI,CAAC2B,MAAM,EAAE;MACd,+BAAgB,EAAY,IAAI,EAAE;QAC9BA,MAAM,EAAES,kCAAmB,CAACC,IAAI,CAAC,eAAe;OACnD,CAAC;;IAGN,+BAAgB,EAAY,IAAI,EAAE;MAAET,QAAQ;MAAEC;IAAO,CAAE,CAAC;EAC5D;EAEA;;;;;EAKAvB,MAAM,CAAC6C,OAAiB;IACpB,MAAM7C,MAAM,GAAI6C,OAAO,GAAG,SAAS,GAAE,MAAO;IAC5C,MAAMrB,GAAG,GAAG,IAAI,CAACJ,SAAS,CAAC0B,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAAC/C,MAAM,CAACA,MAAM,CAAC,CAAC;IACvD,OAAOwB,GAAG;EACd;EAEA;;;;EAIAwB,UAAU;IACN,MAAMxB,GAAG,GAAG,IAAI,CAACJ,SAAS,CAAC0B,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAAC/C,MAAM,CAAC,MAAM,CAAC,CAAC;IAEvD;IACA,OAAOe,IAAI,CAACC,SAAS,CAACQ,GAAG,CAACsB,GAAG,CAAEG,CAAC,IAAKlC,IAAI,CAACU,KAAK,CAACwB,CAAC,CAAC,CAAC,CAAC;EACxD;EAEA;;;;EAIAb,WAAW;IACP,OAAOc,uBAAQ,CAACC,eAAe,EAAE;EACrC;EAEA;EACA,YAAY,CAACC,GAAW,EAAEC,MAAiC,EAAEC,WAAoB;IAE7E;IACA,IAAI,0BAAW,EAACF,GAAG,CAAC,EAAE;MAClB,MAAMjD,QAAQ,GAAGiD,GAAG,CAACG,WAAW,EAAE;MAClC,KAAK,MAAM7D,QAAQ,IAAI,IAAI,CAAC,UAAU,CAAC2D,MAAM,EAAE,EAAE;QAC7C,IAAIlD,QAAQ,KAAKT,QAAQ,CAACS,QAAQ,EAAE;UAAE,OAAOT,QAAQ;;;MAEzD,OAAO,IAAI;;IAGf;IACA,IAAI0D,GAAG,CAACI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MACzB,MAAMC,QAAQ,GAA4B,EAAG;MAC7C,KAAK,MAAM,CAAE9D,IAAI,EAAED,QAAQ,CAAE,IAAI,IAAI,CAAC,UAAU,EAAE;QAC9C,IAAIC,IAAI,CAAC+D,KAAK,CAAC,GAAG,aAAY,CAAC,CAAC,CAAC,KAAKN,GAAG,EAAE;UAAEK,QAAQ,CAAC5B,IAAI,CAACnC,QAAQ,CAAC;;;MAGxE,IAAI2D,MAAM,EAAE;QACR,MAAMM,SAAS,GAAIN,MAAM,CAACZ,MAAM,GAAG,CAAC,GAAIY,MAAM,CAACA,MAAM,CAACZ,MAAM,GAAG,CAAC,CAAC,GAAE,IAAI;QAEvE,IAAImB,WAAW,GAAGP,MAAM,CAACZ,MAAM;QAC/B,IAAIoB,YAAY,GAAG,IAAI;QACvB,IAAIC,gBAAK,CAACC,OAAO,CAACJ,SAAS,CAAC,IAAIA,SAAS,CAACnB,IAAI,KAAK,WAAW,EAAE;UAC5DqB,YAAY,GAAG,KAAK;UACpBD,WAAW,EAAE;;QAGjB;QACA;QACA,KAAK,IAAII,CAAC,GAAGP,QAAQ,CAAChB,MAAM,GAAG,CAAC,EAAEuB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC3C,MAAMpD,MAAM,GAAG6C,QAAQ,CAACO,CAAC,CAAC,CAACpD,MAAM,CAAC6B,MAAM;UACxC,IAAI7B,MAAM,KAAKgD,WAAW,KAAK,CAACC,YAAY,IAAIjD,MAAM,KAAKgD,WAAW,GAAG,CAAC,CAAC,EAAE;YACzEH,QAAQ,CAACQ,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;;;QAI7B;QACA,KAAK,IAAIA,CAAC,GAAGP,QAAQ,CAAChB,MAAM,GAAG,CAAC,EAAEuB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC3C,MAAMpD,MAAM,GAAG6C,QAAQ,CAACO,CAAC,CAAC,CAACpD,MAAM;UACjC,KAAK,IAAIqC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,MAAM,CAACZ,MAAM,EAAEQ,CAAC,EAAE,EAAE;YACpC;YACA,IAAI,CAACa,gBAAK,CAACC,OAAO,CAACV,MAAM,CAACJ,CAAC,CAAC,CAAC,EAAE;cAAE;;YAEjC;YACA,IAAIA,CAAC,IAAIrC,MAAM,CAAC6B,MAAM,EAAE;cACpB,IAAIY,MAAM,CAACJ,CAAC,CAAC,CAACT,IAAI,KAAK,WAAW,EAAE;gBAAE;;cACtCiB,QAAQ,CAACQ,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;cACrB;;YAGJ;YACA,IAAIX,MAAM,CAACJ,CAAC,CAAC,CAACT,IAAI,KAAK5B,MAAM,CAACqC,CAAC,CAAC,CAACiB,QAAQ,EAAE;cACvCT,QAAQ,CAACQ,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;cACrB;;;;;MAMhB;MACA;MACA,IAAIP,QAAQ,CAAChB,MAAM,KAAK,CAAC,IAAIY,MAAM,IAAIA,MAAM,CAACZ,MAAM,KAAKgB,QAAQ,CAAC,CAAC,CAAC,CAAC7C,MAAM,CAAC6B,MAAM,EAAE;QAChF,MAAM0B,OAAO,GAAGd,MAAM,CAACA,MAAM,CAACZ,MAAM,GAAG,CAAC,CAAC;QACzC,IAAI0B,OAAO,IAAI,IAAI,IAAIC,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC,IAAI,OAAOA,OAAQ,KAAK,QAAQ,EAAE;UAC3EV,QAAQ,CAACQ,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC;;;MAI7B,IAAIR,QAAQ,CAAChB,MAAM,KAAK,CAAC,EAAE;QAAE,OAAO,IAAI;;MAExC,IAAIgB,QAAQ,CAAChB,MAAM,GAAG,CAAC,IAAIa,WAAW,EAAE;QACpC,MAAMgB,QAAQ,GAAGb,QAAQ,CAACX,GAAG,CAAEyB,CAAC,IAAKxD,IAAI,CAACC,SAAS,CAACuD,CAAC,CAACvE,MAAM,EAAE,CAAC,CAAC,CAACwE,IAAI,CAAC,IAAI,CAAC;QAC3E,6BAAc,EAAC,KAAK,EAAE,gDAAiDF,QAAS,GAAG,EAAE,KAAK,EAAElB,GAAG,CAAC;;MAGpG,OAAOK,QAAQ,CAAC,CAAC,CAAC;;IAGtB;IACA,MAAMgB,MAAM,GAAG,IAAI,CAAC,UAAU,CAAClF,GAAG,CAACuC,+BAAgB,CAACC,IAAI,CAACqB,GAAG,CAAC,CAACpD,MAAM,EAAE,CAAC;IACvE,IAAIyE,MAAM,EAAE;MAAE,OAAOA,MAAM;;IAE3B,OAAO,IAAI;EACf;EAEA;;;;EAIAC,eAAe,CAACtB,GAAW;IACvB,MAAM1D,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC0D,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC;IACpD,6BAAc,EAAC1D,QAAQ,EAAE,sBAAsB,EAAE,KAAK,EAAE0D,GAAG,CAAC;IAC5D,OAAO1D,QAAQ,CAACC,IAAI;EACxB;EAEA;;;;;;;;;;EAUAgF,WAAW,CAACvB,GAAW,EAAEC,MAA2B;IAChD,OAAO,IAAI,CAAC,YAAY,CAACD,GAAG,EAAEC,MAAM,IAAI,IAAI,EAAE,IAAI,CAAC;EACvD;EAEA;;;EAGAuB,eAAe,CAACC,QAAyD;IACrE,MAAMC,KAAK,GAAGV,KAAK,CAACrC,IAAI,CAAC,IAAI,CAAC,UAAU,CAACgD,IAAI,EAAE,CAAC;IAChDD,KAAK,CAACE,IAAI,CAAC,CAACpD,CAAC,EAAEqD,CAAC,KAAKrD,CAAC,CAACsD,aAAa,CAACD,CAAC,CAAC,CAAC;IACxC,KAAK,IAAIjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,KAAK,CAACrC,MAAM,EAAEuB,CAAC,EAAE,EAAE;MACnC,MAAMrE,IAAI,GAAGmF,KAAK,CAACd,CAAC,CAAC;MACrBa,QAAQ,CAAoB,IAAI,CAAC,UAAU,CAACtF,GAAG,CAACI,IAAI,CAAC,EAAGqE,CAAC,CAAC;;EAElE;EAGA;EACA,SAAS,CAACZ,GAAW,EAAEC,MAAwC,EAAEC,WAAoB;IAEjF;IACA,IAAI,0BAAW,EAACF,GAAG,CAAC,EAAE;MAClB,MAAM+B,UAAU,GAAG/B,GAAG,CAACG,WAAW,EAAE;MACpC,KAAK,MAAM7D,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC2D,MAAM,EAAE,EAAE;QAC1C,IAAI8B,UAAU,KAAKzF,QAAQ,CAAC0F,SAAS,EAAE;UAAE,OAAO1F,QAAQ;;;MAE5D,OAAO,IAAI;;IAGf;IACA,IAAI0D,GAAG,CAACI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MACzB,MAAMC,QAAQ,GAAG,EAAG;MACpB,KAAK,MAAM,CAAE9D,IAAI,EAAED,QAAQ,CAAE,IAAI,IAAI,CAAC,OAAO,EAAE;QAC3C,IAAIC,IAAI,CAAC+D,KAAK,CAAC,GAAG,aAAY,CAAC,CAAC,CAAC,KAAKN,GAAG,EAAE;UAAEK,QAAQ,CAAC5B,IAAI,CAACnC,QAAQ,CAAC;;;MAGxE,IAAI2D,MAAM,EAAE;QACR;QACA,KAAK,IAAIW,CAAC,GAAGP,QAAQ,CAAChB,MAAM,GAAG,CAAC,EAAEuB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC3C,IAAIP,QAAQ,CAACO,CAAC,CAAC,CAACpD,MAAM,CAAC6B,MAAM,GAAGY,MAAM,CAACZ,MAAM,EAAE;YAC3CgB,QAAQ,CAACQ,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;;;QAI7B;QACA,KAAK,IAAIA,CAAC,GAAGP,QAAQ,CAAChB,MAAM,GAAG,CAAC,EAAEuB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC3C,MAAMpD,MAAM,GAAG6C,QAAQ,CAACO,CAAC,CAAC,CAACpD,MAAM;UACjC,KAAK,IAAIqC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGI,MAAM,CAACZ,MAAM,EAAEQ,CAAC,EAAE,EAAE;YACpC;YACA,IAAI,CAACa,gBAAK,CAACC,OAAO,CAACV,MAAM,CAACJ,CAAC,CAAC,CAAC,EAAE;cAAE;;YAEjC;YACA,IAAII,MAAM,CAACJ,CAAC,CAAC,CAACT,IAAI,KAAK5B,MAAM,CAACqC,CAAC,CAAC,CAACiB,QAAQ,EAAE;cACvCT,QAAQ,CAACQ,MAAM,CAACD,CAAC,EAAE,CAAC,CAAC;cACrB;;;;;MAMhB,IAAIP,QAAQ,CAAChB,MAAM,KAAK,CAAC,EAAE;QAAE,OAAO,IAAI;;MAExC,IAAIgB,QAAQ,CAAChB,MAAM,GAAG,CAAC,IAAIa,WAAW,EAAE;QACpC,MAAMgB,QAAQ,GAAGb,QAAQ,CAACX,GAAG,CAAEyB,CAAC,IAAKxD,IAAI,CAACC,SAAS,CAACuD,CAAC,CAACvE,MAAM,EAAE,CAAC,CAAC,CAACwE,IAAI,CAAC,IAAI,CAAC;QAC3E,6BAAc,EAAC,KAAK,EAAE,6CAA8CF,QAAS,GAAG,EAAE,KAAK,EAAElB,GAAG,CAAC;;MAGjG,OAAOK,QAAQ,CAAC,CAAC,CAAC;;IAGtB;IACA,MAAMgB,MAAM,GAAG,IAAI,CAAC,OAAO,CAAClF,GAAG,CAACuC,4BAAa,CAACC,IAAI,CAACqB,GAAG,CAAC,CAACpD,MAAM,EAAE,CAAC;IACjE,IAAIyE,MAAM,EAAE;MAAE,OAAOA,MAAM;;IAE3B,OAAO,IAAI;EACf;EAEA;;;;EAIAY,YAAY,CAACjC,GAAW;IACpB,MAAM1D,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC0D,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC;IACjD,6BAAc,EAAC1D,QAAQ,EAAE,mBAAmB,EAAE,KAAK,EAAE0D,GAAG,CAAC;IAEzD,OAAO1D,QAAQ,CAACC,IAAI;EACxB;EAEA;;;;;;;;;;EAUA2F,QAAQ,CAAClC,GAAW,EAAEC,MAA2B;IAC7C,OAAO,IAAI,CAAC,SAAS,CAACD,GAAG,EAAEC,MAAM,IAAI,IAAI,EAAE,IAAI,CAAC;EACpD;EAEA;;;EAGAkC,YAAY,CAACV,QAAsD;IAC/D,MAAMC,KAAK,GAAGV,KAAK,CAACrC,IAAI,CAAC,IAAI,CAAC,OAAO,CAACgD,IAAI,EAAE,CAAC;IAC7CD,KAAK,CAACE,IAAI,CAAC,CAACpD,CAAC,EAAEqD,CAAC,KAAKrD,CAAC,CAACsD,aAAa,CAACD,CAAC,CAAC,CAAC;IACxC,KAAK,IAAIjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,KAAK,CAACrC,MAAM,EAAEuB,CAAC,EAAE,EAAE;MACnC,MAAMrE,IAAI,GAAGmF,KAAK,CAACd,CAAC,CAAC;MACrBa,QAAQ,CAAiB,IAAI,CAAC,OAAO,CAACtF,GAAG,CAACI,IAAI,CAAC,EAAGqE,CAAC,CAAC;;EAE5D;EAEA;;;;;;;;;;EAUAwB,QAAQ,CAACpC,GAAW,EAAEC,MAA2B;IAC7C,IAAI,0BAAW,EAACD,GAAG,CAAC,EAAE;MAClB,MAAMjD,QAAQ,GAAGiD,GAAG,CAACG,WAAW,EAAE;MAElC,IAAI5C,aAAa,CAACR,QAAQ,CAAC,EAAE;QACzB,OAAO2B,4BAAa,CAACC,IAAI,CAACpB,aAAa,CAACR,QAAQ,CAAC,CAACP,SAAS,CAAC;;MAGhE,KAAK,MAAMF,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC2D,MAAM,EAAE,EAAE;QAC1C,IAAIlD,QAAQ,KAAKT,QAAQ,CAACS,QAAQ,EAAE;UAAE,OAAOT,QAAQ;;;MAGzD,OAAO,IAAI;;IAGf;IACA,IAAI0D,GAAG,CAACI,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MACzB,MAAMC,QAAQ,GAAG,EAAG;MACpB,KAAK,MAAM,CAAE9D,IAAI,EAAED,QAAQ,CAAE,IAAI,IAAI,CAAC,OAAO,EAAE;QAC3C,IAAIC,IAAI,CAAC+D,KAAK,CAAC,GAAG,aAAY,CAAC,CAAC,CAAC,KAAKN,GAAG,EAAE;UAAEK,QAAQ,CAAC5B,IAAI,CAACnC,QAAQ,CAAC;;;MAGxE,IAAI+D,QAAQ,CAAChB,MAAM,KAAK,CAAC,EAAE;QACvB,IAAIW,GAAG,KAAK,OAAO,EAAE;UAAE,OAAOtB,4BAAa,CAACC,IAAI,CAAC,qBAAqB,CAAC;;QACvE,IAAIqB,GAAG,KAAK,OAAO,EAAE;UAAE,OAAOtB,4BAAa,CAACC,IAAI,CAAC,sBAAsB,CAAC;;QACxE,OAAO,IAAI;OACd,MAAM,IAAI0B,QAAQ,CAAChB,MAAM,GAAG,CAAC,EAAE;QAC5B,MAAM6B,QAAQ,GAAGb,QAAQ,CAACX,GAAG,CAAEyB,CAAC,IAAKxD,IAAI,CAACC,SAAS,CAACuD,CAAC,CAACvE,MAAM,EAAE,CAAC,CAAC,CAACwE,IAAI,CAAC,IAAI,CAAC;QAC3E,6BAAc,EAAC,KAAK,EAAE,qCAAsCF,QAAS,GAAG,EAAE,MAAM,EAAElB,GAAG,CAAC;;MAG1F,OAAOK,QAAQ,CAAC,CAAC,CAAC;;IAGtB;IACAL,GAAG,GAAGtB,4BAAa,CAACC,IAAI,CAACqB,GAAG,CAAC,CAACpD,MAAM,EAAE;IACtC,IAAIoD,GAAG,KAAK,eAAe,EAAE;MAAE,OAAOtB,4BAAa,CAACC,IAAI,CAAC,qBAAqB,CAAC;;IAC/E,IAAIqB,GAAG,KAAK,gBAAgB,EAAE;MAAE,OAAOtB,4BAAa,CAACC,IAAI,CAAC,sBAAsB,CAAC;;IAEjF,MAAM0C,MAAM,GAAG,IAAI,CAAC,OAAO,CAAClF,GAAG,CAAC6D,GAAG,CAAC;IACpC,IAAIqB,MAAM,EAAE;MAAE,OAAOA,MAAM;;IAE3B,OAAO,IAAI;EACf;EAEA;;;EAGAgB,YAAY,CAACZ,QAAsD;IAC/D,MAAMC,KAAK,GAAGV,KAAK,CAACrC,IAAI,CAAC,IAAI,CAAC,OAAO,CAACgD,IAAI,EAAE,CAAC;IAC7CD,KAAK,CAACE,IAAI,CAAC,CAACpD,CAAC,EAAEqD,CAAC,KAAKrD,CAAC,CAACsD,aAAa,CAACD,CAAC,CAAC,CAAC;IACxC,KAAK,IAAIjB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGc,KAAK,CAACrC,MAAM,EAAEuB,CAAC,EAAE,EAAE;MACnC,MAAMrE,IAAI,GAAGmF,KAAK,CAACd,CAAC,CAAC;MACrBa,QAAQ,CAAiB,IAAI,CAAC,OAAO,CAACtF,GAAG,CAACI,IAAI,CAAC,EAAGqE,CAAC,CAAC;;EAE5D;EAEA;EACI;;;;;;;;;;;;;;;;EAqBJ;EACA;;;;;;EAQA0B,aAAa,CAACC,MAAgC,EAAEC,IAAe;IAC3D,OAAO,IAAI,CAAC,SAAS,CAACC,MAAM,CAACF,MAAM,EAAEC,IAAI,CAAC;EAC9C;EAEAE,aAAa,CAACH,MAAgC,EAAEtC,MAA0B;IACtE,OAAO,IAAI,CAAC,SAAS,CAAC0C,MAAM,CAACJ,MAAM,EAAEtC,MAAM,CAAC;EAChD;EAEA;;;;EAIA2C,YAAY,CAAC3C,MAA2B;IACpC,OAAO,IAAI,CAACyC,aAAa,CAAC,IAAI,CAACzE,MAAM,CAACT,MAAM,EAAEyC,MAAM,IAAI,EAAG,CAAC;EAChE;EAEA;;;;;;;;;EASA4C,iBAAiB,CAACvG,QAAgC,EAAEkG,IAAe;IAC/D,IAAI,OAAOlG,QAAS,KAAK,QAAQ,EAAE;MAC/B,MAAMqD,CAAC,GAAG,IAAI,CAACyC,QAAQ,CAAC9F,QAAQ,CAAC;MACjC,6BAAc,EAACqD,CAAC,EAAE,eAAe,EAAE,UAAU,EAAErD,QAAQ,CAAC;MACxDA,QAAQ,GAAGqD,CAAC;;IAGhB,6BAAc,EAAC,wBAAS,EAAC6C,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,KAAKlG,QAAQ,CAACS,QAAQ,EACtD,uCAAwCT,QAAQ,CAACC,IAAK,GAAG,EAAE,MAAM,EAAEiG,IAAI,CAAC;IAE5E,OAAO,IAAI,CAACF,aAAa,CAAChG,QAAQ,CAACkB,MAAM,EAAE,wBAAS,EAACgF,IAAI,EAAE,CAAC,CAAC,CAAC;EAClE;EAEA;;;;;;;;EAQAM,iBAAiB,CAACxG,QAAgC,EAAE2D,MAA2B;IAC3E,IAAI,OAAO3D,QAAS,KAAK,QAAQ,EAAE;MAC/B,MAAMqD,CAAC,GAAG,IAAI,CAACyC,QAAQ,CAAC9F,QAAQ,CAAC;MACjC,6BAAc,EAACqD,CAAC,EAAE,eAAe,EAAE,UAAU,EAAErD,QAAQ,CAAC;MACxDA,QAAQ,GAAGqD,CAAC;;IAGhB,OAAO,qBAAM,EAAC,CACVrD,QAAQ,CAACS,QAAQ,EACjB,IAAI,CAAC2F,aAAa,CAACpG,QAAQ,CAACkB,MAAM,EAAEyC,MAAM,IAAI,EAAG,CAAC,CACrD,CAAC;EACN;EAEA;;;;;;;;EAQA8C,kBAAkB,CAACzG,QAAmC,EAAEkG,IAAe;IACnE,IAAI,OAAOlG,QAAS,KAAK,QAAQ,EAAE;MAC/B,MAAMqD,CAAC,GAAG,IAAI,CAAC4B,WAAW,CAACjF,QAAQ,CAAC;MACpC,6BAAc,EAACqD,CAAC,EAAE,kBAAkB,EAAE,UAAU,EAAErD,QAAQ,CAAC;MAC3DA,QAAQ,GAAGqD,CAAC;;IAGhB,6BAAc,EAAC,wBAAS,EAAC6C,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,KAAKlG,QAAQ,CAACS,QAAQ,EACtD,0CAA2CT,QAAQ,CAACC,IAAK,GAAG,EAAE,MAAM,EAAEiG,IAAI,CAAC;IAE/E,OAAO,IAAI,CAACF,aAAa,CAAChG,QAAQ,CAACkB,MAAM,EAAE,wBAAS,EAACgF,IAAI,EAAE,CAAC,CAAC,CAAC;EAClE;EAEA;;;;;EAKAQ,kBAAkB,CAAC1G,QAAmC,EAAE2D,MAA2B;IAC/E,IAAI,OAAO3D,QAAS,KAAK,QAAQ,EAAE;MAC/B,MAAMqD,CAAC,GAAG,IAAI,CAAC4B,WAAW,CAACjF,QAAQ,CAAC;MACpC,6BAAc,EAACqD,CAAC,EAAE,kBAAkB,EAAE,UAAU,EAAErD,QAAQ,CAAC;MAC3DA,QAAQ,GAAGqD,CAAC;;IAGhB,OAAO,qBAAM,EAAC,CACVrD,QAAQ,CAACS,QAAQ,EACjB,IAAI,CAAC2F,aAAa,CAACpG,QAAQ,CAACkB,MAAM,EAAEyC,MAAM,IAAI,EAAG,CAAC,CACrD,CAAC;EACN;EAEA;;;;;;;;;EASAgD,oBAAoB,CAAC3G,QAAmC,EAAEkG,IAAe;IACrE,IAAI,OAAOlG,QAAS,KAAK,QAAQ,EAAE;MAC/B,MAAMqD,CAAC,GAAG,IAAI,CAAC4B,WAAW,CAACjF,QAAQ,CAAC;MACpC,6BAAc,EAACqD,CAAC,EAAE,kBAAkB,EAAE,UAAU,EAAErD,QAAQ,CAAC;MAC3DA,QAAQ,GAAGqD,CAAC;;IAGhB,IAAIjC,OAAO,GAAG,gCAAgC;IAE9C,MAAMwF,KAAK,GAAG,2BAAY,EAACV,IAAI,CAAC;IAChC,IAAKU,KAAK,CAAC7D,MAAM,GAAG,EAAE,KAAM,CAAC,EAAE;MAC3B,IAAI;QACA,OAAO,IAAI,CAAC,SAAS,CAACoD,MAAM,CAACnG,QAAQ,CAAC6G,OAAO,EAAED,KAAK,CAAC;OACxD,CAAC,OAAOtE,KAAK,EAAE;QACZlB,OAAO,GAAG,8BAA8B;;;IAIhD;IACA,qBAAM,EAAC,KAAK,EAAEA,OAAO,EAAE,UAAU,EAAE;MAC/BV,KAAK,EAAE,sBAAO,EAACkG,KAAK,CAAC;MACrBE,IAAI,EAAE;QAAEC,MAAM,EAAE/G,QAAQ,CAACC,IAAI;QAAEC,SAAS,EAAEF,QAAQ,CAACM,MAAM;MAAE;KAC9D,CAAC;EACN;EAEA0G,SAAS,CAACC,KAAgB,EAAEC,EAA4B;IACpD,MAAMhB,IAAI,GAAG,uBAAQ,EAACe,KAAK,EAAE,MAAM,CAAC;IAEpC,MAAM3E,KAAK,GAAGkB,uBAAQ,CAAC2D,uBAAuB,CAAC,MAAM,EAAED,EAAE,EAAEhB,IAAI,CAAC;IAEhE;IACA,MAAMkB,YAAY,GAAG,2CAA2C;IAChE,IAAI9E,KAAK,CAAClB,OAAO,CAACiG,UAAU,CAACD,YAAY,CAAC,EAAE;MACxC,MAAM3G,QAAQ,GAAG,sBAAO,EAACyF,IAAI,CAACoB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;MAE1C,MAAMC,EAAE,GAAG,IAAI,CAACzB,QAAQ,CAACrF,QAAQ,CAAC;MAClC,IAAI8G,EAAE,EAAE;QACJ,IAAI;UACA,MAAMnH,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC+F,MAAM,CAACoB,EAAE,CAACrG,MAAM,EAAEgF,IAAI,CAACoB,KAAK,CAAC,CAAC,CAAC,CAAC;UAC5DhF,KAAK,CAACkF,MAAM,GAAG;YACXvH,IAAI,EAAEsH,EAAE,CAACtH,IAAI;YAAEC,SAAS,EAAEqH,EAAE,CAACjH,MAAM,EAAE;YAAEF;WAC1C;UACDkC,KAAK,CAACnB,MAAM,GAAGmB,KAAK,CAACkF,MAAM,CAACtH,SAAS;UACrCoC,KAAK,CAAClB,OAAO,GAAG,uBAAwBkB,KAAK,CAACnB,MAAO,EAAE;SACzD,CAAC,OAAOsG,CAAC,EAAE;UACTnF,KAAK,CAAClB,OAAO,GAAG,oDAAoD;;;;IAKhF;IACA,MAAMsG,MAAM,GAAG,IAAI,CAACC,gBAAgB,CAACT,EAAE,CAAC;IACxC,IAAIQ,MAAM,EAAE;MACRpF,KAAK,CAACsF,UAAU,GAAG;QACfb,MAAM,EAAEW,MAAM,CAACzH,IAAI;QACnBC,SAAS,EAAEwH,MAAM,CAACxH,SAAS;QAC3BE,IAAI,EAAEsH,MAAM,CAACtH;OAChB;;IAGL,OAAOkC,KAAK;EAChB;EAEA;;;;;;;;EAQAuF,oBAAoB,CAAC7H,QAAmC,EAAE2D,MAA2B;IACjF,IAAI,OAAO3D,QAAS,KAAK,QAAQ,EAAE;MAC/B,MAAMqD,CAAC,GAAG,IAAI,CAAC4B,WAAW,CAACjF,QAAQ,CAAC;MACpC,6BAAc,EAACqD,CAAC,EAAE,kBAAkB,EAAE,UAAU,EAAErD,QAAQ,CAAC;MAC3DA,QAAQ,GAAGqD,CAAC;;IAEhB,OAAO,sBAAO,EAAC,IAAI,CAAC,SAAS,CAACgD,MAAM,CAACrG,QAAQ,CAAC6G,OAAO,EAAElD,MAAM,IAAI,EAAG,CAAC,CAAC;EAC1E;EACJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EA8BI;EACAmE,kBAAkB,CAAC9H,QAAgC,EAAE2D,MAA0B;IAC3E,IAAI,OAAO3D,QAAS,KAAK,QAAQ,EAAE;MAC/B,MAAMqD,CAAC,GAAG,IAAI,CAACuC,QAAQ,CAAC5F,QAAQ,CAAC;MACjC,6BAAc,EAACqD,CAAC,EAAE,eAAe,EAAE,eAAe,EAAErD,QAAQ,CAAC;MAC7DA,QAAQ,GAAGqD,CAAC;;IAGhB,qBAAM,EAACM,MAAM,CAACZ,MAAM,IAAI/C,QAAQ,CAACkB,MAAM,CAAC6B,MAAM,EAAE,0BAA2B/C,QAAQ,CAACM,MAAM,EAAG,EAAE,EAC3F,qBAAqB,EAAE;MAAEyH,KAAK,EAAEpE,MAAM,CAACZ,MAAM;MAAEiF,aAAa,EAAEhI,QAAQ,CAACkB,MAAM,CAAC6B;IAAM,CAAE,CAAC;IAE3F,MAAMkF,MAAM,GAAyC,EAAE;IACvD,IAAI,CAACjI,QAAQ,CAACkI,SAAS,EAAE;MAAED,MAAM,CAAC9F,IAAI,CAACnC,QAAQ,CAAC0F,SAAS,CAAC;;IAE1D;IACA,MAAMyC,WAAW,GAAG,CAACC,KAAgB,EAAE1H,KAAU,KAAY;MACzD,IAAI0H,KAAK,CAACtF,IAAI,KAAK,QAAQ,EAAE;QACxB,OAAO,iBAAE,EAACpC,KAAK,CAAC;OACpB,MAAM,IAAI0H,KAAK,CAACtF,IAAI,KAAK,OAAO,EAAE;QAC9B,OAAO,wBAAS,EAAC,sBAAO,EAACpC,KAAK,CAAC,CAAC;;MAGrC,IAAI0H,KAAK,CAACtF,IAAI,KAAK,MAAM,IAAI,OAAOpC,KAAM,KAAK,SAAS,EAAE;QACtDA,KAAK,GAAIA,KAAK,GAAG,MAAM,GAAE,MAAO;;MAGpC,IAAI0H,KAAK,CAACtF,IAAI,CAACuF,KAAK,CAAC,QAAQ,CAAC,EAAE;QAC5B3H,KAAK,GAAG,sBAAO,EAACA,KAAK,CAAC;;MAG1B;MACA,IAAI0H,KAAK,CAACtF,IAAI,KAAK,SAAS,EAAE;QAAE,IAAI,CAAC,SAAS,CAACuD,MAAM,CAAE,CAAE,SAAS,CAAE,EAAE,CAAE3F,KAAK,CAAE,CAAC;;MAChF,OAAO,2BAAY,EAAC,sBAAO,EAACA,KAAK,CAAC,EAAE,EAAE,CAAC;MACvC;IACJ,CAAC;;IAEDiD,MAAM,CAAChB,OAAO,CAAC,CAACjC,KAAK,EAAEkC,KAAK,KAAI;MAE5B,MAAMwF,KAAK,GAAmBpI,QAAS,CAACkB,MAAM,CAAC0B,KAAK,CAAC;MAErD,IAAI,CAACwF,KAAK,CAACE,OAAO,EAAE;QAChB,6BAAc,EAAC5H,KAAK,IAAI,IAAI,EACxB,oDAAoD,EAAG,WAAW,GAAG0H,KAAK,CAACnI,IAAI,EAAGS,KAAK,CAAC;QAC5F;;MAGJ,IAAIA,KAAK,IAAI,IAAI,EAAE;QACfuH,MAAM,CAAC9F,IAAI,CAAC,IAAI,CAAC;OACpB,MAAM,IAAIiG,KAAK,CAAC5D,QAAQ,KAAK,OAAO,IAAI4D,KAAK,CAAC5D,QAAQ,KAAK,OAAO,EAAE;QACjE,6BAAc,EAAC,KAAK,EAAE,+CAA+C,EAAG,WAAW,GAAG4D,KAAK,CAACnI,IAAI,EAAGS,KAAK,CAAC;OAC5G,MAAM,IAAIgE,KAAK,CAACC,OAAO,CAACjE,KAAK,CAAC,EAAE;QAC7BuH,MAAM,CAAC9F,IAAI,CAACzB,KAAK,CAAC0C,GAAG,CAAE1C,KAAK,IAAKyH,WAAW,CAACC,KAAK,EAAE1H,KAAK,CAAC,CAAC,CAAC;OAC/D,MAAM;QACHuH,MAAM,CAAC9F,IAAI,CAACgG,WAAW,CAACC,KAAK,EAAE1H,KAAK,CAAC,CAAC;;IAE9C,CAAC,CAAC;IAEF;IACA,OAAOuH,MAAM,CAAClF,MAAM,IAAIkF,MAAM,CAACA,MAAM,CAAClF,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE;MACxDkF,MAAM,CAACM,GAAG,EAAE;;IAGhB,OAAON,MAAM;EACjB;EAEAO,cAAc,CAACxI,QAAgC,EAAE2D,MAA0B;IACvE,IAAI,OAAO3D,QAAS,KAAK,QAAQ,EAAE;MAC/B,MAAMqD,CAAC,GAAG,IAAI,CAACuC,QAAQ,CAAC5F,QAAQ,CAAC;MACjC,6BAAc,EAACqD,CAAC,EAAE,eAAe,EAAE,eAAe,EAAErD,QAAQ,CAAC;MAC7DA,QAAQ,GAAGqD,CAAC;;IAGhB,MAAM4E,MAAM,GAAkB,EAAG;IAEjC,MAAMQ,SAAS,GAAqB,EAAG;IACvC,MAAMC,UAAU,GAAkB,EAAG;IAErC,IAAI,CAAC1I,QAAQ,CAACkI,SAAS,EAAE;MACrBD,MAAM,CAAC9F,IAAI,CAACnC,QAAQ,CAAC0F,SAAS,CAAC;;IAGnC,6BAAc,EAAC/B,MAAM,CAACZ,MAAM,KAAK/C,QAAQ,CAACkB,MAAM,CAAC6B,MAAM,EACnD,iCAAiC,EAAE,QAAQ,EAAEY,MAAM,CAAC;IAExD3D,QAAQ,CAACkB,MAAM,CAACyB,OAAO,CAAC,CAACyF,KAAK,EAAExF,KAAK,KAAI;MACrC,MAAMlC,KAAK,GAAGiD,MAAM,CAACf,KAAK,CAAC;MAC3B,IAAIwF,KAAK,CAACE,OAAO,EAAE;QACf,IAAIF,KAAK,CAACtF,IAAI,KAAK,QAAQ,EAAE;UACzBmF,MAAM,CAAC9F,IAAI,CAAC,iBAAE,EAACzB,KAAK,CAAC,CAAC;SACzB,MAAM,IAAI0H,KAAK,CAACtF,IAAI,KAAK,OAAO,EAAE;UAC/BmF,MAAM,CAAC9F,IAAI,CAAC,wBAAS,EAACzB,KAAK,CAAC,CAAC;SAChC,MAAM,IAAI0H,KAAK,CAAC5D,QAAQ,KAAK,OAAO,IAAI4D,KAAK,CAAC5D,QAAQ,KAAK,OAAO,EAAE;UACjE;UACA,MAAM,IAAImE,KAAK,CAAC,iBAAiB,CAAC;SACrC,MAAM;UACHV,MAAM,CAAC9F,IAAI,CAAC,IAAI,CAAC,SAAS,CAACkE,MAAM,CAAC,CAAE+B,KAAK,CAACtF,IAAI,CAAC,EAAG,CAAEpC,KAAK,CAAE,CAAC,CAAC;;OAEpE,MAAM;QACH+H,SAAS,CAACtG,IAAI,CAACiG,KAAK,CAAC;QACrBM,UAAU,CAACvG,IAAI,CAACzB,KAAK,CAAC;;IAE9B,CAAC,CAAC;IAEF,OAAO;MACHwF,IAAI,EAAE,IAAI,CAAC,SAAS,CAACG,MAAM,CAACoC,SAAS,EAAGC,UAAU,CAAC;MACnDT,MAAM,EAAEA;KACX;EACL;EAEA;EACAW,cAAc,CAAC5I,QAAgC,EAAEkG,IAAe,EAAE+B,MAA8B;IAC5F,IAAI,OAAOjI,QAAS,KAAK,QAAQ,EAAE;MAC/B,MAAMqD,CAAC,GAAG,IAAI,CAACuC,QAAQ,CAAC5F,QAAQ,CAAC;MACjC,6BAAc,EAACqD,CAAC,EAAE,eAAe,EAAE,eAAe,EAAErD,QAAQ,CAAC;MAC7DA,QAAQ,GAAGqD,CAAC;;IAGhB,IAAI4E,MAAM,IAAI,IAAI,IAAI,CAACjI,QAAQ,CAACkI,SAAS,EAAE;MACvC,MAAMzC,UAAU,GAAGzF,QAAQ,CAAC0F,SAAS;MACrC,6BAAc,EAAC,0BAAW,EAACuC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAIA,MAAM,CAAC,CAAC,CAAC,CAACpE,WAAW,EAAE,KAAK4B,UAAU,EAC/E,yBAAyB,EAAE,WAAW,EAAEwC,MAAM,CAAC,CAAC,CAAC,CAAC;MACtDA,MAAM,GAAGA,MAAM,CAACX,KAAK,CAAC,CAAC,CAAC;;IAG5B,MAAMgB,OAAO,GAAqB,EAAE;IACpC,MAAMO,UAAU,GAAqB,EAAE;IACvC,MAAMC,OAAO,GAAmB,EAAE;IAElC9I,QAAQ,CAACkB,MAAM,CAACyB,OAAO,CAAC,CAACyF,KAAK,EAAExF,KAAK,KAAI;MACrC,IAAIwF,KAAK,CAACE,OAAO,EAAE;QACf,IAAIF,KAAK,CAACtF,IAAI,KAAK,QAAQ,IAAIsF,KAAK,CAACtF,IAAI,KAAK,OAAO,IAAIsF,KAAK,CAAC5D,QAAQ,KAAK,OAAO,IAAI4D,KAAK,CAAC5D,QAAQ,KAAK,OAAO,EAAE;UAC/G8D,OAAO,CAACnG,IAAI,CAACC,wBAAS,CAACC,IAAI,CAAC;YAAES,IAAI,EAAE,SAAS;YAAE7C,IAAI,EAAEmI,KAAK,CAACnI;UAAI,CAAE,CAAC,CAAC;UACnE6I,OAAO,CAAC3G,IAAI,CAAC,IAAI,CAAC;SACrB,MAAM;UACHmG,OAAO,CAACnG,IAAI,CAACiG,KAAK,CAAC;UACnBU,OAAO,CAAC3G,IAAI,CAAC,KAAK,CAAC;;OAE1B,MAAM;QACH0G,UAAU,CAAC1G,IAAI,CAACiG,KAAK,CAAC;QACtBU,OAAO,CAAC3G,IAAI,CAAC,KAAK,CAAC;;IAE3B,CAAC,CAAC;IAEF,MAAM4G,aAAa,GAAId,MAAM,IAAI,IAAI,GAAI,IAAI,CAAC,SAAS,CAAC9B,MAAM,CAACmC,OAAO,EAAE,qBAAM,EAACL,MAAM,CAAC,CAAC,GAAE,IAAI;IAC7F,MAAMe,gBAAgB,GAAG,IAAI,CAAC,SAAS,CAAC7C,MAAM,CAAC0C,UAAU,EAAE3C,IAAI,EAAE,IAAI,CAAC;IAEtE;IACA,MAAMvC,MAAM,GAAe,EAAG;IAC9B,MAAM0B,IAAI,GAAyB,EAAG;IACtC,IAAI4D,eAAe,GAAG,CAAC;MAAEC,YAAY,GAAG,CAAC;IACzClJ,QAAQ,CAACkB,MAAM,CAACyB,OAAO,CAAC,CAACyF,KAAK,EAAExF,KAAK,KAAI;MACrC,IAAIlC,KAAK,GAAG,IAAI;MAChB,IAAI0H,KAAK,CAACE,OAAO,EAAE;QACf,IAAIS,aAAa,IAAI,IAAI,EAAE;UACvBrI,KAAK,GAAG,IAAIE,OAAO,CAAC,IAAI,CAAC;SAE5B,MAAM,IAAIkI,OAAO,CAAClG,KAAK,CAAC,EAAE;UACvBlC,KAAK,GAAG,IAAIE,OAAO,CAACmI,aAAa,CAACG,YAAY,EAAE,CAAC,CAAC;SAErD,MAAM;UACH,IAAI;YACAxI,KAAK,GAAGqI,aAAa,CAACG,YAAY,EAAE,CAAC;WACxC,CAAC,OAAO5G,KAAK,EAAE;YACZ5B,KAAK,GAAG4B,KAAK;;;OAGxB,MAAM;QACH,IAAI;UACA5B,KAAK,GAAGsI,gBAAgB,CAACC,eAAe,EAAE,CAAC;SAC9C,CAAC,OAAO3G,KAAK,EAAE;UACZ5B,KAAK,GAAG4B,KAAK;;;MAIrBqB,MAAM,CAACxB,IAAI,CAACzB,KAAK,CAAC;MAClB2E,IAAI,CAAClD,IAAI,CAACiG,KAAK,CAACnI,IAAI,IAAI,IAAI,CAAC;IACjC,CAAC,CAAC;IAEF,OAAOH,0BAAM,CAACqJ,SAAS,CAACxF,MAAM,EAAE0B,IAAI,CAAC;EACzC;EAEA;;;;;;EAMAsC,gBAAgB,CAACT,EAA0C;IACvD,MAAMhB,IAAI,GAAG,uBAAQ,EAACgB,EAAE,CAAChB,IAAI,EAAE,SAAS,CAAC;IACzC,MAAMxF,KAAK,GAAG,wBAAS,EAAEwG,EAAE,CAACxG,KAAK,IAAI,IAAI,GAAIwG,EAAE,CAACxG,KAAK,GAAE,CAAC,EAAE,UAAU,CAAC;IAErE,MAAMV,QAAQ,GAAG,IAAI,CAACiF,WAAW,CAAC,sBAAO,EAACiB,IAAI,CAACoB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IAE5D,IAAI,CAACtH,QAAQ,EAAE;MAAE,OAAO,IAAI;;IAE5B,MAAMI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC+F,MAAM,CAACnG,QAAQ,CAACkB,MAAM,EAAEgF,IAAI,CAACoB,KAAK,CAAC,CAAC,CAAC,CAAC;IAClE,OAAO,IAAI9G,sBAAsB,CAACR,QAAQ,EAAEA,QAAQ,CAACS,QAAQ,EAAEL,IAAI,EAAEM,KAAK,CAAC;EAC/E;EAEA0I,eAAe,CAAClD,IAAe;IAC3B,MAAM,IAAIyC,KAAK,CAAC,OAAO,CAAC;EAC5B;EAEA;;;;;;EAMAU,QAAQ,CAAC7G,GAA2C;IAChD,MAAMxC,QAAQ,GAAG,IAAI,CAAC4F,QAAQ,CAACpD,GAAG,CAACyF,MAAM,CAAC,CAAC,CAAC,CAAC;IAE7C,IAAI,CAACjI,QAAQ,IAAIA,QAAQ,CAACkI,SAAS,EAAE;MAAE,OAAO,IAAI;;IAElD;IACA;IACA;IAGD,OAAO,IAAInI,cAAc,CAACC,QAAQ,EAAEA,QAAQ,CAAC0F,SAAS,EAAE,IAAI,CAACkD,cAAc,CAAC5I,QAAQ,EAAEwC,GAAG,CAAC0D,IAAI,EAAE1D,GAAG,CAACyF,MAAM,CAAC,CAAC;EAC/G;EAEA;;;;;;EAMAqB,UAAU,CAACpD,IAAe;IACtB,MAAMqD,OAAO,GAAG,sBAAO,EAACrD,IAAI,CAAC;IAE7B,MAAMlG,QAAQ,GAAG,IAAI,CAAC8F,QAAQ,CAAC,wBAAS,EAACyD,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IAExD,IAAI,CAACvJ,QAAQ,EAAE;MAAE,OAAO,IAAI;;IAE5B,MAAMI,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC+F,MAAM,CAACnG,QAAQ,CAACkB,MAAM,EAAE,wBAAS,EAACqI,OAAO,EAAE,CAAC,CAAC,CAAC;IAC1E,OAAO,IAAI5I,gBAAgB,CAACX,QAAQ,EAAEA,QAAQ,CAACS,QAAQ,EAAEL,IAAI,CAAC;EAClE;EAEA;;;;;;EAMA,OAAOiC,IAAI,CAAC3B,KAA+B;IACvC;IACA,IAAIA,KAAK,YAAYe,SAAS,EAAE;MAAE,OAAOf,KAAK;;IAE9C;IACA,IAAI,OAAOA,KAAM,KAAK,QAAQ,EAAE;MAAE,OAAO,IAAIe,SAAS,CAACJ,IAAI,CAACU,KAAK,CAACrB,KAAK,CAAC,CAAC;;IAEzE;IACA,IAAI,OAAaA,KAAM,CAACJ,MAAO,KAAK,UAAU,EAAE;MAC5C,OAAO,IAAImB,SAAS,CAAOf,KAAM,CAACJ,MAAM,CAAC,MAAM,CAAC,CAAC;;IAGrD;IACA,OAAO,IAAImB,SAAS,CAACf,KAAK,CAAC;EAC/B;;AAp7BJH","names":["Object","enumerable","get","abstract_coder_js_1","LogDescription","fragment","name","signature","topic","args","constructor","format","exports","TransactionDescription","selector","value","ErrorDescription","Indexed","hash","_isIndexed","isIndexed","PanicReasons","BuiltinErrors","inputs","reason","message","JSON","stringify","code","toString","Interface","fragments","deploy","fallback","receive","abi","parse","Map","frags","a","push","fragments_js_1","from","error","console","log","freeze","getAbiCoder","forEach","index","bucket","type","length","payable","has","set","minimal","map","f","formatJson","j","abi_coder_js_1","defaultAbiCoder","key","values","forceUnique","toLowerCase","indexOf","matching","split","lastValue","valueLength","allowOptions","typed_js_1","isTyped","i","splice","baseType","lastArg","Array","isArray","matchStr","m","join","result","getFunctionName","getFunction","forEachFunction","callback","names","keys","sort","b","localeCompare","eventTopic","topicHash","getEventName","getEvent","forEachEvent","getError","forEachError","_decodeParams","params","data","decode","_encodeParams","encode","encodeDeploy","decodeErrorResult","encodeErrorResult","decodeFunctionData","encodeFunctionData","decodeFunctionResult","bytes","outputs","info","method","makeError","_data","tx","getBuiltinCallException","customPrefix","startsWith","slice","ef","revert","e","parsed","parseTransaction","invocation","encodeFunctionResult","encodeFilterTopics","count","expectedCount","topics","anonymous","encodeTopic","param","match","indexed","pop","encodeEventLog","dataTypes","dataValues","Error","decodeEventLog","nonIndexed","dynamic","resultIndexed","resultNonIndexed","nonIndexedIndex","indexedIndex","fromItems","parseCallResult","parseLog","parseError","hexData"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/abi/interface.ts"],"sourcesContent":["/**\n *  About Interface\n *\n *  @_subsection api/abi:Interfaces  [interfaces]\n */\n\nimport { keccak256 } from \"../crypto/index.js\"\nimport { id } from \"../hash/index.js\"\nimport {\n    concat, dataSlice, getBigInt, getBytes, getBytesCopy,\n    hexlify, zeroPadValue, isHexString, defineProperties, assertArgument, toBeHex,\n    assert\n} from \"../utils/index.js\";\n\nimport { AbiCoder } from \"./abi-coder.js\";\nimport { checkResultErrors, Result } from \"./coders/abstract-coder.js\";\nimport {\n    ConstructorFragment, ErrorFragment, EventFragment, FallbackFragment,\n    Fragment, FunctionFragment, ParamType\n} from \"./fragments.js\";\nimport { Typed } from \"./typed.js\";\n\nimport type { BigNumberish, BytesLike, CallExceptionError, CallExceptionTransaction } from \"../utils/index.js\";\n\nimport type { JsonFragment } from \"./fragments.js\";\n\n\nexport { checkResultErrors, Result };\n\nexport class LogDescription {\n    readonly fragment!: EventFragment;\n    readonly name!: string;\n    readonly signature!: string;\n    readonly topic!: string;\n    readonly args!: Result\n\n    constructor(fragment: EventFragment, topic: string, args: Result) {\n        const name = fragment.name, signature = fragment.format();\n        defineProperties<LogDescription>(this, {\n            fragment, name, signature, topic, args\n        });\n    }\n}\n\nexport class TransactionDescription {\n    readonly fragment!: FunctionFragment;\n    readonly name!: string;\n    readonly args!: Result;\n    readonly signature!: string;\n    readonly selector!: string;\n    readonly value!: bigint;\n\n    constructor(fragment: FunctionFragment, selector: string, args: Result, value: bigint) {\n        const name = fragment.name, signature = fragment.format();\n        defineProperties<TransactionDescription>(this, {\n            fragment, name, args, signature, selector, value\n        });\n    }\n}\n\nexport class ErrorDescription {\n    readonly fragment!: ErrorFragment;\n    readonly name!: string;\n    readonly args!: Result;\n    readonly signature!: string;\n    readonly selector!: string;\n\n    constructor(fragment: ErrorFragment, selector: string, args: Result) {\n        const name = fragment.name, signature = fragment.format();\n        defineProperties<ErrorDescription>(this, {\n            fragment, name, args, signature, selector\n        });\n    }\n}\n\nexport class Indexed {\n    readonly hash!: null | string;\n    readonly _isIndexed!: boolean;\n\n    static isIndexed(value: any): value is Indexed {\n        return !!(value && value._isIndexed);\n    }\n\n    constructor(hash: null | string) {\n        defineProperties<Indexed>(this, { hash, _isIndexed: true })\n    }\n}\n\ntype ErrorInfo = {\n    signature: string,\n    inputs: Array<string>,\n    name: string,\n    reason: (...args: Array<any>) => string;\n};\n\n// https://docs.soliditylang.org/en/v0.8.13/control-structures.html?highlight=panic#panic-via-assert-and-error-via-require\nconst PanicReasons: Record<string, string> = {\n    \"0\": \"generic panic\",\n    \"1\": \"assert(false)\",\n    \"17\": \"arithmetic overflow\",\n    \"18\": \"division or modulo by zero\",\n    \"33\": \"enum overflow\",\n    \"34\": \"invalid encoded storage byte array accessed\",\n    \"49\": \"out-of-bounds array access; popping on an empty array\",\n    \"50\": \"out-of-bounds access of an array or bytesN\",\n    \"65\": \"out of memory\",\n    \"81\": \"uninitialized function\",\n}\n\nconst BuiltinErrors: Record<string, ErrorInfo> = {\n    \"0x08c379a0\": {\n        signature: \"Error(string)\",\n        name: \"Error\",\n        inputs: [ \"string\" ],\n        reason: (message: string) => {\n            return `reverted with reason string ${ JSON.stringify(message) }`;\n        }\n    },\n    \"0x4e487b71\": {\n        signature: \"Panic(uint256)\",\n        name: \"Panic\",\n        inputs: [ \"uint256\" ],\n        reason: (code: bigint) => {\n            let reason = \"unknown panic code\";\n            if (code >= 0 && code <= 0xff && PanicReasons[code.toString()]) {\n                reason = PanicReasons[code.toString()];\n            }\n            return `reverted with panic code 0x${ code.toString(16) } (${ reason })`;\n        }\n    }\n}\n\n/*\nfunction wrapAccessError(property: string, error: Error): Error {\n    const wrap = new Error(`deferred error during ABI decoding triggered accessing ${ property }`);\n    (<any>wrap).error = error;\n    return wrap;\n}\n*/\n/*\nfunction checkNames(fragment: Fragment, type: \"input\" | \"output\", params: Array<ParamType>): void {\n    params.reduce((accum, param) => {\n        if (param.name) {\n            if (accum[param.name]) {\n                logger.throwArgumentError(`duplicate ${ type } parameter ${ JSON.stringify(param.name) } in ${ fragment.format(\"full\") }`, \"fragment\", fragment);\n            }\n            accum[param.name] = true;\n        }\n        return accum;\n    }, <{ [ name: string ]: boolean }>{ });\n}\n*/\n\n/**\n *  @TODO\n */\nexport type InterfaceAbi = string | ReadonlyArray<Fragment | JsonFragment | string>;\n\n/**\n *  An Interface abstracts many of the low-level details for\n *  encoding and decoding the data on the blockchain.\n *\n *  An ABI provides information on how to encode data to send to\n *  a Contract, how to decode the results and events and how to\n *  interpret revert errors.\n *\n *  The ABI can be specified by [any supported format](InterfaceAbi).\n */\nexport class Interface {\n\n    /**\n     *  All the Contract ABI members (i.e. methods, events, errors, etc).\n     */\n    readonly fragments!: ReadonlyArray<Fragment>;\n\n    /**\n     *  The Contract constructor.\n     */\n    readonly deploy!: ConstructorFragment;\n\n    /**\n     *  The Fallback method, if any.\n     */\n    readonly fallback!: null | FallbackFragment;\n\n    /**\n     *  If receiving ether is supported.\n     */\n    readonly receive!: boolean;\n\n    #errors: Map<string, ErrorFragment>;\n    #events: Map<string, EventFragment>;\n    #functions: Map<string, FunctionFragment>;\n//    #structs: Map<string, StructFragment>;\n\n    #abiCoder: AbiCoder;\n\n    /**\n     *  Create a new Interface for the %%fragments%%.\n     */\n    constructor(fragments: InterfaceAbi) {\n        let abi: ReadonlyArray<Fragment | JsonFragment | string> = [ ];\n        if (typeof(fragments) === \"string\") {\n            abi = JSON.parse(fragments);\n        } else {\n            abi = fragments;\n        }\n\n        this.#functions = new Map();\n        this.#errors = new Map();\n        this.#events = new Map();\n//        this.#structs = new Map();\n\n\n        const frags: Array<Fragment> = [ ];\n        for (const a of abi) {\n            try {\n                frags.push(Fragment.from(a));\n            } catch (error) {\n                console.log(\"EE\", error);\n            }\n        }\n\n        defineProperties<Interface>(this, {\n            fragments: Object.freeze(frags)\n        });\n\n        let fallback: null | FallbackFragment = null;\n        let receive = false;\n\n        this.#abiCoder = this.getAbiCoder();\n\n        // Add all fragments by their signature\n        this.fragments.forEach((fragment, index) => {\n            let bucket: Map<string, Fragment>;\n            switch (fragment.type) {\n                case \"constructor\":\n                    if (this.deploy) {\n                        console.log(\"duplicate definition - constructor\");\n                        return;\n                    }\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    defineProperties<Interface>(this, { deploy: <ConstructorFragment>fragment });\n                    return;\n\n                case \"fallback\":\n                    if (fragment.inputs.length === 0) {\n                        receive = true;\n                    } else {\n                        assertArgument(!fallback || (<FallbackFragment>fragment).payable !== fallback.payable,\n                            \"conflicting fallback fragments\", `fragments[${ index }]`, fragment);\n                        fallback = <FallbackFragment>fragment;\n                        receive = fallback.payable;\n                    }\n                    return;\n\n                case \"function\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    //checkNames(fragment, \"output\", (<FunctionFragment>fragment).outputs);\n                    bucket = this.#functions;\n                    break;\n\n                case \"event\":\n                    //checkNames(fragment, \"input\", fragment.inputs);\n                    bucket = this.#events;\n                    break;\n\n                case \"error\":\n                    bucket = this.#errors;\n                    break;\n\n                default:\n                    return;\n            }\n\n            // Two identical entries; ignore it\n            const signature = fragment.format();\n            if (bucket.has(signature)) { return; }\n\n            bucket.set(signature, fragment);\n        });\n\n        // If we do not have a constructor add a default\n        if (!this.deploy) {\n            defineProperties<Interface>(this, {\n                deploy: ConstructorFragment.from(\"constructor()\")\n            });\n        }\n\n        defineProperties<Interface>(this, { fallback, receive });\n    }\n\n    /**\n     *  Returns the entire Human-Readable ABI, as an array of\n     *  signatures, optionally as %%minimal%% strings, which\n     *  removes parameter names and unneceesary spaces.\n     */\n    format(minimal?: boolean): Array<string> {\n        const format = (minimal ? \"minimal\": \"full\");\n        const abi = this.fragments.map((f) => f.format(format));\n        return abi;\n    }\n\n    /**\n     *  Return the JSON-encoded ABI. This is the format Solidiy\n     *  returns.\n     */\n    formatJson(): string {\n        const abi = this.fragments.map((f) => f.format(\"json\"));\n\n        // We need to re-bundle the JSON fragments a bit\n        return JSON.stringify(abi.map((j) => JSON.parse(j)));\n    }\n\n    /**\n     *  The ABI coder that will be used to encode and decode binary\n     *  data.\n     */\n    getAbiCoder(): AbiCoder {\n        return AbiCoder.defaultAbiCoder();\n    }\n\n    // Find a function definition by any means necessary (unless it is ambiguous)\n    #getFunction(key: string, values: null | Array<any | Typed>, forceUnique: boolean): null | FunctionFragment {\n\n        // Selector\n        if (isHexString(key)) {\n            const selector = key.toLowerCase();\n            for (const fragment of this.#functions.values()) {\n                if (selector === fragment.selector) { return fragment; }\n            }\n            return null;\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching: Array<FunctionFragment> = [ ];\n            for (const [ name, fragment ] of this.#functions) {\n                if (name.split(\"(\"/* fix:) */)[0] === key) { matching.push(fragment); }\n            }\n\n            if (values) {\n                const lastValue = (values.length > 0) ? values[values.length - 1]: null;\n\n                let valueLength = values.length;\n                let allowOptions = true;\n                if (Typed.isTyped(lastValue) && lastValue.type === \"overrides\") {\n                    allowOptions = false;\n                    valueLength--;\n                }\n\n                // Remove all matches that don't have a compatible length. The args\n                // may contain an overrides, so the match may have n or n - 1 parameters\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs.length;\n                    if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {\n                        matching.splice(i, 1);\n                    }\n                }\n\n                // Remove all matches that don't match the Typed signature\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs;\n                    for (let j = 0; j < values.length; j++) {\n                        // Not a typed value\n                        if (!Typed.isTyped(values[j])) { continue; }\n\n                        // We are past the inputs\n                        if (j >= inputs.length) {\n                            if (values[j].type === \"overrides\") { continue; }\n                            matching.splice(i, 1);\n                            break;\n                        }\n\n                        // Make sure the value type matches the input type\n                        if (values[j].type !== inputs[j].baseType) {\n                            matching.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n\n            // We found a single matching signature with an overrides, but the\n            // last value is something that cannot possibly be an options\n            if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {\n                const lastArg = values[values.length - 1];\n                if (lastArg == null || Array.isArray(lastArg) || typeof(lastArg) !== \"object\") {\n                    matching.splice(0, 1);\n                }\n            }\n\n            if (matching.length === 0) { return null; }\n\n            if (matching.length > 1 && forceUnique) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n                assertArgument(false, `ambiguous function description (i.e. matches ${ matchStr })`, \"key\", key);\n            }\n\n            return matching[0];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.#functions.get(FunctionFragment.from(key).format());\n        if (result) { return result; }\n\n        return null;\n    }\n\n    /**\n     *  Get the function name for %%key%%, which may be a function selector,\n     *  function name or function signature that belongs to the ABI.\n     */\n    getFunctionName(key: string): string {\n        const fragment = this.#getFunction(key, null, false);\n        assertArgument(fragment, \"no matching function\", \"key\", key);\n        return fragment.name;\n    }\n\n    /**\n     *  Get the [[FunctionFragment]] for %%key%%, which may be a function\n     *  selector, function name or function signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple functions match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single function in\n     *  the ABI, this will throw.\n     */\n    getFunction(key: string, values?: Array<any | Typed>): null | FunctionFragment {\n        return this.#getFunction(key, values || null, true);\n    }\n\n    /**\n     *  Iterate over all functions, calling %%callback%%, sorted by their name.\n     */\n    forEachFunction(callback: (func: FunctionFragment, index: number) => void): void {\n        const names = Array.from(this.#functions.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback(<FunctionFragment>(this.#functions.get(name)), i);\n        }\n    }\n\n\n    // Find an event definition by any means necessary (unless it is ambiguous)\n    #getEvent(key: string, values: null | Array<null | any | Typed>, forceUnique: boolean): null | EventFragment {\n\n        // EventTopic\n        if (isHexString(key)) {\n            const eventTopic = key.toLowerCase();\n            for (const fragment of this.#events.values()) {\n                if (eventTopic === fragment.topicHash) { return fragment; }\n            }\n            return null;\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching = [ ];\n            for (const [ name, fragment ] of this.#events) {\n                if (name.split(\"(\"/* fix:) */)[0] === key) { matching.push(fragment); }\n            }\n\n            if (values) {\n                // Remove all matches that don't have a compatible length.\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    if (matching[i].inputs.length < values.length) {\n                        matching.splice(i, 1);\n                    }\n                }\n\n                // Remove all matches that don't match the Typed signature\n                for (let i = matching.length - 1; i >= 0; i--) {\n                    const inputs = matching[i].inputs;\n                    for (let j = 0; j < values.length; j++) {\n                        // Not a typed value\n                        if (!Typed.isTyped(values[j])) { continue; }\n\n                        // Make sure the value type matches the input type\n                        if (values[j].type !== inputs[j].baseType) {\n                            matching.splice(i, 1);\n                            break;\n                        }\n                    }\n                }\n            }\n\n            if (matching.length === 0) { return null; }\n\n            if (matching.length > 1 && forceUnique) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n                assertArgument(false, `ambiguous event description (i.e. matches ${ matchStr })`, \"key\", key);\n            }\n\n            return matching[0];\n        }\n\n        // Normalize the signature and lookup the function\n        const result = this.#events.get(EventFragment.from(key).format());\n        if (result) { return result; }\n\n        return null;\n    }\n\n    /**\n     *  Get the event name for %%key%%, which may be a topic hash,\n     *  event name or event signature that belongs to the ABI.\n     */\n    getEventName(key: string): string {\n        const fragment = this.#getEvent(key, null, false);\n        assertArgument(fragment, \"no matching event\", \"key\", key);\n\n        return fragment.name;\n    }\n\n    /**\n     *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,\n     *  event name or event signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple events match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single event in\n     *  the ABI, this will throw.\n     */\n    getEvent(key: string, values?: Array<any | Typed>): null | EventFragment {\n        return this.#getEvent(key, values || null, true)\n    }\n\n    /**\n     *  Iterate over all events, calling %%callback%%, sorted by their name.\n     */\n    forEachEvent(callback: (func: EventFragment, index: number) => void): void {\n        const names = Array.from(this.#events.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback(<EventFragment>(this.#events.get(name)), i);\n        }\n    }\n\n    /**\n     *  Get the [[ErrorFragment]] for %%key%%, which may be an error\n     *  selector, error name or error signature that belongs to the ABI.\n     *\n     *  If %%values%% is provided, it will use the Typed API to handle\n     *  ambiguous cases where multiple errors match by name.\n     *\n     *  If the %%key%% and %%values%% do not refine to a single error in\n     *  the ABI, this will throw.\n     */\n    getError(key: string, values?: Array<any | Typed>): null | ErrorFragment {\n        if (isHexString(key)) {\n            const selector = key.toLowerCase();\n\n            if (BuiltinErrors[selector]) {\n                return ErrorFragment.from(BuiltinErrors[selector].signature);\n            }\n\n            for (const fragment of this.#errors.values()) {\n                if (selector === fragment.selector) { return fragment; }\n            }\n\n            return null;\n        }\n\n        // It is a bare name, look up the function (will return null if ambiguous)\n        if (key.indexOf(\"(\") === -1) {\n            const matching = [ ];\n            for (const [ name, fragment ] of this.#errors) {\n                if (name.split(\"(\"/* fix:) */)[0] === key) { matching.push(fragment); }\n            }\n\n            if (matching.length === 0) {\n                if (key === \"Error\") { return ErrorFragment.from(\"error Error(string)\"); }\n                if (key === \"Panic\") { return ErrorFragment.from(\"error Panic(uint256)\"); }\n                return null;\n            } else if (matching.length > 1) {\n                const matchStr = matching.map((m) => JSON.stringify(m.format())).join(\", \");\n                assertArgument(false, `ambiguous error description (i.e. ${ matchStr })`, \"name\", key);\n            }\n\n            return matching[0];\n        }\n\n        // Normalize the signature and lookup the function\n        key = ErrorFragment.from(key).format()\n        if (key === \"Error(string)\") { return ErrorFragment.from(\"error Error(string)\"); }\n        if (key === \"Panic(uint256)\") { return ErrorFragment.from(\"error Panic(uint256)\"); }\n\n        const result = this.#errors.get(key);\n        if (result) { return result; }\n\n        return null;\n    }\n\n    /**\n     *  Iterate over all errors, calling %%callback%%, sorted by their name.\n     */\n    forEachError(callback: (func: ErrorFragment, index: number) => void): void {\n        const names = Array.from(this.#errors.keys());\n        names.sort((a, b) => a.localeCompare(b));\n        for (let i = 0; i < names.length; i++) {\n            const name = names[i];\n            callback(<ErrorFragment>(this.#errors.get(name)), i);\n        }\n    }\n\n    // Get the 4-byte selector used by Solidity to identify a function\n        /*\n    getSelector(fragment: ErrorFragment | FunctionFragment): string {\n        if (typeof(fragment) === \"string\") {\n            const matches: Array<Fragment> = [ ];\n\n            try { matches.push(this.getFunction(fragment)); } catch (error) { }\n            try { matches.push(this.getError(<string>fragment)); } catch (_) { }\n\n            if (matches.length === 0) {\n                logger.throwArgumentError(\"unknown fragment\", \"key\", fragment);\n            } else if (matches.length > 1) {\n                logger.throwArgumentError(\"ambiguous fragment matches function and error\", \"key\", fragment);\n            }\n\n            fragment = matches[0];\n        }\n\n        return dataSlice(id(fragment.format()), 0, 4);\n    }\n        */\n\n    // Get the 32-byte topic hash used by Solidity to identify an event\n    /*\n    getEventTopic(fragment: EventFragment): string {\n        //if (typeof(fragment) === \"string\") { fragment = this.getEvent(eventFragment); }\n        return id(fragment.format());\n    }\n    */\n\n\n    _decodeParams(params: ReadonlyArray<ParamType>, data: BytesLike): Result {\n        return this.#abiCoder.decode(params, data)\n    }\n\n    _encodeParams(params: ReadonlyArray<ParamType>, values: ReadonlyArray<any>): string {\n        return this.#abiCoder.encode(params, values)\n    }\n\n    /**\n     *  Encodes a ``tx.data`` object for deploying the Contract with\n     *  the %%values%% as the constructor arguments.\n     */\n    encodeDeploy(values?: ReadonlyArray<any>): string {\n        return this._encodeParams(this.deploy.inputs, values || [ ]);\n    }\n\n    /**\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n     *  specified error (see [[getError]] for valid values for\n     *  %%key%%).\n     *\n     *  Most developers should prefer the [[parseCallResult]] method instead,\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n     *  corresponding error.\n     */\n    decodeErrorResult(fragment: ErrorFragment | string, data: BytesLike): Result {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getError(fragment);\n            assertArgument(f, \"unknown error\", \"fragment\", fragment);\n            fragment = f;\n        }\n\n        assertArgument(dataSlice(data, 0, 4) === fragment.selector,\n            `data signature does not match error ${ fragment.name }.`, \"data\", data);\n\n        return this._decodeParams(fragment.inputs, dataSlice(data, 4));\n    }\n\n    /**\n     *  Encodes the transaction revert data for a call result that\n     *  reverted from the the Contract with the sepcified %%error%%\n     *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.\n     *\n     *  This is generally not used by most developers, unless trying to mock\n     *  a result from a Contract.\n     */\n    encodeErrorResult(fragment: ErrorFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getError(fragment);\n            assertArgument(f, \"unknown error\", \"fragment\", fragment);\n            fragment = f;\n        }\n\n        return concat([\n            fragment.selector,\n            this._encodeParams(fragment.inputs, values || [ ])\n        ]);\n    }\n\n    /**\n     *  Decodes the %%data%% from a transaction ``tx.data`` for\n     *  the function specified (see [[getFunction]] for valid values\n     *  for %%fragment%%).\n     *\n     *  Most developers should prefer the [[parseTransaction]] method\n     *  instead, which will automatically detect the fragment.\n     */\n    decodeFunctionData(fragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n\n        assertArgument(dataSlice(data, 0, 4) === fragment.selector,\n            `data signature does not match function ${ fragment.name }.`, \"data\", data);\n\n        return this._decodeParams(fragment.inputs, dataSlice(data, 4));\n    }\n\n    /**\n     *  Encodes the ``tx.data`` for a transaction that calls the function\n     *  specified (see [[getFunction]] for valid values for %%fragment%%) with\n     *  the %%values%%.\n     */\n    encodeFunctionData(fragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n\n        return concat([\n            fragment.selector,\n            this._encodeParams(fragment.inputs, values || [ ])\n        ]);\n    }\n\n    /**\n     *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the\n     *  specified function (see [[getFunction]] for valid values for\n     *  %%key%%).\n     *\n     *  Most developers should prefer the [[parseCallResult]] method instead,\n     *  which will automatically detect a ``CALL_EXCEPTION`` and throw the\n     *  corresponding error.\n     */\n    decodeFunctionResult(fragment: FunctionFragment | string, data: BytesLike): Result {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n\n        let message = \"invalid length for result data\";\n\n        const bytes = getBytesCopy(data);\n        if ((bytes.length % 32) === 0) {\n            try {\n                return this.#abiCoder.decode(fragment.outputs, bytes);\n            } catch (error) {\n                message = \"could not decode result data\";\n            }\n        }\n\n        // Call returned data with no error, but the data is junk\n        assert(false, message, \"BAD_DATA\", {\n            value: hexlify(bytes),\n            info: { method: fragment.name, signature: fragment.format() }\n        });\n    }\n\n    makeError(_data: BytesLike, tx: CallExceptionTransaction): CallExceptionError {\n        const data = getBytes(_data, \"data\");\n\n        const error = AbiCoder.getBuiltinCallException(\"call\", tx, data);\n\n        // Not a built-in error; try finding a custom error\n        const customPrefix = \"execution reverted (unknown custom error)\";\n        if (error.message.startsWith(customPrefix)) {\n            const selector = hexlify(data.slice(0, 4));\n\n            const ef = this.getError(selector);\n            if (ef) {\n                try {\n                    const args = this.#abiCoder.decode(ef.inputs, data.slice(4));\n                    error.revert = {\n                        name: ef.name, signature: ef.format(), args\n                    };\n                    error.reason = error.revert.signature;\n                    error.message = `execution reverted: ${ error.reason }`\n                 } catch (e) {\n                    error.message = `execution reverted (coult not decode custom error)`\n                }\n            }\n        }\n\n        // Add the invocation, if available\n        const parsed = this.parseTransaction(tx);\n        if (parsed) {\n            error.invocation = {\n                method: parsed.name,\n                signature: parsed.signature,\n                args: parsed.args\n            };\n        }\n\n        return error;\n    }\n\n    /**\n     *  Encodes the result data (e.g. from an ``eth_call``) for the\n     *  specified function (see [[getFunction]] for valid values\n     *  for %%fragment%%) with %%values%%.\n     *\n     *  This is generally not used by most developers, unless trying to mock\n     *  a result from a Contract.\n     */\n    encodeFunctionResult(fragment: FunctionFragment | string, values?: ReadonlyArray<any>): string {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getFunction(fragment);\n            assertArgument(f, \"unknown function\", \"fragment\", fragment);\n            fragment = f;\n        }\n        return hexlify(this.#abiCoder.encode(fragment.outputs, values || [ ]));\n    }\n/*\n    spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {\n        const promises: Array<Promise<>> = [ ];\n        const process = function(type: ParamType, value: any): any {\n            if (type.baseType === \"array\") {\n                return descend(type.child\n            }\n            if (type. === \"address\") {\n            }\n        };\n\n        const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {\n            if (inputs.length !== values.length) { throw new Error(\"length mismatch\"); }\n            \n        };\n\n        const result: Array<any> = [ ];\n        values.forEach((value, index) => {\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                logger.throwArgumentError(\"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n    }\n*/\n    // Create the filter for the event with search criteria (e.g. for eth_filterLog)\n    encodeFilterTopics(fragment: EventFragment | string, values: ReadonlyArray<any>): Array<null | string | Array<string>> {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n\n        assert(values.length <= fragment.inputs.length, `too many arguments for ${ fragment.format() }`,\n            \"UNEXPECTED_ARGUMENT\", { count: values.length, expectedCount: fragment.inputs.length })\n\n        const topics: Array<null | string | Array<string>> = [];\n        if (!fragment.anonymous) { topics.push(fragment.topicHash); }\n\n        // @TODO: Use the coders for this; to properly support tuples, etc.\n        const encodeTopic = (param: ParamType, value: any): string => {\n            if (param.type === \"string\") {\n                 return id(value);\n            } else if (param.type === \"bytes\") {\n                 return keccak256(hexlify(value));\n            }\n\n            if (param.type === \"bool\" && typeof(value) === \"boolean\") {\n                value = (value ? \"0x01\": \"0x00\");\n            }\n\n            if (param.type.match(/^u?int/)) {\n                value = toBeHex(value);\n            }\n\n            // Check addresses are valid\n            if (param.type === \"address\") { this.#abiCoder.encode( [ \"address\" ], [ value ]); }\n            return zeroPadValue(hexlify(value), 32);\n            //@TOOD should probably be return toHex(value, 32)\n        };\n\n        values.forEach((value, index) => {\n\n            const param = (<EventFragment>fragment).inputs[index];\n\n            if (!param.indexed) {\n                assertArgument(value == null,\n                    \"cannot filter non-indexed parameters; must be null\", (\"contract.\" + param.name), value);\n                return;\n            }\n\n            if (value == null) {\n                topics.push(null);\n            } else if (param.baseType === \"array\" || param.baseType === \"tuple\") {\n                assertArgument(false, \"filtering with tuples or arrays not supported\", (\"contract.\" + param.name), value);\n            } else if (Array.isArray(value)) {\n                topics.push(value.map((value) => encodeTopic(param, value)));\n            } else {\n                topics.push(encodeTopic(param, value));\n            }\n        });\n\n        // Trim off trailing nulls\n        while (topics.length && topics[topics.length - 1] === null) {\n            topics.pop();\n        }\n\n        return topics;\n    }\n\n    encodeEventLog(fragment: EventFragment | string, values: ReadonlyArray<any>): { data: string, topics: Array<string> } {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n\n        const topics: Array<string> = [ ];\n\n        const dataTypes: Array<ParamType> = [ ];\n        const dataValues: Array<string> = [ ];\n\n        if (!fragment.anonymous) {\n            topics.push(fragment.topicHash);\n        }\n\n        assertArgument(values.length === fragment.inputs.length,\n            \"event arguments/values mismatch\", \"values\", values);\n\n        fragment.inputs.forEach((param, index) => {\n            const value = values[index];\n            if (param.indexed) {\n                if (param.type === \"string\") {\n                    topics.push(id(value))\n                } else if (param.type === \"bytes\") {\n                    topics.push(keccak256(value))\n                } else if (param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    // @TODO\n                    throw new Error(\"not implemented\");\n                } else {\n                    topics.push(this.#abiCoder.encode([ param.type] , [ value ]));\n                }\n            } else {\n                dataTypes.push(param);\n                dataValues.push(value);\n            }\n        });\n\n        return {\n            data: this.#abiCoder.encode(dataTypes , dataValues),\n            topics: topics\n        };\n    }\n\n    // Decode a filter for the event and the search criteria\n    decodeEventLog(fragment: EventFragment | string, data: BytesLike, topics?: ReadonlyArray<string>): Result {\n        if (typeof(fragment) === \"string\") {\n            const f = this.getEvent(fragment);\n            assertArgument(f, \"unknown event\", \"eventFragment\", fragment);\n            fragment = f;\n        }\n\n        if (topics != null && !fragment.anonymous) {\n            const eventTopic = fragment.topicHash;\n            assertArgument(isHexString(topics[0], 32) && topics[0].toLowerCase() === eventTopic,\n                \"fragment/topic mismatch\", \"topics[0]\", topics[0]);\n            topics = topics.slice(1);\n        }\n\n        const indexed: Array<ParamType> = [];\n        const nonIndexed: Array<ParamType> = [];\n        const dynamic: Array<boolean> = [];\n\n        fragment.inputs.forEach((param, index) => {\n            if (param.indexed) {\n                if (param.type === \"string\" || param.type === \"bytes\" || param.baseType === \"tuple\" || param.baseType === \"array\") {\n                    indexed.push(ParamType.from({ type: \"bytes32\", name: param.name }));\n                    dynamic.push(true);\n                } else {\n                    indexed.push(param);\n                    dynamic.push(false);\n                }\n            } else {\n                nonIndexed.push(param);\n                dynamic.push(false);\n            }\n        });\n\n        const resultIndexed = (topics != null) ? this.#abiCoder.decode(indexed, concat(topics)): null;\n        const resultNonIndexed = this.#abiCoder.decode(nonIndexed, data, true);\n\n        //const result: (Array<any> & { [ key: string ]: any }) = [ ];\n        const values: Array<any> = [ ];\n        const keys: Array<null | string> = [ ];\n        let nonIndexedIndex = 0, indexedIndex = 0;\n        fragment.inputs.forEach((param, index) => {\n            let value = null;\n            if (param.indexed) {\n                if (resultIndexed == null) {\n                    value = new Indexed(null);\n\n                } else if (dynamic[index]) {\n                    value = new Indexed(resultIndexed[indexedIndex++]);\n\n                } else {\n                    try {\n                        value = resultIndexed[indexedIndex++];\n                    } catch (error) {\n                        value = error;\n                    }\n                }\n            } else {\n                try {\n                    value = resultNonIndexed[nonIndexedIndex++];\n                } catch (error) {\n                    value = error;\n                }\n            }\n\n            values.push(value);\n            keys.push(param.name || null);\n        });\n\n        return Result.fromItems(values, keys);\n    }\n\n    /**\n     *  Parses a transaction, finding the matching function and extracts\n     *  the parameter values along with other useful function details.\n     *\n     *  If the matching function cannot be found, return null.\n     */\n    parseTransaction(tx: { data: string, value?: BigNumberish }): null | TransactionDescription {\n        const data = getBytes(tx.data, \"tx.data\");\n        const value = getBigInt((tx.value != null) ? tx.value: 0, \"tx.value\");\n\n        const fragment = this.getFunction(hexlify(data.slice(0, 4)));\n\n        if (!fragment) { return null; }\n\n        const args = this.#abiCoder.decode(fragment.inputs, data.slice(4));\n        return new TransactionDescription(fragment, fragment.selector, args, value);\n    }\n\n    parseCallResult(data: BytesLike): Result {\n        throw new Error(\"@TODO\");\n    }\n\n    /**\n     *  Parses a receipt log, finding the matching event and extracts\n     *  the parameter values along with other useful event details.\n     *\n     *  If the matching event cannot be found, returns null.\n     */\n    parseLog(log: { topics: Array<string>, data: string}): null | LogDescription {\n        const fragment = this.getEvent(log.topics[0]);\n\n        if (!fragment || fragment.anonymous) { return null; }\n\n        // @TODO: If anonymous, and the only method, and the input count matches, should we parse?\n        //        Probably not, because just because it is the only event in the ABI does\n        //        not mean we have the full ABI; maybe just a fragment?\n\n\n       return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));\n    }\n\n    /**\n     *  Parses a revert data, finding the matching error and extracts\n     *  the parameter values along with other useful error details.\n     *\n     *  If the matching event cannot be found, returns null.\n     */\n    parseError(data: BytesLike): null | ErrorDescription {\n        const hexData = hexlify(data);\n\n        const fragment = this.getError(dataSlice(hexData, 0, 4));\n\n        if (!fragment) { return null; }\n\n        const args = this.#abiCoder.decode(fragment.inputs, dataSlice(hexData, 4));\n        return new ErrorDescription(fragment, fragment.selector, args);\n    }\n\n    /**\n     *  Creates a new [[Interface]] from the ABI %%value%%.\n     *\n     *  The %%value%% may be provided as an existing [[Interface]] object,\n     *  a JSON-encoded ABI or any Human-Readable ABI format.\n     */\n    static from(value: InterfaceAbi | Interface): Interface {\n        // Already an Interface, which is immutable\n        if (value instanceof Interface) { return value; }\n\n        // JSON\n        if (typeof(value) === \"string\") { return new Interface(JSON.parse(value)); }\n\n        // Maybe an interface from an older version, or from a symlinked copy\n        if (typeof((<any>value).format) === \"function\") {\n            return new Interface((<any>value).format(\"json\"));\n        }\n\n        // Array of fragments\n        return new Interface(value);\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}