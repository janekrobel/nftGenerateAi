{"ast":null,"code":"import { useDispatch } from \"react-redux\";\nconst ethers = require('ethers');\nconst abi = require('./artifacts/contracts/AiNft.sol/AiNft.json');\nconst dispatch = useDispatch();\nlet provider;\nlet signer;\nlet contractAddress = \"0xA669F6F1Cb417A13b16D80fc714d191f42783Cae\";\nlet infuraUrl = \"https://goerli.infura.io/v3/5bf64147f23b4d0593632928be0061c3\";\nexports.disconnectToMetamask = () => {};\nexports.connectToMetamask = async () => {\n  if (window.ethereum) {\n    try {\n      window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      provider = new ethers.providers.JsonRpcProvider(infuraUrl);\n      signer = new ethers.providers.Web3Provider(window.ethereum).getSigner();\n      console.log(\"connected\");\n      dispatch(setIsConnected(true));\n    } catch (error) {\n      console.log(error);\n      dispatch(setIsConnected(false));\n    }\n  }\n};\nexports.mint = async imageLink => {\n  try {\n    if (signer && provider) {\n      const aiNftContract = new ethers.Contract(contractAddress, abi.abi, provider);\n      const options = {\n        value: ethers.utils.parseEther(\"0\")\n      };\n      const response = await aiNftContract.connect(signer).mint(imageLink, options);\n      const events = await response.wait();\n      console.log(events.events[0]);\n      return true;\n    }\n  } catch (err) {\n    return false;\n  }\n};\nexports.getAllLinks = async () => {\n  let srcList = [];\n  try {\n    if (signer.acc) {\n      const aiNftContract = new ethers.Contract(contractAddress, abi.abi, provider);\n      const response = await aiNftContract.getOwnedNFTIds(signer.getAddress());\n      //check the response!!!!\n      for (let i = 0; i < response.length; i++) {\n        srcList.push(await aiNftContract.getUrl(response[i]));\n      }\n      console.log(srcList);\n      return srcList;\n    } else {\n      throw false;\n    }\n  } catch (err) {\n    console.log(err);\n    return false;\n  }\n};","map":{"version":3,"names":["useDispatch","ethers","require","abi","dispatch","provider","signer","contractAddress","infuraUrl","exports","disconnectToMetamask","connectToMetamask","window","ethereum","request","method","providers","JsonRpcProvider","Web3Provider","getSigner","console","log","setIsConnected","error","mint","imageLink","aiNftContract","Contract","options","value","utils","parseEther","response","connect","events","wait","err","getAllLinks","srcList","acc","getOwnedNFTIds","getAddress","i","length","push","getUrl"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/src/contractModel.js"],"sourcesContent":["import { useDispatch } from \"react-redux\";\nconst ethers = require('ethers');\nconst abi = require('./artifacts/contracts/AiNft.sol/AiNft.json');\n\nconst dispatch = useDispatch();\n\nlet provider;\nlet signer;\nlet contractAddress = \"0xA669F6F1Cb417A13b16D80fc714d191f42783Cae\";\nlet infuraUrl = \"https://goerli.infura.io/v3/5bf64147f23b4d0593632928be0061c3\";\n\nexports.disconnectToMetamask = () => {\n}\n\nexports.connectToMetamask = async () => {\n    if(window.ethereum) {\n        try{\n            window.ethereum.request({ method: \"eth_requestAccounts\" });\n            provider = new ethers.providers.JsonRpcProvider(infuraUrl);\n            signer = new ethers.providers.Web3Provider(window.ethereum).getSigner();\n            console.log(\"connected\");\n            dispatch(setIsConnected(true));\n        }\n        catch(error){\n            console.log(error);\n            dispatch(setIsConnected(false));\n        }\n    }\n}\n\nexports.mint = async (imageLink) => {\n    try{\n        if(signer && provider){\n            const aiNftContract = new ethers.Contract(contractAddress,abi.abi,provider);\n            const options = {value: ethers.utils.parseEther(\"0\")};\n            const response = await aiNftContract.connect(signer).mint(imageLink,options);\n            const events  = await response.wait();\n            console.log(events.events[0]);\n            return true;\n        }\n    }\n    catch(err){\n        return false;\n    }        \n}\nexports.getAllLinks = async () => {\n    let srcList = [];\n    try{\n        if(signer.acc){\n            const aiNftContract = new ethers.Contract(contractAddress,abi.abi,provider);\n            const response = await aiNftContract.getOwnedNFTIds(signer.getAddress());\n            //check the response!!!!\n            for(let i = 0; i < response.length; i++){\n                srcList.push(await aiNftContract.getUrl(response[i]));\n            }\n            console.log(srcList);\n            return srcList;\n\n        }\n        else{\n            throw false;\n        }\n    }\n    catch(err){\n        console.log(err);\n        return false;\n    }\n\n    \n}\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}