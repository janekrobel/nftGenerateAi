{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFileTrueCaseSync = exports.getFileTrueCase = exports.getAllFilesMatchingSync = exports.getAllFilesMatching = exports.getRealPathSync = exports.getRealPath = exports.InvalidDirectoryError = exports.FileNotFoundError = exports.FileSystemAccessError = void 0;\nconst promises_1 = __importDefault(require(\"fs/promises\"));\nconst fs_1 = __importDefault(require(\"fs\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst errors_1 = require(\"../core/errors\");\n// We use this error to encapsulate any other error possibly thrown by node's\n// fs apis, as sometimes their errors don't have stack traces.\nclass FileSystemAccessError extends errors_1.CustomError {}\nexports.FileSystemAccessError = FileSystemAccessError;\nclass FileNotFoundError extends errors_1.CustomError {\n  constructor(filePath, parent) {\n    super(`File ${filePath} not found`, parent);\n  }\n}\nexports.FileNotFoundError = FileNotFoundError;\nclass InvalidDirectoryError extends errors_1.CustomError {\n  constructor(filePath, parent) {\n    super(`Invalid directory ${filePath}`, parent);\n  }\n}\nexports.InvalidDirectoryError = InvalidDirectoryError;\n/**\n * Returns the real path of absolutePath, resolving symlinks.\n *\n * @throws FileNotFoundError if absolutePath doesn't exist.\n */\nasync function getRealPath(absolutePath) {\n  try {\n    // This method returns the actual casing.\n    // Please read Node.js' docs to learn more.\n    return await promises_1.default.realpath(path_1.default.normalize(absolutePath));\n  } catch (e) {\n    if (e.code === \"ENOENT\") {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw new FileNotFoundError(absolutePath, e);\n    }\n    // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n    throw new FileSystemAccessError(e.message, e);\n  }\n}\nexports.getRealPath = getRealPath;\n/**\n * Sync version of getRealPath\n *\n * @see getRealCase\n */\nfunction getRealPathSync(absolutePath) {\n  try {\n    // This method returns the actual casing.\n    // Please read Node.js' docs to learn more.\n    return fs_1.default.realpathSync.native(path_1.default.normalize(absolutePath));\n  } catch (e) {\n    if (e.code === \"ENOENT\") {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw new FileNotFoundError(absolutePath, e);\n    }\n    // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n    throw new FileSystemAccessError(e.message, e);\n  }\n}\nexports.getRealPathSync = getRealPathSync;\n/**\n * Returns an array of files (not dirs) that match a condition.\n *\n * @param absolutePathToDir A directory. If it doesn't exist `[]` is returned.\n * @param matches A function to filter files (not directories)\n * @returns An An array of absolute paths. Each file has its true case, except\n *  for the initial absolutePathToDir part, which preserves the given casing.\n *  No order is guaranteed.\n */\nasync function getAllFilesMatching(absolutePathToDir, matches) {\n  const dir = await readdir(absolutePathToDir);\n  const results = await Promise.all(dir.map(async file => {\n    const absolutePathToFile = path_1.default.join(absolutePathToDir, file);\n    const stats = await promises_1.default.stat(absolutePathToFile);\n    if (stats.isDirectory()) {\n      const files = await getAllFilesMatching(absolutePathToFile, matches);\n      return files.flat();\n    } else if (matches === undefined || matches(absolutePathToFile)) {\n      return absolutePathToFile;\n    } else {\n      return [];\n    }\n  }));\n  return results.flat();\n}\nexports.getAllFilesMatching = getAllFilesMatching;\n/**\n * Sync version of getAllFilesMatching\n *\n * @see getAllFilesMatching\n */\nfunction getAllFilesMatchingSync(absolutePathToDir, matches) {\n  const dir = readdirSync(absolutePathToDir);\n  const results = dir.map(file => {\n    const absolutePathToFile = path_1.default.join(absolutePathToDir, file);\n    const stats = fs_1.default.statSync(absolutePathToFile);\n    if (stats.isDirectory()) {\n      return getAllFilesMatchingSync(absolutePathToFile, matches).flat();\n    } else if (matches === undefined || matches(absolutePathToFile)) {\n      return absolutePathToFile;\n    } else {\n      return [];\n    }\n  });\n  return results.flat();\n}\nexports.getAllFilesMatchingSync = getAllFilesMatchingSync;\n/**\n * Returns the true case relative path of `relativePath` from `from`, without\n * resolving symlinks.\n */\nasync function getFileTrueCase(from, relativePath) {\n  const dirEntries = await readdir(from);\n  const parts = relativePath.split(path_1.default.sep);\n  const nextDirLowerCase = parts[0].toLowerCase();\n  for (const dirEntry of dirEntries) {\n    if (dirEntry.toLowerCase() === nextDirLowerCase) {\n      if (parts.length === 1) {\n        return dirEntry;\n      }\n      return path_1.default.join(dirEntry, await getFileTrueCase(path_1.default.join(from, dirEntry), path_1.default.relative(parts[0], relativePath)));\n    }\n  }\n  // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n  throw new FileNotFoundError(path_1.default.join(from, relativePath));\n}\nexports.getFileTrueCase = getFileTrueCase;\n/**\n * Sync version of getFileTrueCase\n *\n * @see getFileTrueCase\n */\nfunction getFileTrueCaseSync(from, relativePath) {\n  const dirEntries = readdirSync(from);\n  const parts = relativePath.split(path_1.default.sep);\n  const nextDirLowerCase = parts[0].toLowerCase();\n  for (const dirEntry of dirEntries) {\n    if (dirEntry.toLowerCase() === nextDirLowerCase) {\n      if (parts.length === 1) {\n        return dirEntry;\n      }\n      return path_1.default.join(dirEntry, getFileTrueCaseSync(path_1.default.join(from, dirEntry), path_1.default.relative(parts[0], relativePath)));\n    }\n  }\n  // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n  throw new FileNotFoundError(path_1.default.join(from, relativePath));\n}\nexports.getFileTrueCaseSync = getFileTrueCaseSync;\nasync function readdir(absolutePathToDir) {\n  try {\n    return await promises_1.default.readdir(absolutePathToDir);\n  } catch (e) {\n    if (e.code === \"ENOENT\") {\n      return [];\n    }\n    if (e.code === \"ENOTDIR\") {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw new InvalidDirectoryError(absolutePathToDir, e);\n    }\n    // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n    throw new FileSystemAccessError(e.message, e);\n  }\n}\nfunction readdirSync(absolutePathToDir) {\n  try {\n    return fs_1.default.readdirSync(absolutePathToDir);\n  } catch (e) {\n    if (e.code === \"ENOENT\") {\n      return [];\n    }\n    if (e.code === \"ENOTDIR\") {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw new InvalidDirectoryError(absolutePathToDir, e);\n    }\n    // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n    throw new FileSystemAccessError(e.message, e);\n  }\n}","map":{"version":3,"mappings":"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","names":["FileSystemAccessError","errors_1","exports","FileNotFoundError","constructor","filePath","parent","InvalidDirectoryError","getRealPath","absolutePath","promises_1","realpath","path_1","normalize","e","code","message","getRealPathSync","fs_1","realpathSync","native","getAllFilesMatching","absolutePathToDir","matches","dir","readdir","results","Promise","all","map","file","absolutePathToFile","join","stats","stat","isDirectory","files","flat","undefined","getAllFilesMatchingSync","readdirSync","statSync","getFileTrueCase","from","relativePath","dirEntries","parts","split","sep","nextDirLowerCase","toLowerCase","dirEntry","length","relative","getFileTrueCaseSync"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/hardhat/src/internal/util/fs-utils.ts"],"sourcesContent":["import fsPromises from \"fs/promises\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { CustomError } from \"../core/errors\";\n\n// We use this error to encapsulate any other error possibly thrown by node's\n// fs apis, as sometimes their errors don't have stack traces.\nexport class FileSystemAccessError extends CustomError {}\n\nexport class FileNotFoundError extends CustomError {\n  constructor(filePath: string, parent?: Error) {\n    super(`File ${filePath} not found`, parent);\n  }\n}\nexport class InvalidDirectoryError extends CustomError {\n  constructor(filePath: string, parent: Error) {\n    super(`Invalid directory ${filePath}`, parent);\n  }\n}\n\n/**\n * Returns the real path of absolutePath, resolving symlinks.\n *\n * @throws FileNotFoundError if absolutePath doesn't exist.\n */\nexport async function getRealPath(absolutePath: string): Promise<string> {\n  try {\n    // This method returns the actual casing.\n    // Please read Node.js' docs to learn more.\n    return await fsPromises.realpath(path.normalize(absolutePath));\n  } catch (e: any) {\n    if (e.code === \"ENOENT\") {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw new FileNotFoundError(absolutePath, e);\n    }\n\n    // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n    throw new FileSystemAccessError(e.message, e);\n  }\n}\n\n/**\n * Sync version of getRealPath\n *\n * @see getRealCase\n */\nexport function getRealPathSync(absolutePath: string): string {\n  try {\n    // This method returns the actual casing.\n    // Please read Node.js' docs to learn more.\n    return fs.realpathSync.native(path.normalize(absolutePath));\n  } catch (e: any) {\n    if (e.code === \"ENOENT\") {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw new FileNotFoundError(absolutePath, e);\n    }\n\n    // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n    throw new FileSystemAccessError(e.message, e);\n  }\n}\n\n/**\n * Returns an array of files (not dirs) that match a condition.\n *\n * @param absolutePathToDir A directory. If it doesn't exist `[]` is returned.\n * @param matches A function to filter files (not directories)\n * @returns An An array of absolute paths. Each file has its true case, except\n *  for the initial absolutePathToDir part, which preserves the given casing.\n *  No order is guaranteed.\n */\nexport async function getAllFilesMatching(\n  absolutePathToDir: string,\n  matches?: (absolutePathToFile: string) => boolean\n): Promise<string[]> {\n  const dir = await readdir(absolutePathToDir);\n\n  const results = await Promise.all(\n    dir.map(async (file) => {\n      const absolutePathToFile = path.join(absolutePathToDir, file);\n      const stats = await fsPromises.stat(absolutePathToFile);\n      if (stats.isDirectory()) {\n        const files = await getAllFilesMatching(absolutePathToFile, matches);\n        return files.flat();\n      } else if (matches === undefined || matches(absolutePathToFile)) {\n        return absolutePathToFile;\n      } else {\n        return [];\n      }\n    })\n  );\n\n  return results.flat();\n}\n\n/**\n * Sync version of getAllFilesMatching\n *\n * @see getAllFilesMatching\n */\nexport function getAllFilesMatchingSync(\n  absolutePathToDir: string,\n  matches?: (absolutePathToFile: string) => boolean\n): string[] {\n  const dir = readdirSync(absolutePathToDir);\n\n  const results = dir.map((file) => {\n    const absolutePathToFile = path.join(absolutePathToDir, file);\n    const stats = fs.statSync(absolutePathToFile);\n    if (stats.isDirectory()) {\n      return getAllFilesMatchingSync(absolutePathToFile, matches).flat();\n    } else if (matches === undefined || matches(absolutePathToFile)) {\n      return absolutePathToFile;\n    } else {\n      return [];\n    }\n  });\n\n  return results.flat();\n}\n\n/**\n * Returns the true case relative path of `relativePath` from `from`, without\n * resolving symlinks.\n */\nexport async function getFileTrueCase(\n  from: string,\n  relativePath: string\n): Promise<string> {\n  const dirEntries = await readdir(from);\n\n  const parts = relativePath.split(path.sep);\n  const nextDirLowerCase = parts[0].toLowerCase();\n\n  for (const dirEntry of dirEntries) {\n    if (dirEntry.toLowerCase() === nextDirLowerCase) {\n      if (parts.length === 1) {\n        return dirEntry;\n      }\n\n      return path.join(\n        dirEntry,\n        await getFileTrueCase(\n          path.join(from, dirEntry),\n          path.relative(parts[0], relativePath)\n        )\n      );\n    }\n  }\n\n  // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n  throw new FileNotFoundError(path.join(from, relativePath));\n}\n\n/**\n * Sync version of getFileTrueCase\n *\n * @see getFileTrueCase\n */\nexport function getFileTrueCaseSync(\n  from: string,\n  relativePath: string\n): string {\n  const dirEntries = readdirSync(from);\n\n  const parts = relativePath.split(path.sep);\n  const nextDirLowerCase = parts[0].toLowerCase();\n\n  for (const dirEntry of dirEntries) {\n    if (dirEntry.toLowerCase() === nextDirLowerCase) {\n      if (parts.length === 1) {\n        return dirEntry;\n      }\n\n      return path.join(\n        dirEntry,\n        getFileTrueCaseSync(\n          path.join(from, dirEntry),\n          path.relative(parts[0], relativePath)\n        )\n      );\n    }\n  }\n\n  // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n  throw new FileNotFoundError(path.join(from, relativePath));\n}\n\nasync function readdir(absolutePathToDir: string) {\n  try {\n    return await fsPromises.readdir(absolutePathToDir);\n  } catch (e: any) {\n    if (e.code === \"ENOENT\") {\n      return [];\n    }\n\n    if (e.code === \"ENOTDIR\") {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw new InvalidDirectoryError(absolutePathToDir, e);\n    }\n\n    // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n    throw new FileSystemAccessError(e.message, e);\n  }\n}\n\nfunction readdirSync(absolutePathToDir: string) {\n  try {\n    return fs.readdirSync(absolutePathToDir);\n  } catch (e: any) {\n    if (e.code === \"ENOENT\") {\n      return [];\n    }\n\n    if (e.code === \"ENOTDIR\") {\n      // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n      throw new InvalidDirectoryError(absolutePathToDir, e);\n    }\n\n    // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n    throw new FileSystemAccessError(e.message, e);\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}