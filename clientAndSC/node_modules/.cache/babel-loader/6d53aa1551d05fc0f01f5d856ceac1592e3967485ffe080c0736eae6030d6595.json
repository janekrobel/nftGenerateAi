{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.installCommonjsResolveHooksIfNecessary = void 0;\n/**\n * @internal\n */\nfunction installCommonjsResolveHooksIfNecessary(tsNodeService) {\n  const Module = require('module');\n  const originalResolveFilename = Module._resolveFilename;\n  const originalFindPath = Module._findPath;\n  const shouldInstallHook = tsNodeService.options.experimentalResolver;\n  if (shouldInstallHook) {\n    const {\n      Module_findPath,\n      Module_resolveFilename\n    } = tsNodeService.getNodeCjsLoader();\n    Module._resolveFilename = _resolveFilename;\n    Module._findPath = _findPath;\n    function _resolveFilename(request, parent, isMain, options) {\n      for (var _len = arguments.length, rest = new Array(_len > 4 ? _len - 4 : 0), _key = 4; _key < _len; _key++) {\n        rest[_key - 4] = arguments[_key];\n      }\n      if (!tsNodeService.enabled()) return originalResolveFilename.call(this, request, parent, isMain, options, ...rest);\n      return Module_resolveFilename.call(this, request, parent, isMain, options, ...rest);\n    }\n    function _findPath() {\n      if (!tsNodeService.enabled()) return originalFindPath.apply(this, arguments);\n      return Module_findPath.apply(this, arguments);\n    }\n  }\n}\nexports.installCommonjsResolveHooksIfNecessary = installCommonjsResolveHooksIfNecessary;","map":{"version":3,"mappings":";;;;;;AAoBA;;;AAGA,SAAgBA,sCAAsC,CAACC,aAAsB;EAC3E,MAAMC,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAmC;EAClE,MAAMC,uBAAuB,GAAGF,MAAM,CAACG,gBAAgB;EACvD,MAAMC,gBAAgB,GAAGJ,MAAM,CAACK,SAAS;EACzC,MAAMC,iBAAiB,GAAGP,aAAa,CAACQ,OAAO,CAACC,oBAAoB;EACpE,IAAIF,iBAAiB,EAAE;IACrB,MAAM;MAAEG,eAAe;MAAEC;IAAsB,CAAE,GAC/CX,aAAa,CAACY,gBAAgB,EAAE;IAClCX,MAAM,CAACG,gBAAgB,GAAGA,gBAAgB;IAC1CH,MAAM,CAACK,SAAS,GAAGA,SAAS;IAC5B,SAASF,gBAAgB,CAEvBS,OAAe,EACfC,MAAe,EACfC,MAAgB,EAChBP,OAAsC,EAC3B;MAAA,kCAARQ,IAAQ;QAARA,IAAQ;MAAA;MAEX,IAAI,CAAChB,aAAa,CAACiB,OAAO,EAAE,EAC1B,OAAOd,uBAAuB,CAACe,IAAI,CACjC,IAAI,EACJL,OAAO,EACPC,MAAM,EACNC,MAAM,EACNP,OAAO,EACP,GAAGQ,IAAI,CACR;MAEH,OAAOL,sBAAsB,CAACO,IAAI,CAChC,IAAI,EACJL,OAAO,EACPC,MAAM,EACNC,MAAM,EACNP,OAAO,EACP,GAAGQ,IAAI,CACR;IACH;IACA,SAASV,SAAS;MAChB,IAAI,CAACN,aAAa,CAACiB,OAAO,EAAE,EAC1B,OAAOZ,gBAAgB,CAACc,KAAK,CAAC,IAAI,EAAEC,SAAgB,CAAC;MACvD,OAAOV,eAAe,CAACS,KAAK,CAAC,IAAI,EAAEC,SAAgB,CAAC;IACtD;;AAEJ;AA3CAC","names":["installCommonjsResolveHooksIfNecessary","tsNodeService","Module","require","originalResolveFilename","_resolveFilename","originalFindPath","_findPath","shouldInstallHook","options","experimentalResolver","Module_findPath","Module_resolveFilename","getNodeCjsLoader","request","parent","isMain","rest","enabled","call","apply","arguments","exports"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ts-node/src/cjs-resolve-hooks.ts"],"sourcesContent":["import type Module = require('module');\nimport type { Service } from '.';\n\n/** @internal */\nexport type ModuleConstructorWithInternals = typeof Module & {\n  _resolveFilename(\n    request: string,\n    parent?: Module,\n    isMain?: boolean,\n    options?: ModuleResolveFilenameOptions,\n    ...rest: any[]\n  ): string;\n  _preloadModules(requests?: string[]): void;\n  _findPath(request: string, paths: string[], isMain: boolean): string;\n};\n\ninterface ModuleResolveFilenameOptions {\n  paths?: Array<string>;\n}\n\n/**\n * @internal\n */\nexport function installCommonjsResolveHooksIfNecessary(tsNodeService: Service) {\n  const Module = require('module') as ModuleConstructorWithInternals;\n  const originalResolveFilename = Module._resolveFilename;\n  const originalFindPath = Module._findPath;\n  const shouldInstallHook = tsNodeService.options.experimentalResolver;\n  if (shouldInstallHook) {\n    const { Module_findPath, Module_resolveFilename } =\n      tsNodeService.getNodeCjsLoader();\n    Module._resolveFilename = _resolveFilename;\n    Module._findPath = _findPath;\n    function _resolveFilename(\n      this: any,\n      request: string,\n      parent?: Module,\n      isMain?: boolean,\n      options?: ModuleResolveFilenameOptions,\n      ...rest: []\n    ): string {\n      if (!tsNodeService.enabled())\n        return originalResolveFilename.call(\n          this,\n          request,\n          parent,\n          isMain,\n          options,\n          ...rest\n        );\n\n      return Module_resolveFilename.call(\n        this,\n        request,\n        parent,\n        isMain,\n        options,\n        ...rest\n      );\n    }\n    function _findPath(this: any): string {\n      if (!tsNodeService.enabled())\n        return originalFindPath.apply(this, arguments as any);\n      return Module_findPath.apply(this, arguments as any);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}