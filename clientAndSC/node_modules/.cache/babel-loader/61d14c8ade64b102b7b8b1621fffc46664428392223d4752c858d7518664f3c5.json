{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ripemd160 = void 0;\nconst ripemd160_1 = require(\"@noble/hashes/ripemd160\");\nconst index_js_1 = require(\"../utils/index.js\");\nlet locked = false;\nconst _ripemd160 = function (data) {\n  return (0, ripemd160_1.ripemd160)(data);\n};\nlet __ripemd160 = _ripemd160;\n/**\n *  Compute the cryptographic RIPEMD-160 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    ripemd160(\"0x\")\n *    //_result:\n *\n *    ripemd160(\"0x1337\")\n *    //_result:\n *\n *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nfunction ripemd160(_data) {\n  const data = (0, index_js_1.getBytes)(_data, \"data\");\n  return (0, index_js_1.hexlify)(__ripemd160(data));\n}\nexports.ripemd160 = ripemd160;\nripemd160._ = _ripemd160;\nripemd160.lock = function () {\n  locked = true;\n};\nripemd160.register = function (func) {\n  if (locked) {\n    throw new TypeError(\"ripemd160 is locked\");\n  }\n  __ripemd160 = func;\n};\nObject.freeze(ripemd160);","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AAKA,IAAIA,MAAM,GAAG,KAAK;AAElB,MAAMC,UAAU,GAAG,UAASC,IAAgB;EACxC,OAAO,yBAAe,EAACA,IAAI,CAAC;AAChC,CAAC;AAED,IAAIC,WAAW,GAAoCF,UAAU;AAE7D;;;;;;;;;;;;;;;;;AAiBA,SAAgBG,SAAS,CAACC,KAAgB;EACtC,MAAMH,IAAI,GAAG,uBAAQ,EAACG,KAAK,EAAE,MAAM,CAAC;EACpC,OAAO,sBAAO,EAACF,WAAW,CAACD,IAAI,CAAC,CAAC;AACrC;AAHAI;AAIAF,SAAS,CAACG,CAAC,GAAGN,UAAU;AACxBG,SAAS,CAACI,IAAI,GAAG;EAAmBR,MAAM,GAAG,IAAI;AAAE,CAAC;AACpDI,SAAS,CAACK,QAAQ,GAAG,UAASC,IAAqC;EAC/D,IAAIV,MAAM,EAAE;IAAE,MAAM,IAAIW,SAAS,CAAC,qBAAqB,CAAC;;EACxDR,WAAW,GAAGO,IAAI;AACtB,CAAC;AACDE,MAAM,CAACC,MAAM,CAACT,SAAS,CAAC","names":["locked","_ripemd160","data","__ripemd160","ripemd160","_data","exports","_","lock","register","func","TypeError","Object","freeze"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/crypto/ripemd160.ts"],"sourcesContent":["import { ripemd160 as noble_ripemd160 } from \"@noble/hashes/ripemd160\";\n\nimport { getBytes,  hexlify } from \"../utils/index.js\";\n\nimport type { BytesLike } from \"../utils/index.js\";\n\n\nlet locked = false;\n\nconst _ripemd160 = function(data: Uint8Array): Uint8Array {\n    return noble_ripemd160(data);\n}\n\nlet __ripemd160: (data: Uint8Array) => BytesLike = _ripemd160;\n\n/**\n *  Compute the cryptographic RIPEMD-160 hash of %%data%%.\n *\n *  @_docloc: api/crypto:Hash Functions\n *  @returns DataHexstring\n *\n *  @example:\n *    ripemd160(\"0x\")\n *    //_result:\n *\n *    ripemd160(\"0x1337\")\n *    //_result:\n *\n *    ripemd160(new Uint8Array([ 0x13, 0x37 ]))\n *    //_result:\n *\n */\nexport function ripemd160(_data: BytesLike): string {\n    const data = getBytes(_data, \"data\");\n    return hexlify(__ripemd160(data));\n}\nripemd160._ = _ripemd160;\nripemd160.lock = function(): void { locked = true; }\nripemd160.register = function(func: (data: Uint8Array) => BytesLike) {\n    if (locked) { throw new TypeError(\"ripemd160 is locked\"); }\n    __ripemd160 = func;\n}\nObject.freeze(ripemd160);\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}