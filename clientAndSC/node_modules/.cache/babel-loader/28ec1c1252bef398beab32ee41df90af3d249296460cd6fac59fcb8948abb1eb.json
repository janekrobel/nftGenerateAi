{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultSolcOutputSelection = exports.defaultMochaOptions = exports.defaultHttpNetworkParams = exports.defaultHardhatNetworkParams = exports.DEFAULT_GAS_MULTIPLIER = exports.defaultHardhatNetworkHdAccountsConfigParams = exports.defaultHdAccountsConfigParams = exports.defaultLocalhostNetworkParams = exports.defaultDefaultNetwork = exports.DEFAULT_HARDHAT_NETWORK_BALANCE = exports.HARDHAT_NETWORK_MNEMONIC = exports.HARDHAT_NETWORK_DEFAULT_INITIAL_BASE_FEE_PER_GAS = exports.HARDHAT_NETWORK_DEFAULT_MAX_PRIORITY_FEE_PER_GAS = exports.HARDHAT_NETWORK_DEFAULT_GAS_PRICE = exports.DEFAULT_SOLC_VERSION = void 0;\nconst hardforks_1 = require(\"../../util/hardforks\");\nconst constants_1 = require(\"../../constants\");\nexports.DEFAULT_SOLC_VERSION = \"0.7.3\";\nexports.HARDHAT_NETWORK_DEFAULT_GAS_PRICE = \"auto\";\nexports.HARDHAT_NETWORK_DEFAULT_MAX_PRIORITY_FEE_PER_GAS = 1e9;\nexports.HARDHAT_NETWORK_DEFAULT_INITIAL_BASE_FEE_PER_GAS = 1e9;\nexports.HARDHAT_NETWORK_MNEMONIC = \"test test test test test test test test test test test junk\";\nexports.DEFAULT_HARDHAT_NETWORK_BALANCE = \"10000000000000000000000\";\nexports.defaultDefaultNetwork = constants_1.HARDHAT_NETWORK_NAME;\nexports.defaultLocalhostNetworkParams = {\n  url: \"http://127.0.0.1:8545\",\n  timeout: 40000\n};\nexports.defaultHdAccountsConfigParams = {\n  initialIndex: 0,\n  count: 20,\n  path: \"m/44'/60'/0'/0\",\n  passphrase: \"\"\n};\nexports.defaultHardhatNetworkHdAccountsConfigParams = {\n  ...exports.defaultHdAccountsConfigParams,\n  mnemonic: exports.HARDHAT_NETWORK_MNEMONIC,\n  accountsBalance: exports.DEFAULT_HARDHAT_NETWORK_BALANCE\n};\nexports.DEFAULT_GAS_MULTIPLIER = 1;\nexports.defaultHardhatNetworkParams = {\n  hardfork: \"merge\",\n  blockGasLimit: 30000000,\n  gasPrice: exports.HARDHAT_NETWORK_DEFAULT_GAS_PRICE,\n  chainId: 31337,\n  throwOnTransactionFailures: true,\n  throwOnCallFailures: true,\n  allowUnlimitedContractSize: false,\n  mining: {\n    auto: true,\n    interval: 0,\n    mempool: {\n      order: \"priority\"\n    }\n  },\n  accounts: exports.defaultHardhatNetworkHdAccountsConfigParams,\n  loggingEnabled: false,\n  gasMultiplier: exports.DEFAULT_GAS_MULTIPLIER,\n  minGasPrice: 0n,\n  chains: new Map([[\n  // block numbers below were taken from https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/common/src/chains\n  1, {\n    hardforkHistory: new Map([[hardforks_1.HardforkName.BYZANTIUM, 4370000], [hardforks_1.HardforkName.CONSTANTINOPLE, 7280000], [hardforks_1.HardforkName.PETERSBURG, 7280000], [hardforks_1.HardforkName.ISTANBUL, 9069000], [hardforks_1.HardforkName.MUIR_GLACIER, 9200000], [hardforks_1.HardforkName.BERLIN, 12244000], [hardforks_1.HardforkName.LONDON, 12965000]])\n  }], [3, {\n    hardforkHistory: new Map([[hardforks_1.HardforkName.BYZANTIUM, 1700000], [hardforks_1.HardforkName.CONSTANTINOPLE, 4230000], [hardforks_1.HardforkName.PETERSBURG, 4939394], [hardforks_1.HardforkName.ISTANBUL, 6485846], [hardforks_1.HardforkName.MUIR_GLACIER, 7117117], [hardforks_1.HardforkName.BERLIN, 9812189], [hardforks_1.HardforkName.LONDON, 10499401]])\n  }], [4, {\n    hardforkHistory: new Map([[hardforks_1.HardforkName.BYZANTIUM, 1035301], [hardforks_1.HardforkName.CONSTANTINOPLE, 3660663], [hardforks_1.HardforkName.PETERSBURG, 4321234], [hardforks_1.HardforkName.ISTANBUL, 5435345], [hardforks_1.HardforkName.BERLIN, 8290928], [hardforks_1.HardforkName.LONDON, 8897988]])\n  }], [5, {\n    hardforkHistory: new Map([[hardforks_1.HardforkName.ISTANBUL, 1561651], [hardforks_1.HardforkName.BERLIN, 4460644], [hardforks_1.HardforkName.LONDON, 5062605]])\n  }], [42, {\n    hardforkHistory: new Map([[hardforks_1.HardforkName.BYZANTIUM, 5067000], [hardforks_1.HardforkName.CONSTANTINOPLE, 9200000], [hardforks_1.HardforkName.PETERSBURG, 10255201], [hardforks_1.HardforkName.ISTANBUL, 14111141], [hardforks_1.HardforkName.BERLIN, 24770900], [hardforks_1.HardforkName.LONDON, 26741100]])\n  }]])\n};\nexports.defaultHttpNetworkParams = {\n  accounts: \"remote\",\n  gas: \"auto\",\n  gasPrice: \"auto\",\n  gasMultiplier: exports.DEFAULT_GAS_MULTIPLIER,\n  httpHeaders: {},\n  timeout: 20000\n};\nexports.defaultMochaOptions = {\n  timeout: 40000\n};\nexports.defaultSolcOutputSelection = {\n  \"*\": {\n    \"*\": [\"abi\", \"evm.bytecode\", \"evm.deployedBytecode\", \"evm.methodIdentifiers\", \"metadata\"],\n    \"\": [\"ast\"]\n  }\n};","map":{"version":3,"mappings":"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","names":["exports","constants_1","url","timeout","initialIndex","count","path","passphrase","mnemonic","accountsBalance","hardfork","blockGasLimit","gasPrice","chainId","throwOnTransactionFailures","throwOnCallFailures","allowUnlimitedContractSize","mining","auto","interval","mempool","order","accounts","loggingEnabled","gasMultiplier","minGasPrice","chains","Map","hardforkHistory","hardforks_1","BYZANTIUM","CONSTANTINOPLE","PETERSBURG","ISTANBUL","MUIR_GLACIER","BERLIN","LONDON","gas","httpHeaders"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/hardhat/src/internal/core/config/default-config.ts"],"sourcesContent":["import { HardhatNetworkConfig } from \"../../../types\";\nimport { HardforkName } from \"../../util/hardforks\";\nimport { HARDHAT_NETWORK_NAME } from \"../../constants\";\n\nexport const DEFAULT_SOLC_VERSION = \"0.7.3\";\nexport const HARDHAT_NETWORK_DEFAULT_GAS_PRICE = \"auto\";\nexport const HARDHAT_NETWORK_DEFAULT_MAX_PRIORITY_FEE_PER_GAS = 1e9;\nexport const HARDHAT_NETWORK_DEFAULT_INITIAL_BASE_FEE_PER_GAS = 1e9;\nexport const HARDHAT_NETWORK_MNEMONIC =\n  \"test test test test test test test test test test test junk\";\nexport const DEFAULT_HARDHAT_NETWORK_BALANCE = \"10000000000000000000000\";\n\nexport const defaultDefaultNetwork = HARDHAT_NETWORK_NAME;\n\nexport const defaultLocalhostNetworkParams = {\n  url: \"http://127.0.0.1:8545\",\n  timeout: 40000,\n};\n\nexport const defaultHdAccountsConfigParams = {\n  initialIndex: 0,\n  count: 20,\n  path: \"m/44'/60'/0'/0\",\n  passphrase: \"\",\n};\n\nexport const defaultHardhatNetworkHdAccountsConfigParams = {\n  ...defaultHdAccountsConfigParams,\n  mnemonic: HARDHAT_NETWORK_MNEMONIC,\n  accountsBalance: DEFAULT_HARDHAT_NETWORK_BALANCE,\n};\n\nexport const DEFAULT_GAS_MULTIPLIER = 1;\n\nexport const defaultHardhatNetworkParams: Omit<\n  HardhatNetworkConfig,\n  \"gas\" | \"initialDate\"\n> = {\n  hardfork: \"merge\",\n  blockGasLimit: 30_000_000,\n  gasPrice: HARDHAT_NETWORK_DEFAULT_GAS_PRICE,\n  chainId: 31337,\n  throwOnTransactionFailures: true,\n  throwOnCallFailures: true,\n  allowUnlimitedContractSize: false,\n  mining: {\n    auto: true,\n    interval: 0,\n    mempool: {\n      order: \"priority\",\n    },\n  },\n  accounts: defaultHardhatNetworkHdAccountsConfigParams,\n  loggingEnabled: false,\n  gasMultiplier: DEFAULT_GAS_MULTIPLIER,\n  minGasPrice: 0n,\n  chains: new Map([\n    [\n      // block numbers below were taken from https://github.com/ethereumjs/ethereumjs-monorepo/tree/master/packages/common/src/chains\n      1, // mainnet\n      {\n        hardforkHistory: new Map([\n          [HardforkName.BYZANTIUM, 4370000],\n          [HardforkName.CONSTANTINOPLE, 7280000],\n          [HardforkName.PETERSBURG, 7280000],\n          [HardforkName.ISTANBUL, 9069000],\n          [HardforkName.MUIR_GLACIER, 9200000],\n          [HardforkName.BERLIN, 12244000],\n          [HardforkName.LONDON, 12965000],\n        ]),\n      },\n    ],\n    [\n      3, // ropsten\n      {\n        hardforkHistory: new Map([\n          [HardforkName.BYZANTIUM, 1700000],\n          [HardforkName.CONSTANTINOPLE, 4230000],\n          [HardforkName.PETERSBURG, 4939394],\n          [HardforkName.ISTANBUL, 6485846],\n          [HardforkName.MUIR_GLACIER, 7117117],\n          [HardforkName.BERLIN, 9812189],\n          [HardforkName.LONDON, 10499401],\n        ]),\n      },\n    ],\n    [\n      4, // rinkeby\n      {\n        hardforkHistory: new Map([\n          [HardforkName.BYZANTIUM, 1035301],\n          [HardforkName.CONSTANTINOPLE, 3660663],\n          [HardforkName.PETERSBURG, 4321234],\n          [HardforkName.ISTANBUL, 5435345],\n          [HardforkName.BERLIN, 8290928],\n          [HardforkName.LONDON, 8897988],\n        ]),\n      },\n    ],\n    [\n      5, // goerli\n      {\n        hardforkHistory: new Map([\n          [HardforkName.ISTANBUL, 1561651],\n          [HardforkName.BERLIN, 4460644],\n          [HardforkName.LONDON, 5062605],\n        ]),\n      },\n    ],\n    [\n      42, // kovan\n      {\n        hardforkHistory: new Map([\n          [HardforkName.BYZANTIUM, 5067000],\n          [HardforkName.CONSTANTINOPLE, 9200000],\n          [HardforkName.PETERSBURG, 10255201],\n          [HardforkName.ISTANBUL, 14111141],\n          [HardforkName.BERLIN, 24770900],\n          [HardforkName.LONDON, 26741100],\n        ]),\n      },\n    ],\n  ]),\n};\n\nexport const defaultHttpNetworkParams = {\n  accounts: \"remote\" as \"remote\",\n  gas: \"auto\" as \"auto\",\n  gasPrice: \"auto\" as \"auto\",\n  gasMultiplier: DEFAULT_GAS_MULTIPLIER,\n  httpHeaders: {},\n  timeout: 20000,\n};\n\nexport const defaultMochaOptions: Mocha.MochaOptions = {\n  timeout: 40000,\n};\n\nexport const defaultSolcOutputSelection = {\n  \"*\": {\n    \"*\": [\n      \"abi\",\n      \"evm.bytecode\",\n      \"evm.deployedBytecode\",\n      \"evm.methodIdentifiers\",\n      \"metadata\",\n    ],\n    \"\": [\"ast\"],\n  },\n};\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}