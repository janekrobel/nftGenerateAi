{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Contract = exports.BaseContract = exports.resolveArgs = exports.copyOverrides = void 0;\nconst index_js_1 = require(\"../abi/index.js\");\nconst index_js_2 = require(\"../address/index.js\");\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nconst provider_js_1 = require(\"../providers/provider.js\");\nconst index_js_3 = require(\"../utils/index.js\");\nconst wrappers_js_1 = require(\"./wrappers.js\");\nconst BN_0 = BigInt(0);\nfunction canCall(value) {\n  return value && typeof value.call === \"function\";\n}\nfunction canEstimate(value) {\n  return value && typeof value.estimateGas === \"function\";\n}\nfunction canResolve(value) {\n  return value && typeof value.resolveName === \"function\";\n}\nfunction canSend(value) {\n  return value && typeof value.sendTransaction === \"function\";\n}\nclass PreparedTopicFilter {\n  #filter;\n  fragment;\n  constructor(contract, fragment, args) {\n    (0, index_js_3.defineProperties)(this, {\n      fragment\n    });\n    if (fragment.inputs.length < args.length) {\n      throw new Error(\"too many arguments\");\n    }\n    // Recursively descend into args and resolve any addresses\n    const runner = getRunner(contract.runner, \"resolveName\");\n    const resolver = canResolve(runner) ? runner : null;\n    this.#filter = async function () {\n      const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {\n        const arg = args[index];\n        if (arg == null) {\n          return null;\n        }\n        return param.walkAsync(args[index], (type, value) => {\n          if (type === \"address\") {\n            return (0, index_js_2.resolveAddress)(value, resolver);\n          }\n          return value;\n        });\n      }));\n      return contract.interface.encodeFilterTopics(fragment, resolvedArgs);\n    }();\n  }\n  getTopicFilter() {\n    return this.#filter;\n  }\n}\n// A = Arguments passed in as a tuple\n// R = The result type of the call (i.e. if only one return type,\n//     the qualified type, otherwise Result)\n// D = The type the default call will return (i.e. R for view/pure,\n//     TransactionResponse otherwise)\n//export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {\nfunction _WrappedMethodBase() {\n  return Function;\n}\nfunction getRunner(value, feature) {\n  if (value == null) {\n    return null;\n  }\n  if (typeof value[feature] === \"function\") {\n    return value;\n  }\n  if (value.provider && typeof value.provider[feature] === \"function\") {\n    return value.provider;\n  }\n  return null;\n}\nfunction getProvider(value) {\n  if (value == null) {\n    return null;\n  }\n  return value.provider || null;\n}\n/**\n *  @_ignore:\n */\nasync function copyOverrides(arg, allowed) {\n  // Create a shallow copy (we'll deep-ify anything needed during normalizing)\n  const overrides = (0, provider_js_1.copyRequest)(index_js_1.Typed.dereference(arg, \"overrides\"));\n  (0, index_js_3.assertArgument)(overrides.to == null || (allowed || []).indexOf(\"to\") >= 0, \"cannot override to\", \"overrides.to\", overrides.to);\n  (0, index_js_3.assertArgument)(overrides.data == null || (allowed || []).indexOf(\"data\") >= 0, \"cannot override data\", \"overrides.data\", overrides.data);\n  // Resolve any from\n  if (overrides.from) {\n    overrides.from = await (0, index_js_2.resolveAddress)(overrides.from);\n  }\n  return overrides;\n}\nexports.copyOverrides = copyOverrides;\n/**\n *  @_ignore:\n */\nasync function resolveArgs(_runner, inputs, args) {\n  // Recursively descend into args and resolve any addresses\n  const runner = getRunner(_runner, \"resolveName\");\n  const resolver = canResolve(runner) ? runner : null;\n  return await Promise.all(inputs.map((param, index) => {\n    return param.walkAsync(args[index], (type, value) => {\n      value = index_js_1.Typed.dereference(value, type);\n      if (type === \"address\") {\n        return (0, index_js_2.resolveAddress)(value, resolver);\n      }\n      return value;\n    });\n  }));\n}\nexports.resolveArgs = resolveArgs;\nclass WrappedFallback {\n  _contract;\n  constructor(contract) {\n    (0, index_js_3.defineProperties)(this, {\n      _contract: contract\n    });\n    const proxy = new Proxy(this, {\n      // Perform send when called\n      apply: async (target, thisArg, args) => {\n        return await target.send(...args);\n      }\n    });\n    return proxy;\n  }\n  async populateTransaction(overrides) {\n    // If an overrides was passed in, copy it and normalize the values\n    const tx = await copyOverrides(overrides, [\"data\"]);\n    tx.to = await this._contract.getAddress();\n    const iface = this._contract.interface;\n    // Only allow payable contracts to set non-zero value\n    const payable = iface.receive || iface.fallback && iface.fallback.payable;\n    (0, index_js_3.assertArgument)(payable || (tx.value || BN_0) === BN_0, \"cannot send value to non-payable contract\", \"overrides.value\", tx.value);\n    // Only allow fallback contracts to set non-empty data\n    (0, index_js_3.assertArgument)(iface.fallback || (tx.data || \"0x\") === \"0x\", \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n    return tx;\n  }\n  async staticCall(overrides) {\n    const runner = getRunner(this._contract.runner, \"call\");\n    (0, index_js_3.assert)(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"call\"\n    });\n    const tx = await this.populateTransaction(overrides);\n    try {\n      return await runner.call(tx);\n    } catch (error) {\n      if ((0, index_js_3.isCallException)(error) && error.data) {\n        throw this._contract.interface.makeError(error.data, tx);\n      }\n      throw error;\n    }\n  }\n  async send(overrides) {\n    const runner = this._contract.runner;\n    (0, index_js_3.assert)(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"sendTransaction\"\n    });\n    const tx = await runner.sendTransaction(await this.populateTransaction(overrides));\n    const provider = getProvider(this._contract.runner);\n    // @TODO: the provider can be null; make a custom dummy provider that will throw a\n    // meaningful error\n    return new wrappers_js_1.ContractTransactionResponse(this._contract.interface, provider, tx);\n  }\n  async estimateGas(overrides) {\n    const runner = getRunner(this._contract.runner, \"estimateGas\");\n    (0, index_js_3.assert)(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"estimateGas\"\n    });\n    return await runner.estimateGas(await this.populateTransaction(overrides));\n  }\n}\nclass WrappedMethod extends _WrappedMethodBase() {\n  name = \"\"; // Investigate!\n  _contract;\n  _key;\n  constructor(contract, key) {\n    super();\n    (0, index_js_3.defineProperties)(this, {\n      name: contract.interface.getFunctionName(key),\n      _contract: contract,\n      _key: key\n    });\n    const proxy = new Proxy(this, {\n      // Perform the default operation for this fragment type\n      apply: async (target, thisArg, args) => {\n        const fragment = target.getFragment(...args);\n        if (fragment.constant) {\n          return await target.staticCall(...args);\n        }\n        return await target.send(...args);\n      }\n    });\n    return proxy;\n  }\n  // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n  get fragment() {\n    const fragment = this._contract.interface.getFunction(this._key);\n    (0, index_js_3.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fragment\"\n    });\n    return fragment;\n  }\n  getFragment() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    const fragment = this._contract.interface.getFunction(this._key, args);\n    (0, index_js_3.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fragment\"\n    });\n    return fragment;\n  }\n  async populateTransaction() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    const fragment = this.getFragment(...args);\n    // If an overrides was passed in, copy it and normalize the values\n    let overrides = {};\n    if (fragment.inputs.length + 1 === args.length) {\n      overrides = await copyOverrides(args.pop());\n    }\n    if (fragment.inputs.length !== args.length) {\n      throw new Error(\"internal error: fragment inputs doesn't match arguments; should not happen\");\n    }\n    const resolvedArgs = await resolveArgs(this._contract.runner, fragment.inputs, args);\n    return Object.assign({}, overrides, await (0, index_js_3.resolveProperties)({\n      to: this._contract.getAddress(),\n      data: this._contract.interface.encodeFunctionData(fragment, resolvedArgs)\n    }));\n  }\n  async staticCall() {\n    const result = await this.staticCallResult(...arguments);\n    if (result.length === 1) {\n      return result[0];\n    }\n    return result;\n  }\n  async send() {\n    const runner = this._contract.runner;\n    (0, index_js_3.assert)(canSend(runner), \"contract runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"sendTransaction\"\n    });\n    const tx = await runner.sendTransaction(await this.populateTransaction(...arguments));\n    const provider = getProvider(this._contract.runner);\n    // @TODO: the provider can be null; make a custom dummy provider that will throw a\n    // meaningful error\n    return new wrappers_js_1.ContractTransactionResponse(this._contract.interface, provider, tx);\n  }\n  async estimateGas() {\n    const runner = getRunner(this._contract.runner, \"estimateGas\");\n    (0, index_js_3.assert)(canEstimate(runner), \"contract runner does not support gas estimation\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"estimateGas\"\n    });\n    return await runner.estimateGas(await this.populateTransaction(...arguments));\n  }\n  async staticCallResult() {\n    const runner = getRunner(this._contract.runner, \"call\");\n    (0, index_js_3.assert)(canCall(runner), \"contract runner does not support calling\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"call\"\n    });\n    const tx = await this.populateTransaction(...arguments);\n    let result = \"0x\";\n    try {\n      result = await runner.call(tx);\n    } catch (error) {\n      if ((0, index_js_3.isCallException)(error) && error.data) {\n        throw this._contract.interface.makeError(error.data, tx);\n      }\n      throw error;\n    }\n    const fragment = this.getFragment(...arguments);\n    return this._contract.interface.decodeFunctionResult(fragment, result);\n  }\n}\nfunction _WrappedEventBase() {\n  return Function;\n}\nclass WrappedEvent extends _WrappedEventBase() {\n  name = \"\"; // @TODO: investigate \n  _contract;\n  _key;\n  constructor(contract, key) {\n    super();\n    (0, index_js_3.defineProperties)(this, {\n      name: contract.interface.getEventName(key),\n      _contract: contract,\n      _key: key\n    });\n    return new Proxy(this, {\n      // Perform the default operation for this fragment type\n      apply: (target, thisArg, args) => {\n        return new PreparedTopicFilter(contract, target.getFragment(...args), args);\n      }\n    });\n  }\n  // Only works on non-ambiguous keys\n  get fragment() {\n    const fragment = this._contract.interface.getEvent(this._key);\n    (0, index_js_3.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fragment\"\n    });\n    return fragment;\n  }\n  getFragment() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    const fragment = this._contract.interface.getEvent(this._key, args);\n    (0, index_js_3.assert)(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fragment\"\n    });\n    return fragment;\n  }\n}\n;\n// The combination of TypeScrype, Private Fields and Proxies makes\n// the world go boom; so we hide variables with some trickery keeping\n// a symbol attached to each BaseContract which its sub-class (even\n// via a Proxy) can reach and use to look up its internal values.\nconst internal = Symbol.for(\"_ethersInternal_contract\");\nconst internalValues = new WeakMap();\nfunction setInternal(contract, values) {\n  internalValues.set(contract[internal], values);\n}\nfunction getInternal(contract) {\n  return internalValues.get(contract[internal]);\n}\nfunction isDeferred(value) {\n  return value && typeof value === \"object\" && \"getTopicFilter\" in value && typeof value.getTopicFilter === \"function\" && value.fragment;\n}\nasync function getSubInfo(contract, event) {\n  let topics;\n  let fragment = null;\n  // Convert named events to topicHash and get the fragment for\n  // events which need deconstructing.\n  if (Array.isArray(event)) {\n    const topicHashify = function (name) {\n      if ((0, index_js_3.isHexString)(name, 32)) {\n        return name;\n      }\n      const fragment = contract.interface.getEvent(name);\n      (0, index_js_3.assertArgument)(fragment, \"unknown fragment\", \"name\", name);\n      return fragment.topicHash;\n    };\n    // Array of Topics and Names; e.g. `[ \"0x1234...89ab\", \"Transfer(address)\" ]`\n    topics = event.map(e => {\n      if (e == null) {\n        return null;\n      }\n      if (Array.isArray(e)) {\n        return e.map(topicHashify);\n      }\n      return topicHashify(e);\n    });\n  } else if (event === \"*\") {\n    topics = [null];\n  } else if (typeof event === \"string\") {\n    if ((0, index_js_3.isHexString)(event, 32)) {\n      // Topic Hash\n      topics = [event];\n    } else {\n      // Name or Signature; e.g. `\"Transfer\", `\"Transfer(address)\"`\n      fragment = contract.interface.getEvent(event);\n      (0, index_js_3.assertArgument)(fragment, \"unknown fragment\", \"event\", event);\n      topics = [fragment.topicHash];\n    }\n  } else if (isDeferred(event)) {\n    // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`\n    topics = await event.getTopicFilter();\n  } else if (\"fragment\" in event) {\n    // ContractEvent; e.g. `contract.filter.Transfer`\n    fragment = event.fragment;\n    topics = [fragment.topicHash];\n  } else {\n    (0, index_js_3.assertArgument)(false, \"unknown event name\", \"event\", event);\n  }\n  // Normalize topics and sort TopicSets\n  topics = topics.map(t => {\n    if (t == null) {\n      return null;\n    }\n    if (Array.isArray(t)) {\n      const items = Array.from(new Set(t.map(t => t.toLowerCase())).values());\n      if (items.length === 1) {\n        return items[0];\n      }\n      items.sort();\n      return items;\n    }\n    return t.toLowerCase();\n  });\n  const tag = topics.map(t => {\n    if (t == null) {\n      return \"null\";\n    }\n    if (Array.isArray(t)) {\n      return t.join(\"|\");\n    }\n    return t;\n  }).join(\"&\");\n  return {\n    fragment,\n    tag,\n    topics\n  };\n}\nasync function hasSub(contract, event) {\n  const {\n    subs\n  } = getInternal(contract);\n  return subs.get((await getSubInfo(contract, event)).tag) || null;\n}\nasync function getSub(contract, operation, event) {\n  // Make sure our runner can actually subscribe to events\n  const provider = getProvider(contract.runner);\n  (0, index_js_3.assert)(provider, \"contract runner does not support subscribing\", \"UNSUPPORTED_OPERATION\", {\n    operation\n  });\n  const {\n    fragment,\n    tag,\n    topics\n  } = await getSubInfo(contract, event);\n  const {\n    addr,\n    subs\n  } = getInternal(contract);\n  let sub = subs.get(tag);\n  if (!sub) {\n    const address = addr ? addr : contract;\n    const filter = {\n      address,\n      topics\n    };\n    const listener = log => {\n      let foundFragment = fragment;\n      if (foundFragment == null) {\n        try {\n          foundFragment = contract.interface.getEvent(log.topics[0]);\n        } catch (error) {}\n      }\n      // If fragment is null, we do not deconstruct the args to emit\n      if (foundFragment) {\n        const _foundFragment = foundFragment;\n        const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];\n        emit(contract, event, args, listener => {\n          return new wrappers_js_1.ContractEventPayload(contract, listener, event, _foundFragment, log);\n        });\n      } else {\n        emit(contract, event, [], listener => {\n          return new wrappers_js_1.ContractUnknownEventPayload(contract, listener, event, log);\n        });\n      }\n    };\n    let starting = [];\n    const start = () => {\n      if (starting.length) {\n        return;\n      }\n      starting.push(provider.on(filter, listener));\n    };\n    const stop = async () => {\n      if (starting.length == 0) {\n        return;\n      }\n      let started = starting;\n      starting = [];\n      await Promise.all(started);\n      provider.off(filter, listener);\n    };\n    sub = {\n      tag,\n      listeners: [],\n      start,\n      stop\n    };\n    subs.set(tag, sub);\n  }\n  return sub;\n}\n// We use this to ensure one emit resolves before firing the next to\n// ensure correct ordering (note this cannot throw and just adds the\n// notice to the event queu using setTimeout).\nlet lastEmit = Promise.resolve();\nasync function _emit(contract, event, args, payloadFunc) {\n  await lastEmit;\n  const sub = await hasSub(contract, event);\n  if (!sub) {\n    return false;\n  }\n  const count = sub.listeners.length;\n  sub.listeners = sub.listeners.filter(_ref => {\n    let {\n      listener,\n      once\n    } = _ref;\n    const passArgs = Array.from(args);\n    if (payloadFunc) {\n      passArgs.push(payloadFunc(once ? null : listener));\n    }\n    try {\n      listener.call(contract, ...passArgs);\n    } catch (error) {}\n    return !once;\n  });\n  return count > 0;\n}\nasync function emit(contract, event, args, payloadFunc) {\n  try {\n    await lastEmit;\n  } catch (error) {}\n  const resultPromise = _emit(contract, event, args, payloadFunc);\n  lastEmit = resultPromise;\n  return await resultPromise;\n}\nconst passProperties = [\"then\"];\nclass BaseContract {\n  target;\n  interface;\n  runner;\n  filters;\n  [internal];\n  fallback;\n  constructor(target, abi, runner, _deployTx) {\n    if (runner == null) {\n      runner = null;\n    }\n    const iface = index_js_1.Interface.from(abi);\n    (0, index_js_3.defineProperties)(this, {\n      target,\n      runner,\n      interface: iface\n    });\n    Object.defineProperty(this, internal, {\n      value: {}\n    });\n    let addrPromise;\n    let addr = null;\n    let deployTx = null;\n    if (_deployTx) {\n      const provider = getProvider(runner);\n      // @TODO: the provider can be null; make a custom dummy provider that will throw a\n      // meaningful error\n      deployTx = new wrappers_js_1.ContractTransactionResponse(this.interface, provider, _deployTx);\n    }\n    let subs = new Map();\n    // Resolve the target as the address\n    if (typeof target === \"string\") {\n      if ((0, index_js_3.isHexString)(target)) {\n        addr = target;\n        addrPromise = Promise.resolve(target);\n      } else {\n        const resolver = getRunner(runner, \"resolveName\");\n        if (!canResolve(resolver)) {\n          throw (0, index_js_3.makeError)(\"contract runner does not support name resolution\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"resolveName\"\n          });\n        }\n        addrPromise = resolver.resolveName(target).then(addr => {\n          if (addr == null) {\n            throw new Error(\"TODO\");\n          }\n          getInternal(this).addr = addr;\n          return addr;\n        });\n      }\n    } else {\n      addrPromise = target.getAddress().then(addr => {\n        if (addr == null) {\n          throw new Error(\"TODO\");\n        }\n        getInternal(this).addr = addr;\n        return addr;\n      });\n    }\n    // Set our private values\n    setInternal(this, {\n      addrPromise,\n      addr,\n      deployTx,\n      subs\n    });\n    // Add the event filters\n    const filters = new Proxy({}, {\n      get: (target, _prop, receiver) => {\n        // Pass important checks (like `then` for Promise) through\n        if (passProperties.indexOf(_prop) >= 0) {\n          return Reflect.get(target, _prop, receiver);\n        }\n        const prop = String(_prop);\n        const result = this.getEvent(prop);\n        if (result) {\n          return result;\n        }\n        throw new Error(`unknown contract event: ${prop}`);\n      }\n    });\n    (0, index_js_3.defineProperties)(this, {\n      filters\n    });\n    (0, index_js_3.defineProperties)(this, {\n      fallback: iface.receive || iface.fallback ? new WrappedFallback(this) : null\n    });\n    // Return a Proxy that will respond to functions\n    return new Proxy(this, {\n      get: (target, _prop, receiver) => {\n        if (_prop in target || passProperties.indexOf(_prop) >= 0) {\n          return Reflect.get(target, _prop, receiver);\n        }\n        const prop = String(_prop);\n        const result = target.getFunction(prop);\n        if (result) {\n          return result;\n        }\n        throw new Error(`unknown contract method: ${prop}`);\n      }\n    });\n  }\n  connect(runner) {\n    return new BaseContract(this.target, this.interface, runner);\n  }\n  async getAddress() {\n    return await getInternal(this).addrPromise;\n  }\n  async getDeployedCode() {\n    const provider = getProvider(this.runner);\n    (0, index_js_3.assert)(provider, \"runner does not support .provider\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"getDeployedCode\"\n    });\n    const code = await provider.getCode(await this.getAddress());\n    if (code === \"0x\") {\n      return null;\n    }\n    return code;\n  }\n  async waitForDeployment() {\n    // We have the deployement transaction; just use that (throws if deployement fails)\n    const deployTx = this.deploymentTransaction();\n    if (deployTx) {\n      await deployTx.wait();\n      return this;\n    }\n    // Check for code\n    const code = await this.getDeployedCode();\n    if (code != null) {\n      return this;\n    }\n    // Make sure we can subscribe to a provider event\n    const provider = getProvider(this.runner);\n    (0, index_js_3.assert)(provider != null, \"contract runner does not support .provider\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"waitForDeployment\"\n    });\n    return new Promise((resolve, reject) => {\n      const checkCode = async () => {\n        try {\n          const code = await this.getDeployedCode();\n          if (code != null) {\n            return resolve(this);\n          }\n          provider.once(\"block\", checkCode);\n        } catch (error) {\n          reject(error);\n        }\n      };\n      checkCode();\n    });\n  }\n  deploymentTransaction() {\n    return getInternal(this).deployTx;\n  }\n  getFunction(key) {\n    if (typeof key !== \"string\") {\n      key = key.format();\n    }\n    return new WrappedMethod(this, key);\n  }\n  getEvent(key) {\n    if (typeof key !== \"string\") {\n      key = key.format();\n    }\n    return new WrappedEvent(this, key);\n  }\n  async queryTransaction(hash) {\n    // Is this useful?\n    throw new Error(\"@TODO\");\n  }\n  async queryFilter(event, fromBlock, toBlock) {\n    if (fromBlock == null) {\n      fromBlock = 0;\n    }\n    if (toBlock == null) {\n      toBlock = \"latest\";\n    }\n    const {\n      addr,\n      addrPromise\n    } = getInternal(this);\n    const address = addr ? addr : await addrPromise;\n    const {\n      fragment,\n      topics\n    } = await getSubInfo(this, event);\n    const filter = {\n      address,\n      topics,\n      fromBlock,\n      toBlock\n    };\n    const provider = getProvider(this.runner);\n    (0, index_js_3.assert)(provider, \"contract runner does not have a provider\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"queryFilter\"\n    });\n    return (await provider.getLogs(filter)).map(log => {\n      let foundFragment = fragment;\n      if (foundFragment == null) {\n        try {\n          foundFragment = this.interface.getEvent(log.topics[0]);\n        } catch (error) {}\n      }\n      if (foundFragment) {\n        return new wrappers_js_1.EventLog(log, this.interface, foundFragment);\n      } else {\n        return new provider_js_1.Log(log, provider);\n      }\n    });\n  }\n  async on(event, listener) {\n    const sub = await getSub(this, \"on\", event);\n    sub.listeners.push({\n      listener,\n      once: false\n    });\n    sub.start();\n    return this;\n  }\n  async once(event, listener) {\n    const sub = await getSub(this, \"once\", event);\n    sub.listeners.push({\n      listener,\n      once: true\n    });\n    sub.start();\n    return this;\n  }\n  async emit(event) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n    return await emit(this, event, args, null);\n  }\n  async listenerCount(event) {\n    if (event) {\n      const sub = await hasSub(this, event);\n      if (!sub) {\n        return 0;\n      }\n      return sub.listeners.length;\n    }\n    const {\n      subs\n    } = getInternal(this);\n    let total = 0;\n    for (const {\n      listeners\n    } of subs.values()) {\n      total += listeners.length;\n    }\n    return total;\n  }\n  async listeners(event) {\n    if (event) {\n      const sub = await hasSub(this, event);\n      if (!sub) {\n        return [];\n      }\n      return sub.listeners.map(_ref2 => {\n        let {\n          listener\n        } = _ref2;\n        return listener;\n      });\n    }\n    const {\n      subs\n    } = getInternal(this);\n    let result = [];\n    for (const {\n      listeners\n    } of subs.values()) {\n      result = result.concat(listeners.map(_ref3 => {\n        let {\n          listener\n        } = _ref3;\n        return listener;\n      }));\n    }\n    return result;\n  }\n  async off(event, listener) {\n    const sub = await hasSub(this, event);\n    if (!sub) {\n      return this;\n    }\n    if (listener) {\n      const index = sub.listeners.map(_ref4 => {\n        let {\n          listener\n        } = _ref4;\n        return listener;\n      }).indexOf(listener);\n      if (index >= 0) {\n        sub.listeners.splice(index, 1);\n      }\n    }\n    if (listener == null || sub.listeners.length === 0) {\n      sub.stop();\n      getInternal(this).subs.delete(sub.tag);\n    }\n    return this;\n  }\n  async removeAllListeners(event) {\n    if (event) {\n      const sub = await hasSub(this, event);\n      if (!sub) {\n        return this;\n      }\n      sub.stop();\n      getInternal(this).subs.delete(sub.tag);\n    } else {\n      const {\n        subs\n      } = getInternal(this);\n      for (const {\n        tag,\n        stop\n      } of subs.values()) {\n        stop();\n        subs.delete(tag);\n      }\n    }\n    return this;\n  }\n  // Alias for \"on\"\n  async addListener(event, listener) {\n    return await this.on(event, listener);\n  }\n  // Alias for \"off\"\n  async removeListener(event, listener) {\n    return await this.off(event, listener);\n  }\n  static buildClass(abi) {\n    class CustomContract extends BaseContract {\n      constructor(address) {\n        let runner = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n        super(address, abi, runner);\n      }\n    }\n    return CustomContract;\n  }\n  static from(target, abi, runner) {\n    if (runner == null) {\n      runner = null;\n    }\n    const contract = new this(target, abi, runner);\n    return contract;\n  }\n}\nexports.BaseContract = BaseContract;\nfunction _ContractBase() {\n  return BaseContract;\n}\nclass Contract extends _ContractBase() {}\nexports.Contract = Contract;","map":{"version":3,"mappings":"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","names":["BN_0","BigInt","canCall","value","call","canEstimate","estimateGas","canResolve","resolveName","canSend","sendTransaction","PreparedTopicFilter","fragment","constructor","contract","args","inputs","length","Error","runner","getRunner","resolver","resolvedArgs","Promise","all","map","param","index","arg","walkAsync","type","interface","encodeFilterTopics","getTopicFilter","_WrappedMethodBase","Function","feature","provider","getProvider","copyOverrides","allowed","overrides","index_js_1","dereference","to","indexOf","data","from","exports","resolveArgs","_runner","WrappedFallback","_contract","proxy","Proxy","apply","target","thisArg","send","populateTransaction","tx","getAddress","iface","payable","receive","fallback","staticCall","operation","error","makeError","wrappers_js_1","WrappedMethod","name","_key","key","getFunctionName","getFragment","constant","getFunction","pop","Object","assign","encodeFunctionData","result","staticCallResult","decodeFunctionResult","_WrappedEventBase","WrappedEvent","getEventName","getEvent","internal","Symbol","for","internalValues","WeakMap","setInternal","values","set","getInternal","get","isDeferred","getSubInfo","event","topics","Array","isArray","topicHashify","topicHash","e","t","items","Set","toLowerCase","sort","tag","join","hasSub","subs","getSub","addr","sub","address","filter","listener","log","foundFragment","_foundFragment","decodeEventLog","emit","starting","start","push","on","stop","started","off","listeners","lastEmit","resolve","_emit","payloadFunc","count","once","passArgs","resultPromise","passProperties","BaseContract","filters","abi","_deployTx","defineProperty","addrPromise","deployTx","Map","then","_prop","receiver","Reflect","prop","String","connect","getDeployedCode","code","getCode","waitForDeployment","deploymentTransaction","wait","reject","checkCode","format","queryTransaction","hash","queryFilter","fromBlock","toBlock","getLogs","provider_js_1","listenerCount","total","concat","splice","delete","removeAllListeners","addListener","removeListener","buildClass","CustomContract","_ContractBase","Contract"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/contract/contract.ts"],"sourcesContent":["import { Interface, Typed } from \"../abi/index.js\";\nimport { resolveAddress } from \"../address/index.js\";\n// import from provider.ts instead of index.ts to prevent circular dep\n// from EtherscanProvider\nimport { copyRequest, Log, TransactionResponse } from \"../providers/provider.js\";\nimport {\n    defineProperties, isCallException, isHexString, resolveProperties,\n    makeError, assert, assertArgument\n} from \"../utils/index.js\";\n\nimport {\n    ContractEventPayload, ContractUnknownEventPayload,\n    ContractTransactionResponse,\n    EventLog\n} from \"./wrappers.js\";\n\nimport type { EventFragment, FunctionFragment, InterfaceAbi, ParamType, Result } from \"../abi/index.js\";\nimport type { Addressable } from \"../address/index.js\";\nimport type { EventEmitterable, Listener } from \"../utils/index.js\";\nimport type {\n    BlockTag, ContractRunner, Provider, TransactionRequest, TopicFilter\n} from \"../providers/index.js\";\n\nimport type {\n    ContractEventName,\n    ContractInterface,\n    ContractMethodArgs,\n    BaseContractMethod,\n    ContractMethod,\n    ContractEventArgs,\n    ContractEvent,\n    ContractTransaction,\n    DeferredTopicFilter\n} from \"./types.js\";\n\nconst BN_0 = BigInt(0);\n\ninterface ContractRunnerCaller extends ContractRunner {\n    call: (tx: TransactionRequest) => Promise<string>;\n}\n\ninterface ContractRunnerEstimater extends ContractRunner {\n    estimateGas: (tx: TransactionRequest) => Promise<bigint>;\n}\n\ninterface ContractRunnerSender extends ContractRunner {\n    sendTransaction: (tx: TransactionRequest) => Promise<TransactionResponse>;\n}\n\ninterface ContractRunnerResolver extends ContractRunner {\n    resolveName: (name: string | Addressable) => Promise<null | string>;\n}\n\nfunction canCall(value: any): value is ContractRunnerCaller {\n    return (value && typeof(value.call) === \"function\");\n}\n\nfunction canEstimate(value: any): value is ContractRunnerEstimater {\n    return (value && typeof(value.estimateGas) === \"function\");\n}\n\nfunction canResolve(value: any): value is ContractRunnerResolver {\n    return (value && typeof(value.resolveName) === \"function\");\n}\n\nfunction canSend(value: any): value is ContractRunnerSender {\n    return (value && typeof(value.sendTransaction) === \"function\");\n}\n\nclass PreparedTopicFilter implements DeferredTopicFilter {\n    #filter: Promise<TopicFilter>;\n    readonly fragment!: EventFragment;\n\n    constructor(contract: BaseContract, fragment: EventFragment, args: Array<any>) {\n        defineProperties<PreparedTopicFilter>(this, { fragment });\n        if (fragment.inputs.length < args.length) {\n            throw new Error(\"too many arguments\");\n        }\n\n        // Recursively descend into args and resolve any addresses\n        const runner = getRunner(contract.runner, \"resolveName\");\n        const resolver = canResolve(runner) ? runner: null;\n        this.#filter = (async function() {\n            const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {\n                const arg = args[index];\n                if (arg == null) { return null; }\n\n                return param.walkAsync(args[index], (type, value) => {\n                    if (type === \"address\") {\n                        return resolveAddress(value, resolver);\n                    }\n                    return value;\n                });\n            }));\n\n            return contract.interface.encodeFilterTopics(fragment, resolvedArgs);\n        })();\n    }\n\n    getTopicFilter(): Promise<TopicFilter> {\n        return this.#filter;\n    }\n}\n\n\n// A = Arguments passed in as a tuple\n// R = The result type of the call (i.e. if only one return type,\n//     the qualified type, otherwise Result)\n// D = The type the default call will return (i.e. R for view/pure,\n//     TransactionResponse otherwise)\n//export interface ContractMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse> {\n\nfunction _WrappedMethodBase(): new () => Function & BaseContractMethod {\n    return Function as any;\n}\n\nfunction getRunner<T extends ContractRunner>(value: any, feature: keyof ContractRunner): null | T {\n    if (value == null) { return null; }\n    if (typeof(value[feature]) === \"function\") { return value; }\n    if (value.provider && typeof(value.provider[feature]) === \"function\") {\n        return value.provider;\n    }\n    return null;\n}\n\nfunction getProvider(value: null | ContractRunner): null | Provider {\n    if (value == null) { return null; }\n    return value.provider || null;\n}\n\n/**\n *  @_ignore:\n */\nexport async function copyOverrides<O extends string = \"data\" | \"to\">(arg: any, allowed?: Array<string>): Promise<Omit<ContractTransaction, O>> {\n\n    // Create a shallow copy (we'll deep-ify anything needed during normalizing)\n    const overrides = copyRequest(Typed.dereference(arg, \"overrides\"));\n\n    assertArgument(overrides.to == null || (allowed || [ ]).indexOf(\"to\") >= 0,\n      \"cannot override to\", \"overrides.to\", overrides.to);\n    assertArgument(overrides.data == null || (allowed || [ ]).indexOf(\"data\") >= 0,\n      \"cannot override data\", \"overrides.data\", overrides.data);\n\n    // Resolve any from\n    if (overrides.from) {\n        overrides.from = await resolveAddress(overrides.from);\n    }\n\n    return <Omit<ContractTransaction, O>>overrides;\n}\n\n/**\n *  @_ignore:\n */\nexport async function resolveArgs(_runner: null | ContractRunner, inputs: ReadonlyArray<ParamType>, args: Array<any>): Promise<Array<any>> {\n    // Recursively descend into args and resolve any addresses\n    const runner = getRunner(_runner, \"resolveName\");\n    const resolver = canResolve(runner) ? runner: null;\n    return await Promise.all(inputs.map((param, index) => {\n        return param.walkAsync(args[index], (type, value) => {\n            value = Typed.dereference(value, type);\n            if (type === \"address\") { return resolveAddress(value, resolver); }\n            return value;\n        });\n    }));\n}\n\nclass WrappedFallback {\n    readonly _contract!: BaseContract;\n\n    constructor (contract: BaseContract) {\n        defineProperties<WrappedFallback>(this, { _contract: contract });\n\n        const proxy = new Proxy(this, {\n            // Perform send when called\n            apply: async (target, thisArg, args: Array<any>) => {\n                return await target.send(...args);\n            },\n        });\n\n        return proxy;\n    }\n\n    async populateTransaction(overrides?: Omit<TransactionRequest, \"to\">): Promise<ContractTransaction> {\n        // If an overrides was passed in, copy it and normalize the values\n\n        const tx: ContractTransaction = <any>(await copyOverrides<\"data\">(overrides, [ \"data\" ]));\n        tx.to = await this._contract.getAddress();\n\n        const iface = this._contract.interface;\n\n        // Only allow payable contracts to set non-zero value\n        const payable = iface.receive || (iface.fallback && iface.fallback.payable);\n        assertArgument(payable || (tx.value || BN_0) === BN_0,\n          \"cannot send value to non-payable contract\", \"overrides.value\", tx.value);\n\n        // Only allow fallback contracts to set non-empty data\n        assertArgument(iface.fallback || (tx.data || \"0x\") === \"0x\",\n          \"cannot send data to receive-only contract\", \"overrides.data\", tx.data);\n\n        return tx;\n    }\n\n    async staticCall(overrides?: Omit<TransactionRequest, \"to\">): Promise<string> {\n        const runner = getRunner(this._contract.runner, \"call\");\n        assert(canCall(runner), \"contract runner does not support calling\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\n\n        const tx = await this.populateTransaction(overrides);\n\n        try {\n            return await runner.call(tx);\n        } catch (error: any) {\n            if (isCallException(error) && error.data) {\n                throw this._contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n    }\n\n    async send(overrides?: Omit<TransactionRequest, \"to\">): Promise<ContractTransactionResponse> {\n        const runner = this._contract.runner;\n        assert(canSend(runner), \"contract runner does not support sending transactions\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\n\n        const tx = await runner.sendTransaction(await this.populateTransaction(overrides));\n        const provider = getProvider(this._contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new ContractTransactionResponse(this._contract.interface, <Provider>provider, tx);\n    }\n\n    async estimateGas(overrides?: Omit<TransactionRequest, \"to\">): Promise<bigint> {\n        const runner = getRunner(this._contract.runner, \"estimateGas\");\n        assert(canEstimate(runner), \"contract runner does not support gas estimation\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\n\n        return await runner.estimateGas(await this.populateTransaction(overrides));\n    }\n}\n\nclass WrappedMethod<A extends Array<any> = Array<any>, R = any, D extends R | ContractTransactionResponse = ContractTransactionResponse>\n  extends _WrappedMethodBase() implements BaseContractMethod<A, R, D> {\n\n    readonly name: string = \"\";   // Investigate!\n    readonly _contract!: BaseContract;\n    readonly _key!: string;\n\n    constructor (contract: BaseContract, key: string) {\n        super();\n\n        defineProperties<WrappedMethod>(this, {\n            name: contract.interface.getFunctionName(key),\n            _contract: contract, _key: key\n        });\n\n        const proxy = new Proxy(this, {\n            // Perform the default operation for this fragment type\n            apply: async (target, thisArg, args: ContractMethodArgs<A>) => {\n                const fragment = target.getFragment(...args);\n                if (fragment.constant) { return await target.staticCall(...args); }\n                return await target.send(...args);\n            },\n        });\n\n        return proxy;\n    }\n\n    // Only works on non-ambiguous keys (refined fragment is always non-ambiguous)\n    get fragment(): FunctionFragment {\n        const fragment = this._contract.interface.getFunction(this._key);\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\"\n        });\n        return fragment;\n    }\n\n    getFragment(...args: ContractMethodArgs<A>): FunctionFragment {\n        const fragment = this._contract.interface.getFunction(this._key, args);\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\"\n        });\n        return fragment;\n    }\n\n    async populateTransaction(...args: ContractMethodArgs<A>): Promise<ContractTransaction> {\n        const fragment = this.getFragment(...args);\n\n        // If an overrides was passed in, copy it and normalize the values\n        let overrides: Omit<ContractTransaction, \"data\" | \"to\"> = { };\n        if (fragment.inputs.length + 1 === args.length) {\n            overrides = await copyOverrides(args.pop());\n        }\n\n        if (fragment.inputs.length !== args.length) {\n            throw new Error(\"internal error: fragment inputs doesn't match arguments; should not happen\");\n        }\n\n        const resolvedArgs = await resolveArgs(this._contract.runner, fragment.inputs, args);\n\n        return Object.assign({ }, overrides, await resolveProperties({\n            to: this._contract.getAddress(),\n            data: this._contract.interface.encodeFunctionData(fragment, resolvedArgs)\n        }));\n    }\n\n    async staticCall(...args: ContractMethodArgs<A>): Promise<R> {\n        const result = await this.staticCallResult(...args);\n        if (result.length === 1) { return result[0]; }\n        return <R><unknown>result;\n    }\n\n    async send(...args: ContractMethodArgs<A>): Promise<ContractTransactionResponse> {\n        const runner = this._contract.runner;\n        assert(canSend(runner), \"contract runner does not support sending transactions\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"sendTransaction\" });\n\n        const tx = await runner.sendTransaction(await this.populateTransaction(...args));\n        const provider = getProvider(this._contract.runner);\n        // @TODO: the provider can be null; make a custom dummy provider that will throw a\n        // meaningful error\n        return new ContractTransactionResponse(this._contract.interface, <Provider>provider, tx);\n    }\n\n    async estimateGas(...args: ContractMethodArgs<A>): Promise<bigint> {\n        const runner = getRunner(this._contract.runner, \"estimateGas\");\n        assert(canEstimate(runner), \"contract runner does not support gas estimation\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"estimateGas\" });\n\n        return await runner.estimateGas(await this.populateTransaction(...args));\n    }\n\n    async staticCallResult(...args: ContractMethodArgs<A>): Promise<Result> {\n        const runner = getRunner(this._contract.runner, \"call\");\n        assert(canCall(runner), \"contract runner does not support calling\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"call\" });\n\n        const tx = await this.populateTransaction(...args);\n\n        let result = \"0x\";\n        try {\n            result = await runner.call(tx);\n        } catch (error: any) {\n            if (isCallException(error) && error.data) {\n                throw this._contract.interface.makeError(error.data, tx);\n            }\n            throw error;\n        }\n\n        const fragment = this.getFragment(...args);\n        return this._contract.interface.decodeFunctionResult(fragment, result);\n    }\n}\n\nfunction _WrappedEventBase(): new () => Function & ContractEvent {\n    return Function as any;\n}\n\nclass WrappedEvent<A extends Array<any> = Array<any>> extends _WrappedEventBase() implements ContractEvent<A> {\n    readonly name: string = \"\";  // @TODO: investigate \n\n    readonly _contract!: BaseContract;\n    readonly _key!: string;\n\n    constructor (contract: BaseContract, key: string) {\n        super();\n\n        defineProperties<WrappedEvent>(this, {\n            name: contract.interface.getEventName(key),\n            _contract: contract, _key: key\n        });\n\n        return new Proxy(this, {\n            // Perform the default operation for this fragment type\n            apply: (target, thisArg, args: ContractEventArgs<A>) => {\n                return new PreparedTopicFilter(contract, target.getFragment(...args), args);\n            },\n        });\n    }\n\n    // Only works on non-ambiguous keys\n    get fragment(): EventFragment {\n        const fragment = this._contract.interface.getEvent(this._key);\n\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\"\n        });\n\n        return fragment;\n    }\n\n    getFragment(...args: ContractEventArgs<A>): EventFragment {\n        const fragment = this._contract.interface.getEvent(this._key, args);\n\n        assert(fragment, \"no matching fragment\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fragment\"\n        });\n\n        return fragment;\n    }\n};\n\ntype Sub = {\n    tag: string;\n    listeners: Array<{ listener: Listener, once: boolean }>,\n    start: () => void;\n    stop: () => void;\n};\n\n\n// The combination of TypeScrype, Private Fields and Proxies makes\n// the world go boom; so we hide variables with some trickery keeping\n// a symbol attached to each BaseContract which its sub-class (even\n// via a Proxy) can reach and use to look up its internal values.\n\nconst internal = Symbol.for(\"_ethersInternal_contract\");\ntype Internal = {\n    addrPromise: Promise<string>;\n    addr: null | string;\n\n    deployTx: null | ContractTransactionResponse;\n\n    subs: Map<string, Sub>;\n};\n\nconst internalValues: WeakMap<BaseContract, Internal> = new WeakMap();\n\nfunction setInternal(contract: BaseContract, values: Internal): void {\n    internalValues.set(contract[internal], values);\n}\n\nfunction getInternal(contract: BaseContract): Internal {\n    return internalValues.get(contract[internal]) as Internal;\n}\n\nfunction isDeferred(value: any): value is DeferredTopicFilter {\n    return (value && typeof(value) === \"object\" && (\"getTopicFilter\" in value) &&\n      (typeof(value.getTopicFilter) === \"function\") && value.fragment);\n}\n\nasync function getSubInfo(contract: BaseContract, event: ContractEventName): Promise<{ fragment: null | EventFragment, tag: string, topics: TopicFilter }> {\n    let topics: Array<null | string | Array<string>>;\n    let fragment: null | EventFragment = null;\n\n    // Convert named events to topicHash and get the fragment for\n    // events which need deconstructing.\n\n    if (Array.isArray(event)) {\n        const topicHashify = function(name: string): string {\n            if (isHexString(name, 32)) { return name; }\n            const fragment = contract.interface.getEvent(name);\n            assertArgument(fragment, \"unknown fragment\", \"name\", name);\n            return fragment.topicHash;\n        }\n\n        // Array of Topics and Names; e.g. `[ \"0x1234...89ab\", \"Transfer(address)\" ]`\n        topics = event.map((e) => {\n            if (e == null) { return null; }\n            if (Array.isArray(e)) { return e.map(topicHashify); }\n            return topicHashify(e);\n        });\n\n    } else if (event === \"*\") {\n        topics = [ null ];\n\n    } else if (typeof(event) === \"string\") {\n        if (isHexString(event, 32)) {\n            // Topic Hash\n            topics = [ event ];\n        } else {\n           // Name or Signature; e.g. `\"Transfer\", `\"Transfer(address)\"`\n            fragment = contract.interface.getEvent(event);\n            assertArgument(fragment, \"unknown fragment\", \"event\", event);\n            topics = [ fragment.topicHash ];\n        }\n\n    } else if (isDeferred(event)) {\n        // Deferred Topic Filter; e.g. `contract.filter.Transfer(from)`\n        topics = await event.getTopicFilter();\n\n    } else if (\"fragment\" in event) {\n        // ContractEvent; e.g. `contract.filter.Transfer`\n        fragment = event.fragment;\n        topics = [ fragment.topicHash ];\n\n    } else {\n        assertArgument(false, \"unknown event name\", \"event\", event);\n    }\n\n    // Normalize topics and sort TopicSets\n    topics = topics.map((t) => {\n        if (t == null) { return null; }\n        if (Array.isArray(t)) {\n            const items = Array.from(new Set(t.map((t) => t.toLowerCase())).values());\n            if (items.length === 1) { return items[0]; }\n            items.sort();\n            return items;\n        }\n        return t.toLowerCase();\n    });\n\n    const tag = topics.map((t) => {\n        if (t == null) { return \"null\"; }\n        if (Array.isArray(t)) { return t.join(\"|\"); }\n        return t;\n    }).join(\"&\");\n\n    return { fragment, tag, topics }\n}\n\nasync function hasSub(contract: BaseContract, event: ContractEventName): Promise<null | Sub> {\n    const { subs } = getInternal(contract);\n    return subs.get((await getSubInfo(contract, event)).tag) || null;\n}\n\nasync function getSub(contract: BaseContract, operation: string, event: ContractEventName): Promise<Sub> {\n    // Make sure our runner can actually subscribe to events\n    const provider = getProvider(contract.runner);\n    assert(provider, \"contract runner does not support subscribing\",\n        \"UNSUPPORTED_OPERATION\", { operation });\n\n    const { fragment, tag, topics } = await getSubInfo(contract, event);\n\n    const { addr, subs } = getInternal(contract);\n\n    let sub = subs.get(tag);\n    if (!sub) {\n        const address: string | Addressable = (addr ? addr: contract);\n        const filter = { address, topics };\n        const listener = (log: Log) => {\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = contract.interface.getEvent(log.topics[0]);\n                } catch (error) { }\n            }\n\n            // If fragment is null, we do not deconstruct the args to emit\n\n            if (foundFragment) {\n                const _foundFragment = foundFragment;\n                const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics): [ ];\n                emit(contract, event, args, (listener: null | Listener) => {\n                    return new ContractEventPayload(contract, listener, event, _foundFragment, log);\n                });\n            } else {\n                emit(contract, event, [ ], (listener: null | Listener) => {\n                    return new ContractUnknownEventPayload(contract, listener, event, log);\n                });\n            }\n        };\n\n        let starting: Array<Promise<any>> = [ ];\n        const start = () => {\n            if (starting.length) { return; }\n            starting.push(provider.on(filter, listener));\n        };\n\n        const stop = async () => {\n            if (starting.length == 0) { return; }\n\n            let started = starting;\n            starting = [ ];\n            await Promise.all(started);\n            provider.off(filter, listener);\n        };\n\n        sub = { tag, listeners: [ ], start, stop };\n        subs.set(tag, sub);\n    }\n    return sub;\n}\n\n// We use this to ensure one emit resolves before firing the next to\n// ensure correct ordering (note this cannot throw and just adds the\n// notice to the event queu using setTimeout).\nlet lastEmit: Promise<any> = Promise.resolve();\n\ntype PayloadFunc = (listener: null | Listener) => ContractUnknownEventPayload;\n\nasync function _emit(contract: BaseContract, event: ContractEventName, args: Array<any>, payloadFunc: null | PayloadFunc): Promise<boolean> {\n    await lastEmit;\n\n    const sub = await hasSub(contract, event);\n    if (!sub) { return false; }\n\n    const count = sub.listeners.length;\n    sub.listeners = sub.listeners.filter(({ listener, once }) => {\n        const passArgs = Array.from(args);\n        if (payloadFunc) {\n            passArgs.push(payloadFunc(once ? null: listener));\n        }\n        try {\n            listener.call(contract, ...passArgs);\n        } catch (error) { }\n        return !once;\n    });\n    return (count > 0);\n}\n\nasync function emit(contract: BaseContract, event: ContractEventName, args: Array<any>, payloadFunc: null | PayloadFunc): Promise<boolean> {\n    try {\n        await lastEmit;\n    } catch (error) { }\n\n    const resultPromise = _emit(contract, event, args, payloadFunc);\n    lastEmit = resultPromise;\n    return await resultPromise;\n}\n\nconst passProperties = [ \"then\" ];\nexport class BaseContract implements Addressable, EventEmitterable<ContractEventName> {\n    readonly target!: string | Addressable;\n    readonly interface!: Interface;\n    readonly runner!: null | ContractRunner;\n\n    readonly filters!: Record<string, ContractEvent>;\n\n    readonly [internal]: any;\n\n    readonly fallback!: null | WrappedFallback;\n\n    constructor(target: string | Addressable, abi: Interface | InterfaceAbi, runner?: null | ContractRunner, _deployTx?: null | TransactionResponse) {\n        if (runner == null) { runner = null; }\n        const iface = Interface.from(abi);\n        defineProperties<BaseContract>(this, { target, runner, interface: iface });\n\n        Object.defineProperty(this, internal, { value: { } });\n\n        let addrPromise;\n        let addr = null;\n\n        let deployTx: null | ContractTransactionResponse = null;\n        if (_deployTx) {\n            const provider = getProvider(runner);\n            // @TODO: the provider can be null; make a custom dummy provider that will throw a\n            // meaningful error\n            deployTx = new ContractTransactionResponse(this.interface, <Provider>provider, _deployTx);\n        }\n\n        let subs = new Map();\n\n        // Resolve the target as the address\n        if (typeof(target) === \"string\") {\n            if (isHexString(target)) {\n                addr = target;\n                addrPromise = Promise.resolve(target);\n\n            } else {\n                const resolver = getRunner(runner, \"resolveName\");\n                if (!canResolve(resolver)) {\n                    throw makeError(\"contract runner does not support name resolution\", \"UNSUPPORTED_OPERATION\", {\n                        operation: \"resolveName\"\n                    });\n                }\n\n                addrPromise = resolver.resolveName(target).then((addr) => {\n                    if (addr == null) { throw new Error(\"TODO\"); }\n                    getInternal(this).addr = addr;\n                    return addr;\n                });\n            }\n        } else {\n            addrPromise = target.getAddress().then((addr) => {\n                if (addr == null) { throw new Error(\"TODO\"); }\n                getInternal(this).addr = addr;\n                return addr;\n            });\n        }\n\n        // Set our private values\n        setInternal(this, { addrPromise, addr, deployTx, subs });\n\n        // Add the event filters\n        const filters = new Proxy({ }, {\n            get: (target, _prop, receiver) => {\n                // Pass important checks (like `then` for Promise) through\n                if (passProperties.indexOf(<string>_prop) >= 0) {\n                    return Reflect.get(target, _prop, receiver);\n                }\n\n                const prop = String(_prop);\n\n                const result = this.getEvent(prop);\n                if (result) { return result; }\n\n                throw new Error(`unknown contract event: ${ prop }`);\n            }\n        });\n        defineProperties<BaseContract>(this, { filters });\n\n        defineProperties<BaseContract>(this, {\n            fallback: ((iface.receive || iface.fallback) ? (new WrappedFallback(this)): null)\n        });\n\n        // Return a Proxy that will respond to functions\n        return new Proxy(this, {\n            get: (target, _prop, receiver) => {\n                if (_prop in target || passProperties.indexOf(<string>_prop) >= 0) {\n                    return Reflect.get(target, _prop, receiver);\n                }\n\n                const prop = String(_prop);\n\n                const result = target.getFunction(prop);\n                if (result) { return result; }\n\n                throw new Error(`unknown contract method: ${ prop }`);\n            }\n        });\n\n    }\n\n    connect(runner: null | ContractRunner): BaseContract {\n        return new BaseContract(this.target, this.interface, runner);\n    }\n\n    async getAddress(): Promise<string> { return await getInternal(this).addrPromise; }\n\n    async getDeployedCode(): Promise<null | string> {\n        const provider = getProvider(this.runner);\n        assert(provider, \"runner does not support .provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"getDeployedCode\" });\n\n        const code = await provider.getCode(await this.getAddress());\n        if (code === \"0x\") { return null; }\n        return code;\n    }\n\n    async waitForDeployment(): Promise<this> {\n        // We have the deployement transaction; just use that (throws if deployement fails)\n        const deployTx = this.deploymentTransaction();\n        if (deployTx) {\n            await deployTx.wait();\n            return this;\n        }\n\n        // Check for code\n        const code = await this.getDeployedCode();\n        if (code != null) { return this; }\n\n        // Make sure we can subscribe to a provider event\n        const provider = getProvider(this.runner);\n        assert(provider != null, \"contract runner does not support .provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"waitForDeployment\" });\n\n        return new Promise((resolve, reject) => {\n            const checkCode = async () => {\n                try {\n                    const code = await this.getDeployedCode();\n                    if (code != null) { return resolve(this); }\n                    provider.once(\"block\", checkCode);\n                } catch (error) {\n                    reject(error);\n                }\n            };\n            checkCode();\n        });\n    }\n\n    deploymentTransaction(): null | ContractTransactionResponse {\n        return getInternal(this).deployTx;\n    }\n\n    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T {\n        if (typeof(key) !== \"string\") { key = key.format(); }\n        return <T><unknown>(new WrappedMethod(this, key));\n    }\n\n    getEvent(key: string | EventFragment): ContractEvent {\n        if (typeof(key) !== \"string\") { key = key.format(); }\n        return <ContractEvent><unknown>(new WrappedEvent(this, key));\n    }\n\n    async queryTransaction(hash: string): Promise<Array<EventLog>> {\n        // Is this useful?\n        throw new Error(\"@TODO\");\n    }\n\n    async queryFilter(event: ContractEventName, fromBlock?: BlockTag, toBlock?: BlockTag): Promise<Array<EventLog | Log>> {\n        if (fromBlock == null) { fromBlock = 0; }\n        if (toBlock == null) { toBlock = \"latest\"; }\n        const { addr, addrPromise } = getInternal(this);\n        const address = (addr ? addr: (await addrPromise));\n        const { fragment, topics } = await getSubInfo(this, event);\n        const filter = { address, topics, fromBlock, toBlock };\n\n        const provider = getProvider(this.runner);\n        assert(provider, \"contract runner does not have a provider\",\n            \"UNSUPPORTED_OPERATION\", { operation: \"queryFilter\" });\n\n        return (await provider.getLogs(filter)).map((log) => {\n            let foundFragment = fragment;\n            if (foundFragment == null) {\n                try {\n                    foundFragment = this.interface.getEvent(log.topics[0]);\n                } catch (error) { }\n            }\n\n            if (foundFragment) {\n                return new EventLog(log, this.interface, foundFragment);\n            } else {\n                return new Log(log, provider);\n            }\n        });\n    }\n\n    async on(event: ContractEventName, listener: Listener): Promise<this> {\n        const sub = await getSub(this, \"on\", event);\n        sub.listeners.push({ listener, once: false });\n        sub.start();\n        return this;\n    }\n\n    async once(event: ContractEventName, listener: Listener): Promise<this> {\n        const sub = await getSub(this, \"once\", event);\n        sub.listeners.push({ listener, once: true });\n        sub.start();\n        return this;\n    }\n\n    async emit(event: ContractEventName, ...args: Array<any>): Promise<boolean> {\n        return await emit(this, event, args, null);\n    }\n\n    async listenerCount(event?: ContractEventName): Promise<number> {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) { return 0; }\n            return sub.listeners.length;\n        }\n\n        const { subs } = getInternal(this);\n\n        let total = 0;\n        for (const { listeners } of subs.values()) {\n            total += listeners.length;\n        }\n        return total;\n    }\n\n    async listeners(event?: ContractEventName): Promise<Array<Listener>> {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) { return [ ]; }\n            return sub.listeners.map(({ listener }) => listener);\n        }\n\n        const { subs } = getInternal(this);\n\n        let result: Array<Listener> = [ ];\n        for (const { listeners } of subs.values()) {\n            result = result.concat(listeners.map(({ listener }) => listener));\n        }\n        return result;\n    }\n\n    async off(event: ContractEventName, listener?: Listener): Promise<this> {\n        const sub = await hasSub(this, event);\n        if (!sub) { return this; }\n\n        if (listener) {\n            const index = sub.listeners.map(({ listener }) => listener).indexOf(listener);\n            if (index >= 0) { sub.listeners.splice(index, 1); }\n        }\n\n        if (listener == null || sub.listeners.length === 0) {\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        }\n\n        return this;\n    }\n\n    async removeAllListeners(event?: ContractEventName): Promise<this> {\n        if (event) {\n            const sub = await hasSub(this, event);\n            if (!sub) { return this; }\n            sub.stop();\n            getInternal(this).subs.delete(sub.tag);\n        } else {\n            const { subs } = getInternal(this);\n            for (const { tag, stop } of subs.values()) {\n                stop();\n                subs.delete(tag);\n            }\n        }\n\n        return this;\n    }\n\n    // Alias for \"on\"\n    async addListener(event: ContractEventName, listener: Listener): Promise<this> {\n        return await this.on(event, listener);\n    }\n\n    // Alias for \"off\"\n    async removeListener(event: ContractEventName, listener: Listener): Promise<this> {\n        return await this.off(event, listener);\n    }\n\n    static buildClass<T = ContractInterface>(abi: InterfaceAbi): new (target: string, runner?: null | ContractRunner) => BaseContract & Omit<T, keyof BaseContract> {\n        class CustomContract extends BaseContract {\n            constructor(address: string, runner: null | ContractRunner = null) {\n                super(address, abi, runner);\n            }\n        }\n        return CustomContract as any;\n    };\n\n    static from<T = ContractInterface>(target: string, abi: InterfaceAbi, runner?: null | ContractRunner): BaseContract & Omit<T, keyof BaseContract> {\n        if (runner == null) { runner = null; }\n        const contract = new this(target, abi, runner );\n        return contract as any;\n    }\n}\n\nfunction _ContractBase(): new (target: string, abi: InterfaceAbi, runner?: null | ContractRunner) => BaseContract & Omit<ContractInterface, keyof BaseContract> {\n    return BaseContract as any;\n}\n\nexport class Contract extends _ContractBase() { }\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}