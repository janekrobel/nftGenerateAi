{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\nconst internal_1 = require(\"./internal\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nconst assertIsHexString = function (input) {\n  if (!(0, internal_1.isHexString)(input)) {\n    const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\nexports.assertIsHexString = assertIsHexString;\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nconst assertIsBuffer = function (input) {\n  if (!Buffer.isBuffer(input)) {\n    const msg = `This method only supports Buffer but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\nexports.assertIsBuffer = assertIsBuffer;\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nconst assertIsArray = function (input) {\n  if (!Array.isArray(input)) {\n    const msg = `This method only supports number arrays but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\nexports.assertIsArray = assertIsArray;\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nconst assertIsString = function (input) {\n  if (typeof input !== 'string') {\n    const msg = `This method only supports strings but input was: ${input}`;\n    throw new Error(msg);\n  }\n};\nexports.assertIsString = assertIsString;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;;;;AAIO,MAAMA,iBAAiB,GAAG,UAAUC,KAAa;EACtD,IAAI,CAAC,0BAAW,EAACA,KAAK,CAAC,EAAE;IACvB,MAAMC,GAAG,GAAG,oEAAoED,KAAK,EAAE;IACvF,MAAM,IAAIE,KAAK,CAACD,GAAG,CAAC;;AAExB,CAAC;AALYE,yBAAiB;AAO9B;;;;AAIO,MAAMC,cAAc,GAAG,UAAUJ,KAAa;EACnD,IAAI,CAACK,MAAM,CAACC,QAAQ,CAACN,KAAK,CAAC,EAAE;IAC3B,MAAMC,GAAG,GAAG,mDAAmDD,KAAK,EAAE;IACtE,MAAM,IAAIE,KAAK,CAACD,GAAG,CAAC;;AAExB,CAAC;AALYE,sBAAc;AAO3B;;;;AAIO,MAAMI,aAAa,GAAG,UAAUP,KAAe;EACpD,IAAI,CAACQ,KAAK,CAACC,OAAO,CAACT,KAAK,CAAC,EAAE;IACzB,MAAMC,GAAG,GAAG,0DAA0DD,KAAK,EAAE;IAC7E,MAAM,IAAIE,KAAK,CAACD,GAAG,CAAC;;AAExB,CAAC;AALYE,qBAAa;AAO1B;;;;AAIO,MAAMO,cAAc,GAAG,UAAUV,KAAa;EACnD,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAC7B,MAAMC,GAAG,GAAG,oDAAoDD,KAAK,EAAE;IACvE,MAAM,IAAIE,KAAK,CAACD,GAAG,CAAC;;AAExB,CAAC;AALYE,sBAAc","names":["assertIsHexString","input","msg","Error","exports","assertIsBuffer","Buffer","isBuffer","assertIsArray","Array","isArray","assertIsString"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@nomicfoundation/ethereumjs-util/src/helpers.ts"],"sourcesContent":["import { isHexString } from './internal'\n\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */\nexport const assertIsHexString = function (input: string): void {\n  if (!isHexString(input)) {\n    const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */\nexport const assertIsBuffer = function (input: Buffer): void {\n  if (!Buffer.isBuffer(input)) {\n    const msg = `This method only supports Buffer but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */\nexport const assertIsArray = function (input: number[]): void {\n  if (!Array.isArray(input)) {\n    const msg = `This method only supports number arrays but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */\nexport const assertIsString = function (input: string): void {\n  if (typeof input !== 'string') {\n    const msg = `This method only supports strings but input was: ${input}`\n    throw new Error(msg)\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}