{"ast":null,"code":"\"use strict\";\n\n/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64url = exports.base64 = exports.base32crockford = exports.base32hex = exports.base32 = exports.base16 = exports.utils = exports.assertNumber = void 0;\nfunction assertNumber(n) {\n  if (!Number.isSafeInteger(n)) throw new Error(`Wrong integer: ${n}`);\n}\nexports.assertNumber = assertNumber;\nfunction chain() {\n  const wrap = (a, b) => c => a(b(c));\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  const encode = Array.from(args).reverse().reduce((acc, i) => acc ? wrap(acc, i.encode) : i.encode, undefined);\n  const decode = args.reduce((acc, i) => acc ? wrap(acc, i.decode) : i.decode, undefined);\n  return {\n    encode,\n    decode\n  };\n}\nfunction alphabet(alphabet) {\n  return {\n    encode: digits => {\n      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== 'number') throw new Error('alphabet.encode input should be an array of numbers');\n      return digits.map(i => {\n        assertNumber(i);\n        if (i < 0 || i >= alphabet.length) throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n        return alphabet[i];\n      });\n    },\n    decode: input => {\n      if (!Array.isArray(input) || input.length && typeof input[0] !== 'string') throw new Error('alphabet.decode input should be array of strings');\n      return input.map(letter => {\n        if (typeof letter !== 'string') throw new Error(`alphabet.decode: not string element=${letter}`);\n        const index = alphabet.indexOf(letter);\n        if (index === -1) throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n        return index;\n      });\n    }\n  };\n}\nfunction join() {\n  let separator = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  if (typeof separator !== 'string') throw new Error('join separator should be string');\n  return {\n    encode: from => {\n      if (!Array.isArray(from) || from.length && typeof from[0] !== 'string') throw new Error('join.encode input should be array of strings');\n      for (let i of from) if (typeof i !== 'string') throw new Error(`join.encode: non-string input=${i}`);\n      return from.join(separator);\n    },\n    decode: to => {\n      if (typeof to !== 'string') throw new Error('join.decode input should be string');\n      return to.split(separator);\n    }\n  };\n}\nfunction padding(bits) {\n  let chr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '=';\n  assertNumber(bits);\n  if (typeof chr !== 'string') throw new Error('padding chr should be string');\n  return {\n    encode(data) {\n      if (!Array.isArray(data) || data.length && typeof data[0] !== 'string') throw new Error('padding.encode input should be array of strings');\n      for (let i of data) if (typeof i !== 'string') throw new Error(`padding.encode: non-string input=${i}`);\n      while (data.length * bits % 8) data.push(chr);\n      return data;\n    },\n    decode(input) {\n      if (!Array.isArray(input) || input.length && typeof input[0] !== 'string') throw new Error('padding.encode input should be array of strings');\n      for (let i of input) if (typeof i !== 'string') throw new Error(`padding.decode: non-string input=${i}`);\n      let end = input.length;\n      if (end * bits % 8) throw new Error('Invalid padding: string should have whole number of bytes');\n      for (; end > 0 && input[end - 1] === chr; end--) {\n        if (!((end - 1) * bits % 8)) throw new Error('Invalid padding: string has too much padding');\n      }\n      return input.slice(0, end);\n    }\n  };\n}\nfunction normalize(fn) {\n  if (typeof fn !== 'function') throw new Error('normalize fn should be function');\n  return {\n    encode: from => from,\n    decode: to => fn(to)\n  };\n}\nfunction convertRadix(data, from, to) {\n  if (from < 2) throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n  if (to < 2) throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n  if (!Array.isArray(data)) throw new Error('convertRadix: data should be array');\n  if (!data.length) return [];\n  let pos = 0;\n  const res = [];\n  const digits = Array.from(data);\n  digits.forEach(d => {\n    assertNumber(d);\n    if (d < 0 || d >= from) throw new Error(`Wrong integer: ${d}`);\n  });\n  while (true) {\n    let carry = 0;\n    let done = true;\n    for (let i = pos; i < digits.length; i++) {\n      const digit = digits[i];\n      const digitBase = from * carry + digit;\n      if (!Number.isSafeInteger(digitBase) || from * carry / from !== carry || digitBase - digit !== from * carry) {\n        throw new Error('convertRadix: carry overflow');\n      }\n      carry = digitBase % to;\n      digits[i] = Math.floor(digitBase / to);\n      if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase) throw new Error('convertRadix: carry overflow');\n      if (!done) continue;else if (!digits[i]) pos = i;else done = false;\n    }\n    res.push(carry);\n    if (done) break;\n  }\n  for (let i = 0; i < data.length - 1 && data[i] === 0; i++) res.push(0);\n  return res.reverse();\n}\nconst gcd = (a, b) => !b ? a : gcd(b, a % b);\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n  if (!Array.isArray(data)) throw new Error('convertRadix2: data should be array');\n  if (from <= 0 || from > 32) throw new Error(`convertRadix2: wrong from=${from}`);\n  if (to <= 0 || to > 32) throw new Error(`convertRadix2: wrong to=${to}`);\n  if (radix2carry(from, to) > 32) {\n    throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n  }\n  let carry = 0;\n  let pos = 0;\n  const mask = 2 ** to - 1;\n  const res = [];\n  for (const n of data) {\n    assertNumber(n);\n    if (n >= 2 ** from) throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n    carry = carry << from | n;\n    if (pos + from > 32) throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n    pos += from;\n    for (; pos >= to; pos -= to) res.push((carry >> pos - to & mask) >>> 0);\n    carry &= 2 ** pos - 1;\n  }\n  carry = carry << to - pos & mask;\n  if (!padding && pos >= from) throw new Error('Excess padding');\n  if (!padding && carry) throw new Error(`Non-zero padding: ${carry}`);\n  if (padding && pos > 0) res.push(carry >>> 0);\n  return res;\n}\nfunction radix(num) {\n  assertNumber(num);\n  return {\n    encode: bytes => {\n      if (!(bytes instanceof Uint8Array)) throw new Error('radix.encode input should be Uint8Array');\n      return convertRadix(Array.from(bytes), 2 ** 8, num);\n    },\n    decode: digits => {\n      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== 'number') throw new Error('radix.decode input should be array of strings');\n      return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n    }\n  };\n}\nfunction radix2(bits) {\n  let revPadding = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  assertNumber(bits);\n  if (bits <= 0 || bits > 32) throw new Error('radix2: bits should be in (0..32]');\n  if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32) throw new Error('radix2: carry overflow');\n  return {\n    encode: bytes => {\n      if (!(bytes instanceof Uint8Array)) throw new Error('radix2.encode input should be Uint8Array');\n      return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n    },\n    decode: digits => {\n      if (!Array.isArray(digits) || digits.length && typeof digits[0] !== 'number') throw new Error('radix2.decode input should be array of strings');\n      return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n    }\n  };\n}\nfunction unsafeWrapper(fn) {\n  if (typeof fn !== 'function') throw new Error('unsafeWrapper fn should be function');\n  return function () {\n    try {\n      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        args[_key2] = arguments[_key2];\n      }\n      return fn.apply(null, args);\n    } catch (e) {}\n  };\n}\nfunction checksum(len, fn) {\n  assertNumber(len);\n  if (typeof fn !== 'function') throw new Error('checksum fn should be function');\n  return {\n    encode(data) {\n      if (!(data instanceof Uint8Array)) throw new Error('checksum.encode: input should be Uint8Array');\n      const checksum = fn(data).slice(0, len);\n      const res = new Uint8Array(data.length + len);\n      res.set(data);\n      res.set(checksum, data.length);\n      return res;\n    },\n    decode(data) {\n      if (!(data instanceof Uint8Array)) throw new Error('checksum.decode: input should be Uint8Array');\n      const payload = data.slice(0, -len);\n      const newChecksum = fn(payload).slice(0, len);\n      const oldChecksum = data.slice(-len);\n      for (let i = 0; i < len; i++) if (newChecksum[i] !== oldChecksum[i]) throw new Error('Invalid checksum');\n      return payload;\n    }\n  };\n}\nexports.utils = {\n  alphabet,\n  chain,\n  checksum,\n  radix,\n  radix2,\n  join,\n  padding\n};\nexports.base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexports.base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexports.base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexports.base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize(s => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexports.base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexports.base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = abc => chain(radix(58), alphabet(abc), join(''));\nexports.base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexports.base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexports.base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexports.base58xmr = {\n  encode(data) {\n    let res = '';\n    for (let i = 0; i < data.length; i += 8) {\n      const block = data.subarray(i, i + 8);\n      res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n    }\n    return res;\n  },\n  decode(str) {\n    let res = [];\n    for (let i = 0; i < str.length; i += 11) {\n      const slice = str.slice(i, i + 11);\n      const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n      const block = exports.base58.decode(slice);\n      for (let j = 0; j < block.length - blockLen; j++) {\n        if (block[j] !== 0) throw new Error('base58xmr: wrong padding');\n      }\n      res = res.concat(Array.from(block.slice(block.length - blockLen)));\n    }\n    return Uint8Array.from(res);\n  }\n};\nconst base58check = sha256 => chain(checksum(4, data => sha256(sha256(data))), exports.base58);\nexports.base58check = base58check;\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n  const b = pre >> 25;\n  let chk = (pre & 0x1ffffff) << 5;\n  for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n    if ((b >> i & 1) === 1) chk ^= POLYMOD_GENERATORS[i];\n  }\n  return chk;\n}\nfunction bechChecksum(prefix, words) {\n  let encodingConst = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  const len = prefix.length;\n  let chk = 1;\n  for (let i = 0; i < len; i++) {\n    const c = prefix.charCodeAt(i);\n    if (c < 33 || c > 126) throw new Error(`Invalid prefix (${prefix})`);\n    chk = bech32Polymod(chk) ^ c >> 5;\n  }\n  chk = bech32Polymod(chk);\n  for (let i = 0; i < len; i++) chk = bech32Polymod(chk) ^ prefix.charCodeAt(i) & 0x1f;\n  for (let v of words) chk = bech32Polymod(chk) ^ v;\n  for (let i = 0; i < 6; i++) chk = bech32Polymod(chk);\n  chk ^= encodingConst;\n  return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n  const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n  const _words = radix2(5);\n  const fromWords = _words.decode;\n  const toWords = _words.encode;\n  const fromWordsUnsafe = unsafeWrapper(fromWords);\n  function encode(prefix, words) {\n    let limit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 90;\n    if (typeof prefix !== 'string') throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n    if (!Array.isArray(words) || words.length && typeof words[0] !== 'number') throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n    const actualLength = prefix.length + 7 + words.length;\n    if (limit !== false && actualLength > limit) throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n    prefix = prefix.toLowerCase();\n    return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n  }\n  function decode(str) {\n    let limit = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 90;\n    if (typeof str !== 'string') throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n    if (str.length < 8 || limit !== false && str.length > limit) throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n    const lowered = str.toLowerCase();\n    if (str !== lowered && str !== str.toUpperCase()) throw new Error(`String must be lowercase or uppercase`);\n    str = lowered;\n    const sepIndex = str.lastIndexOf('1');\n    if (sepIndex === 0 || sepIndex === -1) throw new Error(`Letter \"1\" must be present between prefix and data only`);\n    const prefix = str.slice(0, sepIndex);\n    const _words = str.slice(sepIndex + 1);\n    if (_words.length < 6) throw new Error('Data must be at least 6 characters long');\n    const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n    const sum = bechChecksum(prefix, words, ENCODING_CONST);\n    if (!_words.endsWith(sum)) throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n    return {\n      prefix,\n      words\n    };\n  }\n  const decodeUnsafe = unsafeWrapper(decode);\n  function decodeToBytes(str) {\n    const {\n      prefix,\n      words\n    } = decode(str, false);\n    return {\n      prefix,\n      words,\n      bytes: fromWords(words)\n    };\n  }\n  return {\n    encode,\n    decode,\n    decodeToBytes,\n    decodeUnsafe,\n    fromWords,\n    fromWordsUnsafe,\n    toWords\n  };\n}\nexports.bech32 = genBech32('bech32');\nexports.bech32m = genBech32('bech32m');\nexports.utf8 = {\n  encode: data => new TextDecoder().decode(data),\n  decode: str => new TextEncoder().encode(str)\n};\nexports.hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize(s => {\n  if (typeof s !== 'string' || s.length % 2) throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n  return s.toLowerCase();\n}));\nconst CODERS = {\n  utf8: exports.utf8,\n  hex: exports.hex,\n  base16: exports.base16,\n  base32: exports.base32,\n  base64: exports.base64,\n  base64url: exports.base64url,\n  base58: exports.base58,\n  base58xmr: exports.base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nconst bytesToString = (type, bytes) => {\n  if (typeof type !== 'string' || !CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (!(bytes instanceof Uint8Array)) throw new TypeError('bytesToString() expects Uint8Array');\n  return CODERS[type].encode(bytes);\n};\nexports.bytesToString = bytesToString;\nexports.str = exports.bytesToString;\nconst stringToBytes = (type, str) => {\n  if (!CODERS.hasOwnProperty(type)) throw new TypeError(coderTypeError);\n  if (typeof str !== 'string') throw new TypeError('stringToBytes() expects string');\n  return CODERS[type].decode(str);\n};\nexports.stringToBytes = stringToBytes;\nexports.bytes = exports.stringToBytes;","map":{"version":3,"names":["Object","defineProperty","exports","value","bytes","stringToBytes","str","bytesToString","hex","utf8","bech32m","bech32","base58check","base58xmr","base58xrp","base58flickr","base58","base64url","base64","base32crockford","base32hex","base32","base16","utils","assertNumber","n","Number","isSafeInteger","Error","chain","wrap","a","b","c","args","encode","Array","from","reverse","reduce","acc","i","undefined","decode","alphabet","digits","isArray","length","map","input","letter","index","indexOf","join","separator","to","split","padding","bits","chr","data","push","end","slice","normalize","fn","convertRadix","pos","res","forEach","d","carry","done","digit","digitBase","Math","floor","gcd","radix2carry","convertRadix2","mask","radix","num","Uint8Array","radix2","revPadding","unsafeWrapper","apply","e","checksum","len","set","payload","newChecksum","oldChecksum","s","toUpperCase","replace","genBase58","abc","XMR_BLOCK_LEN","block","subarray","padStart","blockLen","j","concat","sha256","BECH_ALPHABET","POLYMOD_GENERATORS","bech32Polymod","pre","chk","bechChecksum","prefix","words","encodingConst","charCodeAt","v","genBech32","encoding","ENCODING_CONST","_words","fromWords","toWords","fromWordsUnsafe","limit","actualLength","TypeError","toLowerCase","lowered","sepIndex","lastIndexOf","sum","endsWith","decodeUnsafe","decodeToBytes","TextDecoder","TextEncoder","CODERS","coderTypeError","keys","type","hasOwnProperty"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@scure/base/lib/index.js"],"sourcesContent":["\"use strict\";\n/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bytes = exports.stringToBytes = exports.str = exports.bytesToString = exports.hex = exports.utf8 = exports.bech32m = exports.bech32 = exports.base58check = exports.base58xmr = exports.base58xrp = exports.base58flickr = exports.base58 = exports.base64url = exports.base64 = exports.base32crockford = exports.base32hex = exports.base32 = exports.base16 = exports.utils = exports.assertNumber = void 0;\nfunction assertNumber(n) {\n    if (!Number.isSafeInteger(n))\n        throw new Error(`Wrong integer: ${n}`);\n}\nexports.assertNumber = assertNumber;\nfunction chain(...args) {\n    const wrap = (a, b) => (c) => a(b(c));\n    const encode = Array.from(args)\n        .reverse()\n        .reduce((acc, i) => (acc ? wrap(acc, i.encode) : i.encode), undefined);\n    const decode = args.reduce((acc, i) => (acc ? wrap(acc, i.decode) : i.decode), undefined);\n    return { encode, decode };\n}\nfunction alphabet(alphabet) {\n    return {\n        encode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('alphabet.encode input should be an array of numbers');\n            return digits.map((i) => {\n                assertNumber(i);\n                if (i < 0 || i >= alphabet.length)\n                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet.length})`);\n                return alphabet[i];\n            });\n        },\n        decode: (input) => {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('alphabet.decode input should be array of strings');\n            return input.map((letter) => {\n                if (typeof letter !== 'string')\n                    throw new Error(`alphabet.decode: not string element=${letter}`);\n                const index = alphabet.indexOf(letter);\n                if (index === -1)\n                    throw new Error(`Unknown letter: \"${letter}\". Allowed: ${alphabet}`);\n                return index;\n            });\n        },\n    };\n}\nfunction join(separator = '') {\n    if (typeof separator !== 'string')\n        throw new Error('join separator should be string');\n    return {\n        encode: (from) => {\n            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))\n                throw new Error('join.encode input should be array of strings');\n            for (let i of from)\n                if (typeof i !== 'string')\n                    throw new Error(`join.encode: non-string input=${i}`);\n            return from.join(separator);\n        },\n        decode: (to) => {\n            if (typeof to !== 'string')\n                throw new Error('join.decode input should be string');\n            return to.split(separator);\n        },\n    };\n}\nfunction padding(bits, chr = '=') {\n    assertNumber(bits);\n    if (typeof chr !== 'string')\n        throw new Error('padding chr should be string');\n    return {\n        encode(data) {\n            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of data)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.encode: non-string input=${i}`);\n            while ((data.length * bits) % 8)\n                data.push(chr);\n            return data;\n        },\n        decode(input) {\n            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))\n                throw new Error('padding.encode input should be array of strings');\n            for (let i of input)\n                if (typeof i !== 'string')\n                    throw new Error(`padding.decode: non-string input=${i}`);\n            let end = input.length;\n            if ((end * bits) % 8)\n                throw new Error('Invalid padding: string should have whole number of bytes');\n            for (; end > 0 && input[end - 1] === chr; end--) {\n                if (!(((end - 1) * bits) % 8))\n                    throw new Error('Invalid padding: string has too much padding');\n            }\n            return input.slice(0, end);\n        },\n    };\n}\nfunction normalize(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('normalize fn should be function');\n    return { encode: (from) => from, decode: (to) => fn(to) };\n}\nfunction convertRadix(data, from, to) {\n    if (from < 2)\n        throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);\n    if (to < 2)\n        throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);\n    if (!Array.isArray(data))\n        throw new Error('convertRadix: data should be array');\n    if (!data.length)\n        return [];\n    let pos = 0;\n    const res = [];\n    const digits = Array.from(data);\n    digits.forEach((d) => {\n        assertNumber(d);\n        if (d < 0 || d >= from)\n            throw new Error(`Wrong integer: ${d}`);\n    });\n    while (true) {\n        let carry = 0;\n        let done = true;\n        for (let i = pos; i < digits.length; i++) {\n            const digit = digits[i];\n            const digitBase = from * carry + digit;\n            if (!Number.isSafeInteger(digitBase) ||\n                (from * carry) / from !== carry ||\n                digitBase - digit !== from * carry) {\n                throw new Error('convertRadix: carry overflow');\n            }\n            carry = digitBase % to;\n            digits[i] = Math.floor(digitBase / to);\n            if (!Number.isSafeInteger(digits[i]) || digits[i] * to + carry !== digitBase)\n                throw new Error('convertRadix: carry overflow');\n            if (!done)\n                continue;\n            else if (!digits[i])\n                pos = i;\n            else\n                done = false;\n        }\n        res.push(carry);\n        if (done)\n            break;\n    }\n    for (let i = 0; i < data.length - 1 && data[i] === 0; i++)\n        res.push(0);\n    return res.reverse();\n}\nconst gcd = (a, b) => (!b ? a : gcd(b, a % b));\nconst radix2carry = (from, to) => from + (to - gcd(from, to));\nfunction convertRadix2(data, from, to, padding) {\n    if (!Array.isArray(data))\n        throw new Error('convertRadix2: data should be array');\n    if (from <= 0 || from > 32)\n        throw new Error(`convertRadix2: wrong from=${from}`);\n    if (to <= 0 || to > 32)\n        throw new Error(`convertRadix2: wrong to=${to}`);\n    if (radix2carry(from, to) > 32) {\n        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);\n    }\n    let carry = 0;\n    let pos = 0;\n    const mask = 2 ** to - 1;\n    const res = [];\n    for (const n of data) {\n        assertNumber(n);\n        if (n >= 2 ** from)\n            throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);\n        carry = (carry << from) | n;\n        if (pos + from > 32)\n            throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);\n        pos += from;\n        for (; pos >= to; pos -= to)\n            res.push(((carry >> (pos - to)) & mask) >>> 0);\n        carry &= 2 ** pos - 1;\n    }\n    carry = (carry << (to - pos)) & mask;\n    if (!padding && pos >= from)\n        throw new Error('Excess padding');\n    if (!padding && carry)\n        throw new Error(`Non-zero padding: ${carry}`);\n    if (padding && pos > 0)\n        res.push(carry >>> 0);\n    return res;\n}\nfunction radix(num) {\n    assertNumber(num);\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix.encode input should be Uint8Array');\n            return convertRadix(Array.from(bytes), 2 ** 8, num);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix.decode input should be array of strings');\n            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));\n        },\n    };\n}\nfunction radix2(bits, revPadding = false) {\n    assertNumber(bits);\n    if (bits <= 0 || bits > 32)\n        throw new Error('radix2: bits should be in (0..32]');\n    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32)\n        throw new Error('radix2: carry overflow');\n    return {\n        encode: (bytes) => {\n            if (!(bytes instanceof Uint8Array))\n                throw new Error('radix2.encode input should be Uint8Array');\n            return convertRadix2(Array.from(bytes), 8, bits, !revPadding);\n        },\n        decode: (digits) => {\n            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))\n                throw new Error('radix2.decode input should be array of strings');\n            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));\n        },\n    };\n}\nfunction unsafeWrapper(fn) {\n    if (typeof fn !== 'function')\n        throw new Error('unsafeWrapper fn should be function');\n    return function (...args) {\n        try {\n            return fn.apply(null, args);\n        }\n        catch (e) { }\n    };\n}\nfunction checksum(len, fn) {\n    assertNumber(len);\n    if (typeof fn !== 'function')\n        throw new Error('checksum fn should be function');\n    return {\n        encode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.encode: input should be Uint8Array');\n            const checksum = fn(data).slice(0, len);\n            const res = new Uint8Array(data.length + len);\n            res.set(data);\n            res.set(checksum, data.length);\n            return res;\n        },\n        decode(data) {\n            if (!(data instanceof Uint8Array))\n                throw new Error('checksum.decode: input should be Uint8Array');\n            const payload = data.slice(0, -len);\n            const newChecksum = fn(payload).slice(0, len);\n            const oldChecksum = data.slice(-len);\n            for (let i = 0; i < len; i++)\n                if (newChecksum[i] !== oldChecksum[i])\n                    throw new Error('Invalid checksum');\n            return payload;\n        },\n    };\n}\nexports.utils = { alphabet, chain, checksum, radix, radix2, join, padding };\nexports.base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));\nexports.base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));\nexports.base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));\nexports.base32crockford = chain(radix2(5), alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'), join(''), normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1')));\nexports.base64 = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'), padding(6), join(''));\nexports.base64url = chain(radix2(6), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'), padding(6), join(''));\nconst genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));\nexports.base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');\nexports.base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');\nexports.base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');\nconst XMR_BLOCK_LEN = [0, 2, 3, 5, 6, 7, 9, 10, 11];\nexports.base58xmr = {\n    encode(data) {\n        let res = '';\n        for (let i = 0; i < data.length; i += 8) {\n            const block = data.subarray(i, i + 8);\n            res += exports.base58.encode(block).padStart(XMR_BLOCK_LEN[block.length], '1');\n        }\n        return res;\n    },\n    decode(str) {\n        let res = [];\n        for (let i = 0; i < str.length; i += 11) {\n            const slice = str.slice(i, i + 11);\n            const blockLen = XMR_BLOCK_LEN.indexOf(slice.length);\n            const block = exports.base58.decode(slice);\n            for (let j = 0; j < block.length - blockLen; j++) {\n                if (block[j] !== 0)\n                    throw new Error('base58xmr: wrong padding');\n            }\n            res = res.concat(Array.from(block.slice(block.length - blockLen)));\n        }\n        return Uint8Array.from(res);\n    },\n};\nconst base58check = (sha256) => chain(checksum(4, (data) => sha256(sha256(data))), exports.base58);\nexports.base58check = base58check;\nconst BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));\nconst POLYMOD_GENERATORS = [0x3b6a57b2, 0x26508e6d, 0x1ea119fa, 0x3d4233dd, 0x2a1462b3];\nfunction bech32Polymod(pre) {\n    const b = pre >> 25;\n    let chk = (pre & 0x1ffffff) << 5;\n    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {\n        if (((b >> i) & 1) === 1)\n            chk ^= POLYMOD_GENERATORS[i];\n    }\n    return chk;\n}\nfunction bechChecksum(prefix, words, encodingConst = 1) {\n    const len = prefix.length;\n    let chk = 1;\n    for (let i = 0; i < len; i++) {\n        const c = prefix.charCodeAt(i);\n        if (c < 33 || c > 126)\n            throw new Error(`Invalid prefix (${prefix})`);\n        chk = bech32Polymod(chk) ^ (c >> 5);\n    }\n    chk = bech32Polymod(chk);\n    for (let i = 0; i < len; i++)\n        chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 0x1f);\n    for (let v of words)\n        chk = bech32Polymod(chk) ^ v;\n    for (let i = 0; i < 6; i++)\n        chk = bech32Polymod(chk);\n    chk ^= encodingConst;\n    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));\n}\nfunction genBech32(encoding) {\n    const ENCODING_CONST = encoding === 'bech32' ? 1 : 0x2bc830a3;\n    const _words = radix2(5);\n    const fromWords = _words.decode;\n    const toWords = _words.encode;\n    const fromWordsUnsafe = unsafeWrapper(fromWords);\n    function encode(prefix, words, limit = 90) {\n        if (typeof prefix !== 'string')\n            throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);\n        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))\n            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);\n        const actualLength = prefix.length + 7 + words.length;\n        if (limit !== false && actualLength > limit)\n            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);\n        prefix = prefix.toLowerCase();\n        return `${prefix}1${BECH_ALPHABET.encode(words)}${bechChecksum(prefix, words, ENCODING_CONST)}`;\n    }\n    function decode(str, limit = 90) {\n        if (typeof str !== 'string')\n            throw new Error(`bech32.decode input should be string, not ${typeof str}`);\n        if (str.length < 8 || (limit !== false && str.length > limit))\n            throw new TypeError(`Wrong string length: ${str.length} (${str}). Expected (8..${limit})`);\n        const lowered = str.toLowerCase();\n        if (str !== lowered && str !== str.toUpperCase())\n            throw new Error(`String must be lowercase or uppercase`);\n        str = lowered;\n        const sepIndex = str.lastIndexOf('1');\n        if (sepIndex === 0 || sepIndex === -1)\n            throw new Error(`Letter \"1\" must be present between prefix and data only`);\n        const prefix = str.slice(0, sepIndex);\n        const _words = str.slice(sepIndex + 1);\n        if (_words.length < 6)\n            throw new Error('Data must be at least 6 characters long');\n        const words = BECH_ALPHABET.decode(_words).slice(0, -6);\n        const sum = bechChecksum(prefix, words, ENCODING_CONST);\n        if (!_words.endsWith(sum))\n            throw new Error(`Invalid checksum in ${str}: expected \"${sum}\"`);\n        return { prefix, words };\n    }\n    const decodeUnsafe = unsafeWrapper(decode);\n    function decodeToBytes(str) {\n        const { prefix, words } = decode(str, false);\n        return { prefix, words, bytes: fromWords(words) };\n    }\n    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };\n}\nexports.bech32 = genBech32('bech32');\nexports.bech32m = genBech32('bech32m');\nexports.utf8 = {\n    encode: (data) => new TextDecoder().decode(data),\n    decode: (str) => new TextEncoder().encode(str),\n};\nexports.hex = chain(radix2(4), alphabet('0123456789abcdef'), join(''), normalize((s) => {\n    if (typeof s !== 'string' || s.length % 2)\n        throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);\n    return s.toLowerCase();\n}));\nconst CODERS = {\n    utf8: exports.utf8, hex: exports.hex, base16: exports.base16, base32: exports.base32, base64: exports.base64, base64url: exports.base64url, base58: exports.base58, base58xmr: exports.base58xmr\n};\nconst coderTypeError = `Invalid encoding type. Available types: ${Object.keys(CODERS).join(', ')}`;\nconst bytesToString = (type, bytes) => {\n    if (typeof type !== 'string' || !CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (!(bytes instanceof Uint8Array))\n        throw new TypeError('bytesToString() expects Uint8Array');\n    return CODERS[type].encode(bytes);\n};\nexports.bytesToString = bytesToString;\nexports.str = exports.bytesToString;\nconst stringToBytes = (type, str) => {\n    if (!CODERS.hasOwnProperty(type))\n        throw new TypeError(coderTypeError);\n    if (typeof str !== 'string')\n        throw new TypeError('stringToBytes() expects string');\n    return CODERS[type].decode(str);\n};\nexports.stringToBytes = stringToBytes;\nexports.bytes = exports.stringToBytes;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}