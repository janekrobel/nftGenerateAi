{"ast":null,"code":"/*\n//const ethers = require('ethers');\nlet currentAccount = \"\";\nlet provider;\nlet signer;\nlet contractAddress = \"\";\n\nconst abi = {\n\n}\n\nexports.connectToMetamask = async () => {\n    if(window.ethereum) {\n        try{\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n            currentAccount = accounts[0];\n\n            provider = new ethers.providers.Web3Provider(window.ethereum);\n            signer = provider.getSigner();\n             \n        }\n        catch(err){\n            console.log(err);\n        }\n    }\n}\nexports.mint(imageLink) = async () => {\n    \n    const aiNftContract = new ethers.Contract(contractAddress,abi,provider);\n    const options = {value: ethers.utils.parseEther(\"0\")};\n\n    \n\n}\nexports.getAllLinks() = async () => {\n    \n}\n*/","map":{"version":3,"names":[],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/src/contractModel.js"],"sourcesContent":["/*\n//const ethers = require('ethers');\nlet currentAccount = \"\";\nlet provider;\nlet signer;\nlet contractAddress = \"\";\n\nconst abi = {\n\n}\n\nexports.connectToMetamask = async () => {\n    if(window.ethereum) {\n        try{\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n            currentAccount = accounts[0];\n\n            provider = new ethers.providers.Web3Provider(window.ethereum);\n            signer = provider.getSigner();\n             \n        }\n        catch(err){\n            console.log(err);\n        }\n    }\n}\nexports.mint(imageLink) = async () => {\n    \n    const aiNftContract = new ethers.Contract(contractAddress,abi,provider);\n    const options = {value: ethers.utils.parseEther(\"0\")};\n\n    \n\n}\nexports.getAllLinks() = async () => {\n    \n}\n*/"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}