{"ast":null,"code":"const {\n  ethers\n} = require(\"ethers\");\nlet currentAccount = \"\";\nexports.connectToMetamask = async () => {\n  if (window.ethereum) {\n    try {\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      currentAccount = accounts[0];\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      const signer = provider.getSigner();\n    } catch (err) {\n      console.log(err);\n    }\n  }\n};","map":{"version":3,"names":["ethers","require","currentAccount","exports","connectToMetamask","window","ethereum","accounts","request","method","provider","providers","Web3Provider","signer","getSigner","err","console","log"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/src/contractModel.js"],"sourcesContent":["const { ethers } = require(\"ethers\");\n\nlet currentAccount = \"\";\n\nexports.connectToMetamask = async () => {\n    if(window.ethereum) {\n        try{\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n            currentAccount = accounts[0];\n\n            const provider = new ethers.providers.Web3Provider(window.ethereum)\n            const signer = provider.getSigner()\n             \n\n        }\n        catch(err){\n            console.log(err);\n        }\n    }\n}"],"mappings":"AAAA,MAAM;EAAEA;AAAO,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEpC,IAAIC,cAAc,GAAG,EAAE;AAEvBC,OAAO,CAACC,iBAAiB,GAAG,YAAY;EACpC,IAAGC,MAAM,CAACC,QAAQ,EAAE;IAChB,IAAG;MACC,MAAMC,QAAQ,GAAG,MAAMF,MAAM,CAACC,QAAQ,CAACE,OAAO,CAAC;QAC3CC,MAAM,EAAE;MACZ,CAAC,CAAC;MACFP,cAAc,GAAGK,QAAQ,CAAC,CAAC,CAAC;MAE5B,MAAMG,QAAQ,GAAG,IAAIV,MAAM,CAACW,SAAS,CAACC,YAAY,CAACP,MAAM,CAACC,QAAQ,CAAC;MACnE,MAAMO,MAAM,GAAGH,QAAQ,CAACI,SAAS,EAAE;IAGvC,CAAC,CACD,OAAMC,GAAG,EAAC;MACNC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IACpB;EACJ;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}