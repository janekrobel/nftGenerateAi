{"ast":null,"code":"// Copied from https://raw.githubusercontent.com/nodejs/node/v15.3.0/lib/internal/modules/esm/get_format.js\n\n'use strict';\n\nconst {\n  RegExpPrototypeExec,\n  StringPrototypeStartsWith\n} = require('./node-primordials');\nconst {\n  extname\n} = require('path');\nconst {\n  getOptionValue\n} = require('./node-options');\nconst [nodeMajor, nodeMinor] = process.versions.node.split('.').map(s => parseInt(s, 10));\nconst experimentalJsonModules = nodeMajor > 17 || nodeMajor === 17 && nodeMinor >= 5 || nodeMajor === 16 && nodeMinor >= 15 || getOptionValue('--experimental-json-modules');\nconst experimentalWasmModules = getOptionValue('--experimental-wasm-modules');\nconst {\n  URL,\n  fileURLToPath\n} = require('url');\nconst {\n  ERR_UNKNOWN_FILE_EXTENSION\n} = require('./node-internal-errors').codes;\nconst extensionFormatMap = {\n  '__proto__': null,\n  '.cjs': 'commonjs',\n  '.js': 'module',\n  '.mjs': 'module'\n};\nconst legacyExtensionFormatMap = {\n  '__proto__': null,\n  '.cjs': 'commonjs',\n  '.js': 'commonjs',\n  '.json': 'commonjs',\n  '.mjs': 'module',\n  '.node': 'commonjs'\n};\nif (experimentalWasmModules) extensionFormatMap['.wasm'] = legacyExtensionFormatMap['.wasm'] = 'wasm';\nif (experimentalJsonModules) extensionFormatMap['.json'] = legacyExtensionFormatMap['.json'] = 'json';\n\n/**\n *\n * @param {'node' | 'explicit'} [tsNodeExperimentalSpecifierResolution]\n * @param {ReturnType<\n *  typeof import('../dist-raw/node-internal-modules-esm-resolve').createResolve\n * >} nodeEsmResolver\n */\nfunction createGetFormat(tsNodeExperimentalSpecifierResolution, nodeEsmResolver) {\n  // const experimentalSpeciferResolution = tsNodeExperimentalSpecifierResolution ?? getOptionValue('--experimental-specifier-resolution');\n  let experimentalSpeciferResolution = tsNodeExperimentalSpecifierResolution != null ? tsNodeExperimentalSpecifierResolution : getOptionValue('--experimental-specifier-resolution');\n  const {\n    getPackageType\n  } = nodeEsmResolver;\n\n  /**\n   * @param {string} url\n   * @param {{}} context\n   * @param {any} defaultGetFormatUnused\n   * @returns {ReturnType<import('../src/esm').NodeLoaderHooksAPI1.GetFormatHook>}\n   */\n  function defaultGetFormat(url, context, defaultGetFormatUnused) {\n    if (StringPrototypeStartsWith(url, 'node:')) {\n      return {\n        format: 'builtin'\n      };\n    }\n    const parsed = new URL(url);\n    if (parsed.protocol === 'data:') {\n      const [, mime] = RegExpPrototypeExec(/^([^/]+\\/[^;,]+)(?:[^,]*?)(;base64)?,/, parsed.pathname) || [null, null, null];\n      const format = {\n        '__proto__': null,\n        'text/javascript': 'module',\n        'application/json': experimentalJsonModules ? 'json' : null,\n        'application/wasm': experimentalWasmModules ? 'wasm' : null\n      }[mime] || null;\n      return {\n        format\n      };\n    } else if (parsed.protocol === 'file:') {\n      const ext = extname(parsed.pathname);\n      let format;\n      if (ext === '.js') {\n        format = getPackageType(parsed.href) === 'module' ? 'module' : 'commonjs';\n      } else {\n        format = extensionFormatMap[ext];\n      }\n      if (!format) {\n        if (experimentalSpeciferResolution === 'node') {\n          process.emitWarning('The Node.js specifier resolution in ESM is experimental.', 'ExperimentalWarning');\n          format = legacyExtensionFormatMap[ext];\n        } else {\n          throw new ERR_UNKNOWN_FILE_EXTENSION(ext, fileURLToPath(url));\n        }\n      }\n      return {\n        format: format || null\n      };\n    }\n    return {\n      format: null\n    };\n  }\n  return {\n    defaultGetFormat\n  };\n}\nmodule.exports = {\n  createGetFormat\n};","map":{"version":3,"names":["RegExpPrototypeExec","StringPrototypeStartsWith","require","extname","getOptionValue","nodeMajor","nodeMinor","process","versions","node","split","map","s","parseInt","experimentalJsonModules","experimentalWasmModules","URL","fileURLToPath","ERR_UNKNOWN_FILE_EXTENSION","codes","extensionFormatMap","legacyExtensionFormatMap","createGetFormat","tsNodeExperimentalSpecifierResolution","nodeEsmResolver","experimentalSpeciferResolution","getPackageType","defaultGetFormat","url","context","defaultGetFormatUnused","format","parsed","protocol","mime","pathname","ext","href","emitWarning","module","exports"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ts-node/dist-raw/node-internal-modules-esm-get_format.js"],"sourcesContent":["// Copied from https://raw.githubusercontent.com/nodejs/node/v15.3.0/lib/internal/modules/esm/get_format.js\n\n'use strict';\nconst {\n  RegExpPrototypeExec,\n  StringPrototypeStartsWith,\n} = require('./node-primordials');\nconst { extname } = require('path');\nconst { getOptionValue } = require('./node-options');\n\nconst [nodeMajor, nodeMinor] = process.versions.node.split('.').map(s => parseInt(s, 10));\nconst experimentalJsonModules =\n  nodeMajor > 17\n  || (nodeMajor === 17 && nodeMinor >= 5)\n  || (nodeMajor === 16 && nodeMinor >= 15)\n  || getOptionValue('--experimental-json-modules');\nconst experimentalWasmModules = getOptionValue('--experimental-wasm-modules');\nconst { URL, fileURLToPath } = require('url');\nconst { ERR_UNKNOWN_FILE_EXTENSION } = require('./node-internal-errors').codes;\n\nconst extensionFormatMap = {\n  '__proto__': null,\n  '.cjs': 'commonjs',\n  '.js': 'module',\n  '.mjs': 'module'\n};\n\nconst legacyExtensionFormatMap = {\n  '__proto__': null,\n  '.cjs': 'commonjs',\n  '.js': 'commonjs',\n  '.json': 'commonjs',\n  '.mjs': 'module',\n  '.node': 'commonjs'\n};\n\nif (experimentalWasmModules)\n  extensionFormatMap['.wasm'] = legacyExtensionFormatMap['.wasm'] = 'wasm';\n\nif (experimentalJsonModules)\n  extensionFormatMap['.json'] = legacyExtensionFormatMap['.json'] = 'json';\n\n/**\n *\n * @param {'node' | 'explicit'} [tsNodeExperimentalSpecifierResolution]\n * @param {ReturnType<\n *  typeof import('../dist-raw/node-internal-modules-esm-resolve').createResolve\n * >} nodeEsmResolver\n */\nfunction createGetFormat(tsNodeExperimentalSpecifierResolution, nodeEsmResolver) {\n// const experimentalSpeciferResolution = tsNodeExperimentalSpecifierResolution ?? getOptionValue('--experimental-specifier-resolution');\nlet experimentalSpeciferResolution = tsNodeExperimentalSpecifierResolution != null ? tsNodeExperimentalSpecifierResolution : getOptionValue('--experimental-specifier-resolution');\nconst { getPackageType } = nodeEsmResolver;\n\n/**\n * @param {string} url\n * @param {{}} context\n * @param {any} defaultGetFormatUnused\n * @returns {ReturnType<import('../src/esm').NodeLoaderHooksAPI1.GetFormatHook>}\n */\nfunction defaultGetFormat(url, context, defaultGetFormatUnused) {\n  if (StringPrototypeStartsWith(url, 'node:')) {\n    return { format: 'builtin' };\n  }\n  const parsed = new URL(url);\n  if (parsed.protocol === 'data:') {\n    const [ , mime ] = RegExpPrototypeExec(\n      /^([^/]+\\/[^;,]+)(?:[^,]*?)(;base64)?,/,\n      parsed.pathname,\n    ) || [ null, null, null ];\n    const format = ({\n      '__proto__': null,\n      'text/javascript': 'module',\n      'application/json': experimentalJsonModules ? 'json' : null,\n      'application/wasm': experimentalWasmModules ? 'wasm' : null\n    })[mime] || null;\n    return { format };\n  } else if (parsed.protocol === 'file:') {\n    const ext = extname(parsed.pathname);\n    let format;\n    if (ext === '.js') {\n      format = getPackageType(parsed.href) === 'module' ? 'module' : 'commonjs';\n    } else {\n      format = extensionFormatMap[ext];\n    }\n    if (!format) {\n      if (experimentalSpeciferResolution === 'node') {\n        process.emitWarning(\n          'The Node.js specifier resolution in ESM is experimental.',\n          'ExperimentalWarning');\n        format = legacyExtensionFormatMap[ext];\n      } else {\n        throw new ERR_UNKNOWN_FILE_EXTENSION(ext, fileURLToPath(url));\n      }\n    }\n    return { format: format || null };\n  }\n  return { format: null };\n}\n\nreturn {defaultGetFormat};\n}\n\nmodule.exports = {\n  createGetFormat\n};\n"],"mappings":"AAAA;;AAEA,YAAY;;AACZ,MAAM;EACJA,mBAAmB;EACnBC;AACF,CAAC,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACjC,MAAM;EAAEC;AAAQ,CAAC,GAAGD,OAAO,CAAC,MAAM,CAAC;AACnC,MAAM;EAAEE;AAAe,CAAC,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAEpD,MAAM,CAACG,SAAS,EAAEC,SAAS,CAAC,GAAGC,OAAO,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,CAAC,IAAIC,QAAQ,CAACD,CAAC,EAAE,EAAE,CAAC,CAAC;AACzF,MAAME,uBAAuB,GAC3BT,SAAS,GAAG,EAAE,IACVA,SAAS,KAAK,EAAE,IAAIC,SAAS,IAAI,CAAE,IACnCD,SAAS,KAAK,EAAE,IAAIC,SAAS,IAAI,EAAG,IACrCF,cAAc,CAAC,6BAA6B,CAAC;AAClD,MAAMW,uBAAuB,GAAGX,cAAc,CAAC,6BAA6B,CAAC;AAC7E,MAAM;EAAEY,GAAG;EAAEC;AAAc,CAAC,GAAGf,OAAO,CAAC,KAAK,CAAC;AAC7C,MAAM;EAAEgB;AAA2B,CAAC,GAAGhB,OAAO,CAAC,wBAAwB,CAAC,CAACiB,KAAK;AAE9E,MAAMC,kBAAkB,GAAG;EACzB,WAAW,EAAE,IAAI;EACjB,MAAM,EAAE,UAAU;EAClB,KAAK,EAAE,QAAQ;EACf,MAAM,EAAE;AACV,CAAC;AAED,MAAMC,wBAAwB,GAAG;EAC/B,WAAW,EAAE,IAAI;EACjB,MAAM,EAAE,UAAU;EAClB,KAAK,EAAE,UAAU;EACjB,OAAO,EAAE,UAAU;EACnB,MAAM,EAAE,QAAQ;EAChB,OAAO,EAAE;AACX,CAAC;AAED,IAAIN,uBAAuB,EACzBK,kBAAkB,CAAC,OAAO,CAAC,GAAGC,wBAAwB,CAAC,OAAO,CAAC,GAAG,MAAM;AAE1E,IAAIP,uBAAuB,EACzBM,kBAAkB,CAAC,OAAO,CAAC,GAAGC,wBAAwB,CAAC,OAAO,CAAC,GAAG,MAAM;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAe,CAACC,qCAAqC,EAAEC,eAAe,EAAE;EACjF;EACA,IAAIC,8BAA8B,GAAGF,qCAAqC,IAAI,IAAI,GAAGA,qCAAqC,GAAGnB,cAAc,CAAC,qCAAqC,CAAC;EAClL,MAAM;IAAEsB;EAAe,CAAC,GAAGF,eAAe;;EAE1C;AACA;AACA;AACA;AACA;AACA;EACA,SAASG,gBAAgB,CAACC,GAAG,EAAEC,OAAO,EAAEC,sBAAsB,EAAE;IAC9D,IAAI7B,yBAAyB,CAAC2B,GAAG,EAAE,OAAO,CAAC,EAAE;MAC3C,OAAO;QAAEG,MAAM,EAAE;MAAU,CAAC;IAC9B;IACA,MAAMC,MAAM,GAAG,IAAIhB,GAAG,CAACY,GAAG,CAAC;IAC3B,IAAII,MAAM,CAACC,QAAQ,KAAK,OAAO,EAAE;MAC/B,MAAM,GAAIC,IAAI,CAAE,GAAGlC,mBAAmB,CACpC,uCAAuC,EACvCgC,MAAM,CAACG,QAAQ,CAChB,IAAI,CAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAE;MACzB,MAAMJ,MAAM,GAAI;QACd,WAAW,EAAE,IAAI;QACjB,iBAAiB,EAAE,QAAQ;QAC3B,kBAAkB,EAAEjB,uBAAuB,GAAG,MAAM,GAAG,IAAI;QAC3D,kBAAkB,EAAEC,uBAAuB,GAAG,MAAM,GAAG;MACzD,CAAC,CAAEmB,IAAI,CAAC,IAAI,IAAI;MAChB,OAAO;QAAEH;MAAO,CAAC;IACnB,CAAC,MAAM,IAAIC,MAAM,CAACC,QAAQ,KAAK,OAAO,EAAE;MACtC,MAAMG,GAAG,GAAGjC,OAAO,CAAC6B,MAAM,CAACG,QAAQ,CAAC;MACpC,IAAIJ,MAAM;MACV,IAAIK,GAAG,KAAK,KAAK,EAAE;QACjBL,MAAM,GAAGL,cAAc,CAACM,MAAM,CAACK,IAAI,CAAC,KAAK,QAAQ,GAAG,QAAQ,GAAG,UAAU;MAC3E,CAAC,MAAM;QACLN,MAAM,GAAGX,kBAAkB,CAACgB,GAAG,CAAC;MAClC;MACA,IAAI,CAACL,MAAM,EAAE;QACX,IAAIN,8BAA8B,KAAK,MAAM,EAAE;UAC7ClB,OAAO,CAAC+B,WAAW,CACjB,0DAA0D,EAC1D,qBAAqB,CAAC;UACxBP,MAAM,GAAGV,wBAAwB,CAACe,GAAG,CAAC;QACxC,CAAC,MAAM;UACL,MAAM,IAAIlB,0BAA0B,CAACkB,GAAG,EAAEnB,aAAa,CAACW,GAAG,CAAC,CAAC;QAC/D;MACF;MACA,OAAO;QAAEG,MAAM,EAAEA,MAAM,IAAI;MAAK,CAAC;IACnC;IACA,OAAO;MAAEA,MAAM,EAAE;IAAK,CAAC;EACzB;EAEA,OAAO;IAACJ;EAAgB,CAAC;AACzB;AAEAY,MAAM,CAACC,OAAO,GAAG;EACflB;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}