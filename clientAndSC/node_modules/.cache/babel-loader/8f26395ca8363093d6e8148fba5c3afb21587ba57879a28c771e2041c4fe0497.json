{"ast":null,"code":"const ethers = require('ethers');\nconst abi = require('./artifacts/contracts/AiNft.sol/AiNft.json');\nlet network = \"goerli\";\nlet currentAccount = \"\";\nlet provider;\nlet signer;\nlet contractAddress = \"0xA669F6F1Cb417A13b16D80fc714d191f42783Cae\";\nlet infuraUrl = \"https://goerli.infura.io/v3/5bf64147f23b4d0593632928be0061c3\";\nexports.connectToMetamask = async () => {\n  if (window.ethereum) {\n    try {\n      const accounts = await window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      currentAccount = accounts[0];\n      provider = new ethers.providers.JsonRpcProvider(infuraUrl);\n      signer = provider.getSigner();\n      console.log(\"connected\");\n      const aiNftContract = new ethers.Contract(contractAddress, abi.abi, provider);\n      /*\n      aiNftContract.balanceOf(currentAccount).then((value) => {\n          console.log(value);\n      });\n      */\n      //change the status to connected!!!\n      const options = {\n        value: ethers.utils.parseEther(\"0\")\n      };\n      const response = await aiNftContract.connect(signer).mint(options, imageLink);\n      const events = await response.wait();\n      console.log(events.events[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  }\n};\nexports.mint = async imageLink => {\n  try {\n    if (provider && abi.abi && currentAccount) {\n      const aiNftContract = new ethers.Contract(contractAddress, abi.abi, provider);\n      const options = {\n        value: ethers.utils.parseEther(\"0\")\n      };\n      const response = await aiNftContract.connect(signer).mint(options, imageLink);\n      const events = await response.wait();\n      console.log(events.events[0]);\n      return true;\n    }\n  } catch (err) {\n    return false;\n  }\n};\nexports.getAllLinks = async () => {\n  let srcList = [];\n  try {\n    if (provider && abi.abi && currentAccount) {\n      const aiNftContract = new ethers.Contract(contractAddress, abi.abi, provider);\n      const response = await aiNftContract.getOwnedNFTIds(currentAccount);\n      //check how to read returned arrays! \n      for (let i = 0; i < response.length; i++) {\n        srcList.push(await aiNftContract.getUrl(response[i]));\n      }\n      console.log(srcList);\n      return srcList;\n    } else {\n      throw false;\n    }\n  } catch (err) {\n    console.log(err);\n    return false;\n  }\n};","map":{"version":3,"names":["ethers","require","abi","network","currentAccount","provider","signer","contractAddress","infuraUrl","exports","connectToMetamask","window","ethereum","accounts","request","method","providers","JsonRpcProvider","getSigner","console","log","aiNftContract","Contract","options","value","utils","parseEther","response","connect","mint","imageLink","events","wait","error","err","getAllLinks","srcList","getOwnedNFTIds","i","length","push","getUrl"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/src/contractModel.js"],"sourcesContent":["const ethers = require('ethers');\nconst abi = require('./artifacts/contracts/AiNft.sol/AiNft.json');\n\nlet network = \"goerli\";\nlet currentAccount = \"\";\nlet provider;\nlet signer;\nlet contractAddress = \"0xA669F6F1Cb417A13b16D80fc714d191f42783Cae\";\nlet infuraUrl = \"https://goerli.infura.io/v3/5bf64147f23b4d0593632928be0061c3\";\n\nexports.connectToMetamask = async () => {\n    if(window.ethereum) {\n        try{\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\",\n            });\n            currentAccount = accounts[0];\n            provider = new ethers.providers.JsonRpcProvider(infuraUrl);\n            signer = provider.getSigner();\n            console.log(\"connected\");\n            \n            const aiNftContract = new ethers.Contract(contractAddress,abi.abi,provider);\n            /*\n            aiNftContract.balanceOf(currentAccount).then((value) => {\n                console.log(value);\n            });\n            */\n            //change the status to connected!!!\n            const options = {value: ethers.utils.parseEther(\"0\")};\n            const response = await aiNftContract.connect(signer).mint(options, imageLink);\n            const events  = await response.wait();\n            console.log(events.events[0]);\n\n        }\n        catch(error){\n            console.log(error);\n        }\n    }\n}\n\nexports.mint = async (imageLink) => {\n    try{\n        if(provider&&abi.abi&&currentAccount){\n            const aiNftContract = new ethers.Contract(contractAddress,abi.abi,provider);\n            const options = {value: ethers.utils.parseEther(\"0\")};\n            const response = await aiNftContract.connect(signer).mint(options, imageLink);\n            const events  = await response.wait();\n            console.log(events.events[0]);\n            return true\n        }\n    }\n    catch(err){\n        return false;\n    }        \n}\nexports.getAllLinks = async () => {\n    let srcList = [];\n    try{\n        if(provider&&abi.abi&&currentAccount){\n            const aiNftContract = new ethers.Contract(contractAddress,abi.abi,provider);\n            const response = await aiNftContract.getOwnedNFTIds(currentAccount);\n            //check how to read returned arrays! \n            for(let i = 0; i < response.length; i++){\n                srcList.push(await aiNftContract.getUrl(response[i]));\n            }\n            console.log(srcList);\n            return srcList;\n\n        }\n        else{\n            throw false;\n        }\n    }\n    catch(err){\n        console.log(err);\n        return false;\n    }\n\n    \n}\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}