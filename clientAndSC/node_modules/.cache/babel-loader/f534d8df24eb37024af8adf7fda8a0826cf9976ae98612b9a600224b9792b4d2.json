{"ast":null,"code":"import { __assign, __rest } from \"tslib\";\nimport { browserPerformanceTimeOrigin, getGlobalObject, logger } from '@sentry/utils';\nimport { msToSec } from '../utils';\nimport { getCLS } from './web-vitals/getCLS';\nimport { getFID } from './web-vitals/getFID';\nimport { getLCP } from './web-vitals/getLCP';\nimport { getTTFB } from './web-vitals/getTTFB';\nimport { getFirstHidden } from './web-vitals/lib/getFirstHidden';\nvar global = getGlobalObject();\n/** Class tracking metrics  */\nvar MetricsInstrumentation = /** @class */function () {\n  function MetricsInstrumentation() {\n    this._measurements = {};\n    this._performanceCursor = 0;\n    if (global && global.performance) {\n      if (global.performance.mark) {\n        global.performance.mark('sentry-tracing-init');\n      }\n      this._trackCLS();\n      this._trackLCP();\n      this._trackFID();\n      this._trackTTFB();\n    }\n  }\n  /** Add performance related spans to a transaction */\n  MetricsInstrumentation.prototype.addPerformanceEntries = function (transaction) {\n    var _this = this;\n    if (!global || !global.performance || !global.performance.getEntries || !browserPerformanceTimeOrigin) {\n      // Gatekeeper if performance API not available\n      return;\n    }\n    logger.log('[Tracing] Adding & adjusting spans using Performance API');\n    var timeOrigin = msToSec(browserPerformanceTimeOrigin);\n    var entryScriptSrc;\n    if (global.document) {\n      // eslint-disable-next-line @typescript-eslint/prefer-for-of\n      for (var i = 0; i < document.scripts.length; i++) {\n        // We go through all scripts on the page and look for 'data-entry'\n        // We remember the name and measure the time between this script finished loading and\n        // our mark 'sentry-tracing-init'\n        if (document.scripts[i].dataset.entry === 'true') {\n          entryScriptSrc = document.scripts[i].src;\n          break;\n        }\n      }\n    }\n    var entryScriptStartTimestamp;\n    var tracingInitMarkStartTime;\n    global.performance.getEntries().slice(this._performanceCursor).forEach(function (entry) {\n      var startTime = msToSec(entry.startTime);\n      var duration = msToSec(entry.duration);\n      if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n        return;\n      }\n      switch (entry.entryType) {\n        case 'navigation':\n          addNavigationSpans(transaction, entry, timeOrigin);\n          break;\n        case 'mark':\n        case 'paint':\n        case 'measure':\n          {\n            var startTimestamp = addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n            if (tracingInitMarkStartTime === undefined && entry.name === 'sentry-tracing-init') {\n              tracingInitMarkStartTime = startTimestamp;\n            }\n            // capture web vitals\n            var firstHidden = getFirstHidden();\n            // Only report if the page wasn't hidden prior to the web vital.\n            var shouldRecord = entry.startTime < firstHidden.timeStamp;\n            if (entry.name === 'first-paint' && shouldRecord) {\n              logger.log('[Measurements] Adding FP');\n              _this._measurements['fp'] = {\n                value: entry.startTime\n              };\n              _this._measurements['mark.fp'] = {\n                value: startTimestamp\n              };\n            }\n            if (entry.name === 'first-contentful-paint' && shouldRecord) {\n              logger.log('[Measurements] Adding FCP');\n              _this._measurements['fcp'] = {\n                value: entry.startTime\n              };\n              _this._measurements['mark.fcp'] = {\n                value: startTimestamp\n              };\n            }\n            break;\n          }\n        case 'resource':\n          {\n            var resourceName = entry.name.replace(window.location.origin, '');\n            var endTimestamp = addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n            // We remember the entry script end time to calculate the difference to the first init mark\n            if (entryScriptStartTimestamp === undefined && (entryScriptSrc || '').indexOf(resourceName) > -1) {\n              entryScriptStartTimestamp = endTimestamp;\n            }\n            break;\n          }\n        default:\n        // Ignore other entry types.\n      }\n    });\n\n    if (entryScriptStartTimestamp !== undefined && tracingInitMarkStartTime !== undefined) {\n      _startChild(transaction, {\n        description: 'evaluation',\n        endTimestamp: tracingInitMarkStartTime,\n        op: 'script',\n        startTimestamp: entryScriptStartTimestamp\n      });\n    }\n    this._performanceCursor = Math.max(performance.getEntries().length - 1, 0);\n    this._trackNavigator(transaction);\n    // Measurements are only available for pageload transactions\n    if (transaction.op === 'pageload') {\n      // normalize applicable web vital values to be relative to transaction.startTimestamp\n      var timeOrigin_1 = msToSec(browserPerformanceTimeOrigin);\n      ['fcp', 'fp', 'lcp', 'ttfb'].forEach(function (name) {\n        if (!_this._measurements[name] || timeOrigin_1 >= transaction.startTimestamp) {\n          return;\n        }\n        // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n        // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n        // to be adjusted to be relative to transaction.startTimestamp.\n        var oldValue = _this._measurements[name].value;\n        var measurementTimestamp = timeOrigin_1 + msToSec(oldValue);\n        // normalizedValue should be in milliseconds\n        var normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n        var delta = normalizedValue - oldValue;\n        logger.log(\"[Measurements] Normalized \" + name + \" from \" + oldValue + \" to \" + normalizedValue + \" (\" + delta + \")\");\n        _this._measurements[name].value = normalizedValue;\n      });\n      if (this._measurements['mark.fid'] && this._measurements['fid']) {\n        // create span for FID\n        _startChild(transaction, {\n          description: 'first input delay',\n          endTimestamp: this._measurements['mark.fid'].value + msToSec(this._measurements['fid'].value),\n          op: 'web.vitals',\n          startTimestamp: this._measurements['mark.fid'].value\n        });\n      }\n      transaction.setMeasurements(this._measurements);\n    }\n  };\n  /** Starts tracking the Cumulative Layout Shift on the current page. */\n  MetricsInstrumentation.prototype._trackCLS = function () {\n    var _this = this;\n    getCLS(function (metric) {\n      var entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n      logger.log('[Measurements] Adding CLS');\n      _this._measurements['cls'] = {\n        value: metric.value\n      };\n    });\n  };\n  /**\n   * Capture the information of the user agent.\n   */\n  MetricsInstrumentation.prototype._trackNavigator = function (transaction) {\n    var navigator = global.navigator;\n    if (!navigator) {\n      return;\n    }\n    // track network connectivity\n    var connection = navigator.connection;\n    if (connection) {\n      if (connection.effectiveType) {\n        transaction.setTag('effectiveConnectionType', connection.effectiveType);\n      }\n      if (connection.type) {\n        transaction.setTag('connectionType', connection.type);\n      }\n      if (isMeasurementValue(connection.rtt)) {\n        this._measurements['connection.rtt'] = {\n          value: connection.rtt\n        };\n      }\n      if (isMeasurementValue(connection.downlink)) {\n        this._measurements['connection.downlink'] = {\n          value: connection.downlink\n        };\n      }\n    }\n    if (isMeasurementValue(navigator.deviceMemory)) {\n      transaction.setTag('deviceMemory', String(navigator.deviceMemory));\n    }\n    if (isMeasurementValue(navigator.hardwareConcurrency)) {\n      transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n    }\n  };\n  /** Starts tracking the Largest Contentful Paint on the current page. */\n  MetricsInstrumentation.prototype._trackLCP = function () {\n    var _this = this;\n    getLCP(function (metric) {\n      var entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n      var timeOrigin = msToSec(performance.timeOrigin);\n      var startTime = msToSec(entry.startTime);\n      logger.log('[Measurements] Adding LCP');\n      _this._measurements['lcp'] = {\n        value: metric.value\n      };\n      _this._measurements['mark.lcp'] = {\n        value: timeOrigin + startTime\n      };\n    });\n  };\n  /** Starts tracking the First Input Delay on the current page. */\n  MetricsInstrumentation.prototype._trackFID = function () {\n    var _this = this;\n    getFID(function (metric) {\n      var entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n      var timeOrigin = msToSec(performance.timeOrigin);\n      var startTime = msToSec(entry.startTime);\n      logger.log('[Measurements] Adding FID');\n      _this._measurements['fid'] = {\n        value: metric.value\n      };\n      _this._measurements['mark.fid'] = {\n        value: timeOrigin + startTime\n      };\n    });\n  };\n  /** Starts tracking the Time to First Byte on the current page. */\n  MetricsInstrumentation.prototype._trackTTFB = function () {\n    var _this = this;\n    getTTFB(function (metric) {\n      var _a;\n      var entry = metric.entries.pop();\n      if (!entry) {\n        return;\n      }\n      logger.log('[Measurements] Adding TTFB');\n      _this._measurements['ttfb'] = {\n        value: metric.value\n      };\n      // Capture the time spent making the request and receiving the first byte of the response\n      var requestTime = metric.value - (_a = metric.entries[0], _a !== null && _a !== void 0 ? _a : entry).requestStart;\n      _this._measurements['ttfb.requestTime'] = {\n        value: requestTime\n      };\n    });\n  };\n  return MetricsInstrumentation;\n}();\nexport { MetricsInstrumentation };\n/** Instrument navigation entries */\nfunction addNavigationSpans(transaction, entry, timeOrigin) {\n  addPerformanceNavigationTiming(transaction, entry, 'unloadEvent', timeOrigin);\n  addPerformanceNavigationTiming(transaction, entry, 'redirect', timeOrigin);\n  addPerformanceNavigationTiming(transaction, entry, 'domContentLoadedEvent', timeOrigin);\n  addPerformanceNavigationTiming(transaction, entry, 'loadEvent', timeOrigin);\n  addPerformanceNavigationTiming(transaction, entry, 'connect', timeOrigin);\n  addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'connectEnd');\n  addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'domainLookupStart');\n  addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin);\n  addRequest(transaction, entry, timeOrigin);\n}\n/** Create measure related spans */\nfunction addMeasureSpans(transaction, entry, startTime, duration, timeOrigin) {\n  var measureStartTimestamp = timeOrigin + startTime;\n  var measureEndTimestamp = measureStartTimestamp + duration;\n  _startChild(transaction, {\n    description: entry.name,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType,\n    startTimestamp: measureStartTimestamp\n  });\n  return measureStartTimestamp;\n}\n/** Create resource-related spans */\nexport function addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin) {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return undefined;\n  }\n  var data = {};\n  if ('transferSize' in entry) {\n    data['Transfer Size'] = entry.transferSize;\n  }\n  if ('encodedBodySize' in entry) {\n    data['Encoded Body Size'] = entry.encodedBodySize;\n  }\n  if ('decodedBodySize' in entry) {\n    data['Decoded Body Size'] = entry.decodedBodySize;\n  }\n  var startTimestamp = timeOrigin + startTime;\n  var endTimestamp = startTimestamp + duration;\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp: endTimestamp,\n    op: entry.initiatorType ? \"resource.\" + entry.initiatorType : 'resource',\n    startTimestamp: startTimestamp,\n    data: data\n  });\n  return endTimestamp;\n}\n/** Create performance navigation related spans */\nfunction addPerformanceNavigationTiming(transaction, entry, event, timeOrigin, eventEnd) {\n  var end = eventEnd ? entry[eventEnd] : entry[event + \"End\"];\n  var start = entry[event + \"Start\"];\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    description: event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end)\n  });\n}\n/** Create request and response related spans */\nfunction addRequest(transaction, entry, timeOrigin) {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd)\n  });\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd)\n  });\n}\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nexport function _startChild(transaction, _a) {\n  var startTimestamp = _a.startTimestamp,\n    ctx = __rest(_a, [\"startTimestamp\"]);\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n  return transaction.startChild(__assign({\n    startTimestamp: startTimestamp\n  }, ctx));\n}\n/**\n * Checks if a given value is a valid measurement value.\n */\nfunction isMeasurementValue(value) {\n  return typeof value === 'number' && isFinite(value);\n}","map":{"version":3,"mappings":"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","names":["browserPerformanceTimeOrigin","getGlobalObject","logger","msToSec","getCLS","getFID","getLCP","getTTFB","getFirstHidden","global","performance","mark","_trackCLS","_trackLCP","_trackFID","_trackTTFB","MetricsInstrumentation","transaction","getEntries","log","timeOrigin","entryScriptSrc","document","i","scripts","length","dataset","entry","src","entryScriptStartTimestamp","tracingInitMarkStartTime","slice","_performanceCursor","forEach","startTime","duration","op","startTimestamp","entryType","addNavigationSpans","addMeasureSpans","undefined","name","firstHidden","shouldRecord","timeStamp","_this","_measurements","value","resourceName","replace","window","location","origin","endTimestamp","addResourceSpans","indexOf","_startChild","description","Math","max","_trackNavigator","timeOrigin_1","oldValue","measurementTimestamp","normalizedValue","abs","delta","setMeasurements","metric","entries","pop","navigator","connection","effectiveType","setTag","type","isMeasurementValue","rtt","downlink","deviceMemory","String","hardwareConcurrency","requestTime","requestStart","addPerformanceNavigationTiming","addRequest","measureStartTimestamp","measureEndTimestamp","initiatorType","data","transferSize","encodedBodySize","decodedBodySize","event","eventEnd","end","start","responseEnd","responseStart","_a","ctx","startChild","isFinite"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@sentry/tracing/src/browser/metrics.ts"],"sourcesContent":["/* eslint-disable max-lines */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { Measurements, SpanContext } from '@sentry/types';\nimport { browserPerformanceTimeOrigin, getGlobalObject, logger } from '@sentry/utils';\n\nimport { Span } from '../span';\nimport { Transaction } from '../transaction';\nimport { msToSec } from '../utils';\nimport { getCLS } from './web-vitals/getCLS';\nimport { getFID } from './web-vitals/getFID';\nimport { getLCP } from './web-vitals/getLCP';\nimport { getTTFB } from './web-vitals/getTTFB';\nimport { getFirstHidden } from './web-vitals/lib/getFirstHidden';\nimport { NavigatorDeviceMemory, NavigatorNetworkInformation } from './web-vitals/types';\n\nconst global = getGlobalObject<Window>();\n\n/** Class tracking metrics  */\nexport class MetricsInstrumentation {\n  private _measurements: Measurements = {};\n\n  private _performanceCursor: number = 0;\n\n  public constructor() {\n    if (global && global.performance) {\n      if (global.performance.mark) {\n        global.performance.mark('sentry-tracing-init');\n      }\n\n      this._trackCLS();\n      this._trackLCP();\n      this._trackFID();\n      this._trackTTFB();\n    }\n  }\n\n  /** Add performance related spans to a transaction */\n  public addPerformanceEntries(transaction: Transaction): void {\n    if (!global || !global.performance || !global.performance.getEntries || !browserPerformanceTimeOrigin) {\n      // Gatekeeper if performance API not available\n      return;\n    }\n\n    logger.log('[Tracing] Adding & adjusting spans using Performance API');\n\n    const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n    let entryScriptSrc: string | undefined;\n\n    if (global.document) {\n      // eslint-disable-next-line @typescript-eslint/prefer-for-of\n      for (let i = 0; i < document.scripts.length; i++) {\n        // We go through all scripts on the page and look for 'data-entry'\n        // We remember the name and measure the time between this script finished loading and\n        // our mark 'sentry-tracing-init'\n        if (document.scripts[i].dataset.entry === 'true') {\n          entryScriptSrc = document.scripts[i].src;\n          break;\n        }\n      }\n    }\n\n    let entryScriptStartTimestamp: number | undefined;\n    let tracingInitMarkStartTime: number | undefined;\n\n    global.performance\n      .getEntries()\n      .slice(this._performanceCursor)\n      .forEach((entry: Record<string, any>) => {\n        const startTime = msToSec(entry.startTime as number);\n        const duration = msToSec(entry.duration as number);\n\n        if (transaction.op === 'navigation' && timeOrigin + startTime < transaction.startTimestamp) {\n          return;\n        }\n\n        switch (entry.entryType) {\n          case 'navigation':\n            addNavigationSpans(transaction, entry, timeOrigin);\n            break;\n          case 'mark':\n          case 'paint':\n          case 'measure': {\n            const startTimestamp = addMeasureSpans(transaction, entry, startTime, duration, timeOrigin);\n            if (tracingInitMarkStartTime === undefined && entry.name === 'sentry-tracing-init') {\n              tracingInitMarkStartTime = startTimestamp;\n            }\n\n            // capture web vitals\n\n            const firstHidden = getFirstHidden();\n            // Only report if the page wasn't hidden prior to the web vital.\n            const shouldRecord = entry.startTime < firstHidden.timeStamp;\n\n            if (entry.name === 'first-paint' && shouldRecord) {\n              logger.log('[Measurements] Adding FP');\n              this._measurements['fp'] = { value: entry.startTime };\n              this._measurements['mark.fp'] = { value: startTimestamp };\n            }\n\n            if (entry.name === 'first-contentful-paint' && shouldRecord) {\n              logger.log('[Measurements] Adding FCP');\n              this._measurements['fcp'] = { value: entry.startTime };\n              this._measurements['mark.fcp'] = { value: startTimestamp };\n            }\n\n            break;\n          }\n          case 'resource': {\n            const resourceName = (entry.name as string).replace(window.location.origin, '');\n            const endTimestamp = addResourceSpans(transaction, entry, resourceName, startTime, duration, timeOrigin);\n            // We remember the entry script end time to calculate the difference to the first init mark\n            if (entryScriptStartTimestamp === undefined && (entryScriptSrc || '').indexOf(resourceName) > -1) {\n              entryScriptStartTimestamp = endTimestamp;\n            }\n            break;\n          }\n          default:\n          // Ignore other entry types.\n        }\n      });\n\n    if (entryScriptStartTimestamp !== undefined && tracingInitMarkStartTime !== undefined) {\n      _startChild(transaction, {\n        description: 'evaluation',\n        endTimestamp: tracingInitMarkStartTime,\n        op: 'script',\n        startTimestamp: entryScriptStartTimestamp,\n      });\n    }\n\n    this._performanceCursor = Math.max(performance.getEntries().length - 1, 0);\n\n    this._trackNavigator(transaction);\n\n    // Measurements are only available for pageload transactions\n    if (transaction.op === 'pageload') {\n      // normalize applicable web vital values to be relative to transaction.startTimestamp\n\n      const timeOrigin = msToSec(browserPerformanceTimeOrigin);\n\n      ['fcp', 'fp', 'lcp', 'ttfb'].forEach(name => {\n        if (!this._measurements[name] || timeOrigin >= transaction.startTimestamp) {\n          return;\n        }\n\n        // The web vitals, fcp, fp, lcp, and ttfb, all measure relative to timeOrigin.\n        // Unfortunately, timeOrigin is not captured within the transaction span data, so these web vitals will need\n        // to be adjusted to be relative to transaction.startTimestamp.\n\n        const oldValue = this._measurements[name].value;\n        const measurementTimestamp = timeOrigin + msToSec(oldValue);\n        // normalizedValue should be in milliseconds\n        const normalizedValue = Math.abs((measurementTimestamp - transaction.startTimestamp) * 1000);\n\n        const delta = normalizedValue - oldValue;\n        logger.log(`[Measurements] Normalized ${name} from ${oldValue} to ${normalizedValue} (${delta})`);\n\n        this._measurements[name].value = normalizedValue;\n      });\n\n      if (this._measurements['mark.fid'] && this._measurements['fid']) {\n        // create span for FID\n\n        _startChild(transaction, {\n          description: 'first input delay',\n          endTimestamp: this._measurements['mark.fid'].value + msToSec(this._measurements['fid'].value),\n          op: 'web.vitals',\n          startTimestamp: this._measurements['mark.fid'].value,\n        });\n      }\n\n      transaction.setMeasurements(this._measurements);\n    }\n  }\n\n  /** Starts tracking the Cumulative Layout Shift on the current page. */\n  private _trackCLS(): void {\n    getCLS(metric => {\n      const entry = metric.entries.pop();\n\n      if (!entry) {\n        return;\n      }\n\n      logger.log('[Measurements] Adding CLS');\n      this._measurements['cls'] = { value: metric.value };\n    });\n  }\n\n  /**\n   * Capture the information of the user agent.\n   */\n  private _trackNavigator(transaction: Transaction): void {\n    const navigator = global.navigator as null | (Navigator & NavigatorNetworkInformation & NavigatorDeviceMemory);\n\n    if (!navigator) {\n      return;\n    }\n\n    // track network connectivity\n\n    const connection = navigator.connection;\n    if (connection) {\n      if (connection.effectiveType) {\n        transaction.setTag('effectiveConnectionType', connection.effectiveType);\n      }\n\n      if (connection.type) {\n        transaction.setTag('connectionType', connection.type);\n      }\n\n      if (isMeasurementValue(connection.rtt)) {\n        this._measurements['connection.rtt'] = { value: connection.rtt as number };\n      }\n\n      if (isMeasurementValue(connection.downlink)) {\n        this._measurements['connection.downlink'] = { value: connection.downlink as number };\n      }\n    }\n\n    if (isMeasurementValue(navigator.deviceMemory)) {\n      transaction.setTag('deviceMemory', String(navigator.deviceMemory));\n    }\n\n    if (isMeasurementValue(navigator.hardwareConcurrency)) {\n      transaction.setTag('hardwareConcurrency', String(navigator.hardwareConcurrency));\n    }\n  }\n\n  /** Starts tracking the Largest Contentful Paint on the current page. */\n  private _trackLCP(): void {\n    getLCP(metric => {\n      const entry = metric.entries.pop();\n\n      if (!entry) {\n        return;\n      }\n\n      const timeOrigin = msToSec(performance.timeOrigin);\n      const startTime = msToSec(entry.startTime as number);\n      logger.log('[Measurements] Adding LCP');\n      this._measurements['lcp'] = { value: metric.value };\n      this._measurements['mark.lcp'] = { value: timeOrigin + startTime };\n    });\n  }\n\n  /** Starts tracking the First Input Delay on the current page. */\n  private _trackFID(): void {\n    getFID(metric => {\n      const entry = metric.entries.pop();\n\n      if (!entry) {\n        return;\n      }\n\n      const timeOrigin = msToSec(performance.timeOrigin);\n      const startTime = msToSec(entry.startTime as number);\n      logger.log('[Measurements] Adding FID');\n      this._measurements['fid'] = { value: metric.value };\n      this._measurements['mark.fid'] = { value: timeOrigin + startTime };\n    });\n  }\n\n  /** Starts tracking the Time to First Byte on the current page. */\n  private _trackTTFB(): void {\n    getTTFB(metric => {\n      const entry = metric.entries.pop();\n\n      if (!entry) {\n        return;\n      }\n\n      logger.log('[Measurements] Adding TTFB');\n      this._measurements['ttfb'] = { value: metric.value };\n\n      // Capture the time spent making the request and receiving the first byte of the response\n      const requestTime = metric.value - ((metric.entries[0] ?? entry) as PerformanceNavigationTiming).requestStart;\n      this._measurements['ttfb.requestTime'] = { value: requestTime };\n    });\n  }\n}\n\n/** Instrument navigation entries */\nfunction addNavigationSpans(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  addPerformanceNavigationTiming(transaction, entry, 'unloadEvent', timeOrigin);\n  addPerformanceNavigationTiming(transaction, entry, 'redirect', timeOrigin);\n  addPerformanceNavigationTiming(transaction, entry, 'domContentLoadedEvent', timeOrigin);\n  addPerformanceNavigationTiming(transaction, entry, 'loadEvent', timeOrigin);\n  addPerformanceNavigationTiming(transaction, entry, 'connect', timeOrigin);\n  addPerformanceNavigationTiming(transaction, entry, 'secureConnection', timeOrigin, 'connectEnd');\n  addPerformanceNavigationTiming(transaction, entry, 'fetch', timeOrigin, 'domainLookupStart');\n  addPerformanceNavigationTiming(transaction, entry, 'domainLookup', timeOrigin);\n  addRequest(transaction, entry, timeOrigin);\n}\n\n/** Create measure related spans */\nfunction addMeasureSpans(\n  transaction: Transaction,\n  entry: Record<string, any>,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): number {\n  const measureStartTimestamp = timeOrigin + startTime;\n  const measureEndTimestamp = measureStartTimestamp + duration;\n\n  _startChild(transaction, {\n    description: entry.name as string,\n    endTimestamp: measureEndTimestamp,\n    op: entry.entryType as string,\n    startTimestamp: measureStartTimestamp,\n  });\n\n  return measureStartTimestamp;\n}\n\nexport interface ResourceEntry extends Record<string, unknown> {\n  initiatorType?: string;\n  transferSize?: number;\n  encodedBodySize?: number;\n  decodedBodySize?: number;\n}\n\n/** Create resource-related spans */\nexport function addResourceSpans(\n  transaction: Transaction,\n  entry: ResourceEntry,\n  resourceName: string,\n  startTime: number,\n  duration: number,\n  timeOrigin: number,\n): number | undefined {\n  // we already instrument based on fetch and xhr, so we don't need to\n  // duplicate spans here.\n  if (entry.initiatorType === 'xmlhttprequest' || entry.initiatorType === 'fetch') {\n    return undefined;\n  }\n\n  const data: Record<string, any> = {};\n  if ('transferSize' in entry) {\n    data['Transfer Size'] = entry.transferSize;\n  }\n  if ('encodedBodySize' in entry) {\n    data['Encoded Body Size'] = entry.encodedBodySize;\n  }\n  if ('decodedBodySize' in entry) {\n    data['Decoded Body Size'] = entry.decodedBodySize;\n  }\n\n  const startTimestamp = timeOrigin + startTime;\n  const endTimestamp = startTimestamp + duration;\n\n  _startChild(transaction, {\n    description: resourceName,\n    endTimestamp,\n    op: entry.initiatorType ? `resource.${entry.initiatorType}` : 'resource',\n    startTimestamp,\n    data,\n  });\n\n  return endTimestamp;\n}\n\n/** Create performance navigation related spans */\nfunction addPerformanceNavigationTiming(\n  transaction: Transaction,\n  entry: Record<string, any>,\n  event: string,\n  timeOrigin: number,\n  eventEnd?: string,\n): void {\n  const end = eventEnd ? (entry[eventEnd] as number | undefined) : (entry[`${event}End`] as number | undefined);\n  const start = entry[`${event}Start`] as number | undefined;\n  if (!start || !end) {\n    return;\n  }\n  _startChild(transaction, {\n    op: 'browser',\n    description: event,\n    startTimestamp: timeOrigin + msToSec(start),\n    endTimestamp: timeOrigin + msToSec(end),\n  });\n}\n\n/** Create request and response related spans */\nfunction addRequest(transaction: Transaction, entry: Record<string, any>, timeOrigin: number): void {\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'request',\n    startTimestamp: timeOrigin + msToSec(entry.requestStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n\n  _startChild(transaction, {\n    op: 'browser',\n    description: 'response',\n    startTimestamp: timeOrigin + msToSec(entry.responseStart as number),\n    endTimestamp: timeOrigin + msToSec(entry.responseEnd as number),\n  });\n}\n\n/**\n * Helper function to start child on transactions. This function will make sure that the transaction will\n * use the start timestamp of the created child span if it is earlier than the transactions actual\n * start timestamp.\n */\nexport function _startChild(transaction: Transaction, { startTimestamp, ...ctx }: SpanContext): Span {\n  if (startTimestamp && transaction.startTimestamp > startTimestamp) {\n    transaction.startTimestamp = startTimestamp;\n  }\n\n  return transaction.startChild({\n    startTimestamp,\n    ...ctx,\n  });\n}\n\n/**\n * Checks if a given value is a valid measurement value.\n */\nfunction isMeasurementValue(value: any): boolean {\n  return typeof value === 'number' && isFinite(value);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}