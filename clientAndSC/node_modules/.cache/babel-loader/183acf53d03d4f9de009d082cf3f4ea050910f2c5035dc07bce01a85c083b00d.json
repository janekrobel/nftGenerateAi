{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.pbkdf2Async = exports.pbkdf2 = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst hmac_js_1 = require(\"./hmac.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash, _password, _salt, _opts) {\n  _assert_js_1.default.hash(hash);\n  const opts = (0, utils_js_1.checkOpts)({\n    dkLen: 32,\n    asyncTick: 10\n  }, _opts);\n  const {\n    c,\n    dkLen,\n    asyncTick\n  } = opts;\n  _assert_js_1.default.number(c);\n  _assert_js_1.default.number(dkLen);\n  _assert_js_1.default.number(asyncTick);\n  if (c < 1) throw new Error('PBKDF2: iterations (c) should be >= 1');\n  const password = (0, utils_js_1.toBytes)(_password);\n  const salt = (0, utils_js_1.toBytes)(_salt);\n  // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n  const DK = new Uint8Array(dkLen);\n  // U1 = PRF(Password, Salt + INT_32_BE(i))\n  const PRF = hmac_js_1.hmac.create(hash, password);\n  const PRFSalt = PRF._cloneInto().update(salt);\n  return {\n    c,\n    dkLen,\n    asyncTick,\n    DK,\n    PRF,\n    PRFSalt\n  };\n}\nfunction pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {\n  PRF.destroy();\n  PRFSalt.destroy();\n  if (prfW) prfW.destroy();\n  u.fill(0);\n  return DK;\n}\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nfunction pbkdf2(hash, password, salt, opts) {\n  const {\n    c,\n    dkLen,\n    DK,\n    PRF,\n    PRFSalt\n  } = pbkdf2Init(hash, password, salt, opts);\n  let prfW; // Working copy\n  const arr = new Uint8Array(4);\n  const view = (0, utils_js_1.createView)(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    for (let ui = 1; ui < c; ui++) {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    }\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexports.pbkdf2 = pbkdf2;\nasync function pbkdf2Async(hash, password, salt, opts) {\n  const {\n    c,\n    dkLen,\n    asyncTick,\n    DK,\n    PRF,\n    PRFSalt\n  } = pbkdf2Init(hash, password, salt, opts);\n  let prfW; // Working copy\n  const arr = new Uint8Array(4);\n  const view = (0, utils_js_1.createView)(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, i => {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    });\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\nexports.pbkdf2Async = pbkdf2Async;","map":{"version":3,"mappings":"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","names":["pbkdf2Init","hash","_password","_salt","_opts","_assert_js_1","opts","dkLen","asyncTick","c","number","Error","password","salt","DK","Uint8Array","PRF","hmac_js_1","create","PRFSalt","_cloneInto","update","pbkdf2Output","prfW","u","destroy","fill","pbkdf2","arr","view","outputLen","ti","pos","Ti","subarray","setInt32","digestInto","set","length","ui","i","exports","pbkdf2Async"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@noble/hashes/src/pbkdf2.ts"],"sourcesContent":["import assert from './_assert.js';\nimport { hmac } from './hmac.js';\nimport { Hash, CHash, Input, createView, toBytes, checkOpts, asyncLoop } from './utils.js';\n\n// PBKDF (RFC 2898)\nexport type Pbkdf2Opt = {\n  c: number; // Iterations\n  dkLen?: number; // Desired key length in bytes (Intended output length in octets of the derived key\n  asyncTick?: number; // Maximum time in ms for which async function can block execution\n};\n// Common prologue and epilogue for sync/async functions\nfunction pbkdf2Init(hash: CHash, _password: Input, _salt: Input, _opts: Pbkdf2Opt) {\n  assert.hash(hash);\n  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);\n  const { c, dkLen, asyncTick } = opts;\n  assert.number(c);\n  assert.number(dkLen);\n  assert.number(asyncTick);\n  if (c < 1) throw new Error('PBKDF2: iterations (c) should be >= 1');\n  const password = toBytes(_password);\n  const salt = toBytes(_salt);\n  // DK = PBKDF2(PRF, Password, Salt, c, dkLen);\n  const DK = new Uint8Array(dkLen);\n  // U1 = PRF(Password, Salt + INT_32_BE(i))\n  const PRF = hmac.create(hash, password);\n  const PRFSalt = PRF._cloneInto().update(salt);\n  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };\n}\n\nfunction pbkdf2Output<T extends Hash<T>>(\n  PRF: Hash<T>,\n  PRFSalt: Hash<T>,\n  DK: Uint8Array,\n  prfW: Hash<T>,\n  u: Uint8Array\n) {\n  PRF.destroy();\n  PRFSalt.destroy();\n  if (prfW) prfW.destroy();\n  u.fill(0);\n  return DK;\n}\n\n/**\n * PBKDF2-HMAC: RFC 2898 key derivation function\n * @param hash - hash function that would be used e.g. sha256\n * @param password - password from which a derived key is generated\n * @param salt - cryptographic salt\n * @param opts - {c, dkLen} where c is work factor and dkLen is output message size\n */\nexport function pbkdf2(hash: CHash, password: Input, salt: Input, opts: Pbkdf2Opt) {\n  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    for (let ui = 1; ui < c; ui++) {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    }\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n\nexport async function pbkdf2Async(hash: CHash, password: Input, salt: Input, opts: Pbkdf2Opt) {\n  const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);\n  let prfW: any; // Working copy\n  const arr = new Uint8Array(4);\n  const view = createView(arr);\n  const u = new Uint8Array(PRF.outputLen);\n  // DK = T1 + T2 + ⋯ + Tdklen/hlen\n  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {\n    // Ti = F(Password, Salt, c, i)\n    const Ti = DK.subarray(pos, pos + PRF.outputLen);\n    view.setInt32(0, ti, false);\n    // F(Password, Salt, c, i) = U1 ^ U2 ^ ⋯ ^ Uc\n    // U1 = PRF(Password, Salt + INT_32_BE(i))\n    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);\n    Ti.set(u.subarray(0, Ti.length));\n    await asyncLoop(c - 1, asyncTick, (i) => {\n      // Uc = PRF(Password, Uc−1)\n      PRF._cloneInto(prfW).update(u).digestInto(u);\n      for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];\n    });\n  }\n  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}