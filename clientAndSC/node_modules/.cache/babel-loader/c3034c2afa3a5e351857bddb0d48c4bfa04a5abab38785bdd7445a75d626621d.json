{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hmac = void 0;\nconst _assert_js_1 = require(\"./_assert.js\");\nconst utils_js_1 = require(\"./utils.js\");\n// HMAC (RFC 2104)\nclass HMAC extends utils_js_1.Hash {\n  constructor(hash, _key) {\n    super();\n    this.finished = false;\n    this.destroyed = false;\n    _assert_js_1.default.hash(hash);\n    const key = (0, utils_js_1.toBytes)(_key);\n    this.iHash = hash.create();\n    if (typeof this.iHash.update !== 'function') throw new TypeError('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create();\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf) {\n    _assert_js_1.default.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out) {\n    _assert_js_1.default.exists(this);\n    _assert_js_1.default.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to) {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to || (to = Object.create(Object.getPrototypeOf(this), {}));\n    const {\n      oHash,\n      iHash,\n      finished,\n      destroyed,\n      blockLen,\n      outputLen\n    } = this;\n    to = to;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nconst hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();\nexports.hmac = hmac;\nexports.hmac.create = (hash, key) => new HMAC(hash, key);","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AACA,MAAMA,IAAwB,SAAQC,eAAa;EAQjDC,YAAYC,IAAW,EAAEC,IAAW;IAClC,KAAK,EAAE;IAJD,aAAQ,GAAG,KAAK;IAChB,cAAS,GAAG,KAAK;IAIvBC,oBAAM,CAACF,IAAI,CAACA,IAAI,CAAC;IACjB,MAAMG,GAAG,GAAG,sBAAO,EAACF,IAAI,CAAC;IACzB,IAAI,CAACG,KAAK,GAAGJ,IAAI,CAACK,MAAM,EAAO;IAC/B,IAAI,OAAO,IAAI,CAACD,KAAK,CAACE,MAAM,KAAK,UAAU,EACzC,MAAM,IAAIC,SAAS,CAAC,qDAAqD,CAAC;IAC5E,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACJ,KAAK,CAACI,QAAQ;IACnC,IAAI,CAACC,SAAS,GAAG,IAAI,CAACL,KAAK,CAACK,SAAS;IACrC,MAAMD,QAAQ,GAAG,IAAI,CAACA,QAAQ;IAC9B,MAAME,GAAG,GAAG,IAAIC,UAAU,CAACH,QAAQ,CAAC;IACpC;IACAE,GAAG,CAACE,GAAG,CAACT,GAAG,CAACU,MAAM,GAAGL,QAAQ,GAAGR,IAAI,CAACK,MAAM,EAAE,CAACC,MAAM,CAACH,GAAG,CAAC,CAACW,MAAM,EAAE,GAAGX,GAAG,CAAC;IACzE,KAAK,IAAIY,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,GAAG,CAACG,MAAM,EAAEE,CAAC,EAAE,EAAEL,GAAG,CAACK,CAAC,CAAC,IAAI,IAAI;IACnD,IAAI,CAACX,KAAK,CAACE,MAAM,CAACI,GAAG,CAAC;IACtB;IACA,IAAI,CAACM,KAAK,GAAGhB,IAAI,CAACK,MAAM,EAAO;IAC/B;IACA,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,GAAG,CAACG,MAAM,EAAEE,CAAC,EAAE,EAAEL,GAAG,CAACK,CAAC,CAAC,IAAI,IAAI,GAAG,IAAI;IAC1D,IAAI,CAACC,KAAK,CAACV,MAAM,CAACI,GAAG,CAAC;IACtBA,GAAG,CAACO,IAAI,CAAC,CAAC,CAAC;EACb;EACAX,MAAM,CAACY,GAAU;IACfhB,oBAAM,CAACiB,MAAM,CAAC,IAAI,CAAC;IACnB,IAAI,CAACf,KAAK,CAACE,MAAM,CAACY,GAAG,CAAC;IACtB,OAAO,IAAI;EACb;EACAE,UAAU,CAACC,GAAe;IACxBnB,oBAAM,CAACiB,MAAM,CAAC,IAAI,CAAC;IACnBjB,oBAAM,CAACoB,KAAK,CAACD,GAAG,EAAE,IAAI,CAACZ,SAAS,CAAC;IACjC,IAAI,CAACc,QAAQ,GAAG,IAAI;IACpB,IAAI,CAACnB,KAAK,CAACgB,UAAU,CAACC,GAAG,CAAC;IAC1B,IAAI,CAACL,KAAK,CAACV,MAAM,CAACe,GAAG,CAAC;IACtB,IAAI,CAACL,KAAK,CAACI,UAAU,CAACC,GAAG,CAAC;IAC1B,IAAI,CAACG,OAAO,EAAE;EAChB;EACAV,MAAM;IACJ,MAAMO,GAAG,GAAG,IAAIV,UAAU,CAAC,IAAI,CAACK,KAAK,CAACP,SAAS,CAAC;IAChD,IAAI,CAACW,UAAU,CAACC,GAAG,CAAC;IACpB,OAAOA,GAAG;EACZ;EACAI,UAAU,CAACC,EAAY;IACrB;IACAA,EAAE,KAAFA,EAAE,GAAKC,MAAM,CAACtB,MAAM,CAACsB,MAAM,CAACC,cAAc,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC;IACrD,MAAM;MAAEZ,KAAK;MAAEZ,KAAK;MAAEmB,QAAQ;MAAEM,SAAS;MAAErB,QAAQ;MAAEC;IAAS,CAAE,GAAG,IAAI;IACvEiB,EAAE,GAAGA,EAAU;IACfA,EAAE,CAACH,QAAQ,GAAGA,QAAQ;IACtBG,EAAE,CAACG,SAAS,GAAGA,SAAS;IACxBH,EAAE,CAAClB,QAAQ,GAAGA,QAAQ;IACtBkB,EAAE,CAACjB,SAAS,GAAGA,SAAS;IACxBiB,EAAE,CAACV,KAAK,GAAGA,KAAK,CAACS,UAAU,CAACC,EAAE,CAACV,KAAK,CAAC;IACrCU,EAAE,CAACtB,KAAK,GAAGA,KAAK,CAACqB,UAAU,CAACC,EAAE,CAACtB,KAAK,CAAC;IACrC,OAAOsB,EAAE;EACX;EACAF,OAAO;IACL,IAAI,CAACK,SAAS,GAAG,IAAI;IACrB,IAAI,CAACb,KAAK,CAACQ,OAAO,EAAE;IACpB,IAAI,CAACpB,KAAK,CAACoB,OAAO,EAAE;EACtB;;AAGF;;;;;;AAMO,MAAMM,IAAI,GAAG,CAAC9B,IAAW,EAAEG,GAAU,EAAE4B,OAAc,KAC1D,IAAIlC,IAAI,CAAMG,IAAI,EAAEG,GAAG,CAAC,CAACG,MAAM,CAACyB,OAAO,CAAC,CAACjB,MAAM,EAAE;AADtCkB,YAAI;AAEjBA,YAAI,CAAC3B,MAAM,GAAG,CAACL,IAAW,EAAEG,GAAU,KAAK,IAAIN,IAAI,CAAMG,IAAI,EAAEG,GAAG,CAAC","names":["HMAC","utils_js_1","constructor","hash","_key","_assert_js_1","key","iHash","create","update","TypeError","blockLen","outputLen","pad","Uint8Array","set","length","digest","i","oHash","fill","buf","exists","digestInto","out","bytes","finished","destroy","_cloneInto","to","Object","getPrototypeOf","destroyed","hmac","message","exports"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@noble/hashes/src/hmac.ts"],"sourcesContent":["import assert from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nclass HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assert.hash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new TypeError('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assert.exists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assert.exists(this);\n    assert.bytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}