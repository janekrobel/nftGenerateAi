{"ast":null,"code":"/* globals AbortController */\n\n'use strict';\n\nconst {\n  extractBody,\n  mixinBody,\n  cloneBody\n} = require('./body');\nconst {\n  Headers,\n  fill: fillHeaders,\n  HeadersList\n} = require('./headers');\nconst {\n  FinalizationRegistry\n} = require('../compat/dispatcher-weakref')();\nconst util = require('../core/util');\nconst {\n  isValidHTTPToken,\n  sameOrigin,\n  normalizeMethod\n} = require('./util');\nconst {\n  forbiddenMethods,\n  corsSafeListedMethods,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache,\n  requestDuplex\n} = require('./constants');\nconst {\n  kEnumerableProperty\n} = util;\nconst {\n  kHeaders,\n  kSignal,\n  kState,\n  kGuard,\n  kRealm\n} = require('./symbols');\nconst {\n  webidl\n} = require('./webidl');\nconst {\n  getGlobalOrigin\n} = require('./global');\nconst {\n  URLSerializer\n} = require('./dataURL');\nconst {\n  kHeadersList\n} = require('../core/symbols');\nconst assert = require('assert');\nconst {\n  setMaxListeners,\n  getEventListeners,\n  defaultMaxListeners\n} = require('events');\nlet TransformStream = globalThis.TransformStream;\nconst kInit = Symbol('init');\nconst requestFinalizer = new FinalizationRegistry(_ref => {\n  let {\n    signal,\n    abort\n  } = _ref;\n  signal.removeEventListener('abort', abort);\n});\n\n// https://fetch.spec.whatwg.org/#request-class\nclass Request {\n  // https://fetch.spec.whatwg.org/#dom-request\n  constructor(input) {\n    let init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (input === kInit) {\n      return;\n    }\n    webidl.argumentLengthCheck(arguments, 1, {\n      header: 'Request constructor'\n    });\n    input = webidl.converters.RequestInfo(input);\n    init = webidl.converters.RequestInit(init);\n\n    // TODO\n    this[kRealm] = {\n      settingsObject: {\n        baseUrl: getGlobalOrigin()\n      }\n    };\n\n    // 1. Let request be null.\n    let request = null;\n\n    // 2. Let fallbackMode be null.\n    let fallbackMode = null;\n\n    // 3. Let baseURL be this’s relevant settings object’s API base URL.\n    const baseUrl = this[kRealm].settingsObject.baseUrl;\n\n    // 4. Let signal be null.\n    let signal = null;\n\n    // 5. If input is a string, then:\n    if (typeof input === 'string') {\n      // 1. Let parsedURL be the result of parsing input with baseURL.\n      // 2. If parsedURL is failure, then throw a TypeError.\n      let parsedURL;\n      try {\n        parsedURL = new URL(input, baseUrl);\n      } catch (err) {\n        throw new TypeError('Failed to parse URL from ' + input, {\n          cause: err\n        });\n      }\n\n      // 3. If parsedURL includes credentials, then throw a TypeError.\n      if (parsedURL.username || parsedURL.password) {\n        throw new TypeError('Request cannot be constructed from a URL that includes credentials: ' + input);\n      }\n\n      // 4. Set request to a new request whose URL is parsedURL.\n      request = makeRequest({\n        urlList: [parsedURL]\n      });\n\n      // 5. Set fallbackMode to \"cors\".\n      fallbackMode = 'cors';\n    } else {\n      // 6. Otherwise:\n\n      // 7. Assert: input is a Request object.\n      assert(input instanceof Request);\n\n      // 8. Set request to input’s request.\n      request = input[kState];\n\n      // 9. Set signal to input’s signal.\n      signal = input[kSignal];\n    }\n\n    // 7. Let origin be this’s relevant settings object’s origin.\n    const origin = this[kRealm].settingsObject.origin;\n\n    // 8. Let window be \"client\".\n    let window = 'client';\n\n    // 9. If request’s window is an environment settings object and its origin\n    // is same origin with origin, then set window to request’s window.\n    if (request.window?.constructor?.name === 'EnvironmentSettingsObject' && sameOrigin(request.window, origin)) {\n      window = request.window;\n    }\n\n    // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n    if (init.window !== undefined && init.window != null) {\n      throw new TypeError(`'window' option '${window}' must be null`);\n    }\n\n    // 11. If init[\"window\"] exists, then set window to \"no-window\".\n    if (init.window !== undefined) {\n      window = 'no-window';\n    }\n\n    // 12. Set request to a new request with the following properties:\n    request = makeRequest({\n      // URL request’s URL.\n      // undici implementation note: this is set as the first item in request's urlList in makeRequest\n      // method request’s method.\n      method: request.method,\n      // header list A copy of request’s header list.\n      // undici implementation note: headersList is cloned in makeRequest\n      headersList: request.headersList,\n      // unsafe-request flag Set.\n      unsafeRequest: request.unsafeRequest,\n      // client This’s relevant settings object.\n      client: this[kRealm].settingsObject,\n      // window window.\n      window,\n      // priority request’s priority.\n      priority: request.priority,\n      // origin request’s origin. The propagation of the origin is only significant for navigation requests\n      // being handled by a service worker. In this scenario a request can have an origin that is different\n      // from the current client.\n      origin: request.origin,\n      // referrer request’s referrer.\n      referrer: request.referrer,\n      // referrer policy request’s referrer policy.\n      referrerPolicy: request.referrerPolicy,\n      // mode request’s mode.\n      mode: request.mode,\n      // credentials mode request’s credentials mode.\n      credentials: request.credentials,\n      // cache mode request’s cache mode.\n      cache: request.cache,\n      // redirect mode request’s redirect mode.\n      redirect: request.redirect,\n      // integrity metadata request’s integrity metadata.\n      integrity: request.integrity,\n      // keepalive request’s keepalive.\n      keepalive: request.keepalive,\n      // reload-navigation flag request’s reload-navigation flag.\n      reloadNavigation: request.reloadNavigation,\n      // history-navigation flag request’s history-navigation flag.\n      historyNavigation: request.historyNavigation,\n      // URL list A clone of request’s URL list.\n      urlList: [...request.urlList]\n    });\n\n    // 13. If init is not empty, then:\n    if (Object.keys(init).length > 0) {\n      // 1. If request’s mode is \"navigate\", then set it to \"same-origin\".\n      if (request.mode === 'navigate') {\n        request.mode = 'same-origin';\n      }\n\n      // 2. Unset request’s reload-navigation flag.\n      request.reloadNavigation = false;\n\n      // 3. Unset request’s history-navigation flag.\n      request.historyNavigation = false;\n\n      // 4. Set request’s origin to \"client\".\n      request.origin = 'client';\n\n      // 5. Set request’s referrer to \"client\"\n      request.referrer = 'client';\n\n      // 6. Set request’s referrer policy to the empty string.\n      request.referrerPolicy = '';\n\n      // 7. Set request’s URL to request’s current URL.\n      request.url = request.urlList[request.urlList.length - 1];\n\n      // 8. Set request’s URL list to « request’s URL ».\n      request.urlList = [request.url];\n    }\n\n    // 14. If init[\"referrer\"] exists, then:\n    if (init.referrer !== undefined) {\n      // 1. Let referrer be init[\"referrer\"].\n      const referrer = init.referrer;\n\n      // 2. If referrer is the empty string, then set request’s referrer to \"no-referrer\".\n      if (referrer === '') {\n        request.referrer = 'no-referrer';\n      } else {\n        // 1. Let parsedReferrer be the result of parsing referrer with\n        // baseURL.\n        // 2. If parsedReferrer is failure, then throw a TypeError.\n        let parsedReferrer;\n        try {\n          parsedReferrer = new URL(referrer, baseUrl);\n        } catch (err) {\n          throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, {\n            cause: err\n          });\n        }\n\n        // 3. If one of the following is true\n        // parsedReferrer’s cannot-be-a-base-URL is true, scheme is \"about\",\n        // and path contains a single string \"client\"\n        // parsedReferrer’s origin is not same origin with origin\n        // then set request’s referrer to \"client\".\n        // TODO\n\n        // 4. Otherwise, set request’s referrer to parsedReferrer.\n        request.referrer = parsedReferrer;\n      }\n    }\n\n    // 15. If init[\"referrerPolicy\"] exists, then set request’s referrer policy\n    // to it.\n    if (init.referrerPolicy !== undefined) {\n      request.referrerPolicy = init.referrerPolicy;\n    }\n\n    // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n    let mode;\n    if (init.mode !== undefined) {\n      mode = init.mode;\n    } else {\n      mode = fallbackMode;\n    }\n\n    // 17. If mode is \"navigate\", then throw a TypeError.\n    if (mode === 'navigate') {\n      throw webidl.errors.exception({\n        header: 'Request constructor',\n        message: 'invalid request mode navigate.'\n      });\n    }\n\n    // 18. If mode is non-null, set request’s mode to mode.\n    if (mode != null) {\n      request.mode = mode;\n    }\n\n    // 19. If init[\"credentials\"] exists, then set request’s credentials mode\n    // to it.\n    if (init.credentials !== undefined) {\n      request.credentials = init.credentials;\n    }\n\n    // 18. If init[\"cache\"] exists, then set request’s cache mode to it.\n    if (init.cache !== undefined) {\n      request.cache = init.cache;\n    }\n\n    // 21. If request’s cache mode is \"only-if-cached\" and request’s mode is\n    // not \"same-origin\", then throw a TypeError.\n    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {\n      throw new TypeError(\"'only-if-cached' can be set only with 'same-origin' mode\");\n    }\n\n    // 22. If init[\"redirect\"] exists, then set request’s redirect mode to it.\n    if (init.redirect !== undefined) {\n      request.redirect = init.redirect;\n    }\n\n    // 23. If init[\"integrity\"] exists, then set request’s integrity metadata to it.\n    if (init.integrity !== undefined && init.integrity != null) {\n      request.integrity = String(init.integrity);\n    }\n\n    // 24. If init[\"keepalive\"] exists, then set request’s keepalive to it.\n    if (init.keepalive !== undefined) {\n      request.keepalive = Boolean(init.keepalive);\n    }\n\n    // 25. If init[\"method\"] exists, then:\n    if (init.method !== undefined) {\n      // 1. Let method be init[\"method\"].\n      let method = init.method;\n\n      // 2. If method is not a method or method is a forbidden method, then\n      // throw a TypeError.\n      if (!isValidHTTPToken(init.method)) {\n        throw TypeError(`'${init.method}' is not a valid HTTP method.`);\n      }\n      if (forbiddenMethods.indexOf(method.toUpperCase()) !== -1) {\n        throw TypeError(`'${init.method}' HTTP method is unsupported.`);\n      }\n\n      // 3. Normalize method.\n      method = normalizeMethod(init.method);\n\n      // 4. Set request’s method to method.\n      request.method = method;\n    }\n\n    // 26. If init[\"signal\"] exists, then set signal to it.\n    if (init.signal !== undefined) {\n      signal = init.signal;\n    }\n\n    // 27. Set this’s request to request.\n    this[kState] = request;\n\n    // 28. Set this’s signal to a new AbortSignal object with this’s relevant\n    // Realm.\n    const ac = new AbortController();\n    this[kSignal] = ac.signal;\n    this[kSignal][kRealm] = this[kRealm];\n\n    // 29. If signal is not null, then make this’s signal follow signal.\n    if (signal != null) {\n      if (!signal || typeof signal.aborted !== 'boolean' || typeof signal.addEventListener !== 'function') {\n        throw new TypeError(\"Failed to construct 'Request': member signal is not of type AbortSignal.\");\n      }\n      if (signal.aborted) {\n        ac.abort(signal.reason);\n      } else {\n        const acRef = new WeakRef(ac);\n        const abort = function () {\n          acRef.deref()?.abort(this.reason);\n        };\n        if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {\n          setMaxListeners(100, signal);\n        }\n        signal.addEventListener('abort', abort, {\n          once: true\n        });\n        requestFinalizer.register(this, {\n          signal,\n          abort\n        });\n      }\n    }\n\n    // 30. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is request’s header list and guard is\n    // \"request\".\n    this[kHeaders] = new Headers();\n    this[kHeaders][kHeadersList] = request.headersList;\n    this[kHeaders][kGuard] = 'request';\n    this[kHeaders][kRealm] = this[kRealm];\n\n    // 31. If this’s request’s mode is \"no-cors\", then:\n    if (mode === 'no-cors') {\n      // 1. If this’s request’s method is not a CORS-safelisted method,\n      // then throw a TypeError.\n      if (!corsSafeListedMethods.includes(request.method)) {\n        throw new TypeError(`'${request.method} is unsupported in no-cors mode.`);\n      }\n\n      // 2. Set this’s headers’s guard to \"request-no-cors\".\n      this[kHeaders][kGuard] = 'request-no-cors';\n    }\n\n    // 32. If init is not empty, then:\n    if (Object.keys(init).length !== 0) {\n      // 1. Let headers be a copy of this’s headers and its associated header\n      // list.\n      let headers = new Headers(this[kHeaders]);\n\n      // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n      if (init.headers !== undefined) {\n        headers = init.headers;\n      }\n\n      // 3. Empty this’s headers’s header list.\n      this[kHeaders][kHeadersList].clear();\n\n      // 4. If headers is a Headers object, then for each header in its header\n      // list, append header’s name/header’s value to this’s headers.\n      if (headers.constructor.name === 'Headers') {\n        for (const [key, val] of headers) {\n          this[kHeaders].append(key, val);\n        }\n      } else {\n        // 5. Otherwise, fill this’s headers with headers.\n        fillHeaders(this[kHeaders], headers);\n      }\n    }\n\n    // 33. Let inputBody be input’s request’s body if input is a Request\n    // object; otherwise null.\n    const inputBody = input instanceof Request ? input[kState].body : null;\n\n    // 34. If either init[\"body\"] exists and is non-null or inputBody is\n    // non-null, and request’s method is `GET` or `HEAD`, then throw a\n    // TypeError.\n    if ((init.body !== undefined && init.body != null || inputBody != null) && (request.method === 'GET' || request.method === 'HEAD')) {\n      throw new TypeError('Request with GET/HEAD method cannot have body.');\n    }\n\n    // 35. Let initBody be null.\n    let initBody = null;\n\n    // 36. If init[\"body\"] exists and is non-null, then:\n    if (init.body !== undefined && init.body != null) {\n      // 1. Let Content-Type be null.\n      // 2. Set initBody and Content-Type to the result of extracting\n      // init[\"body\"], with keepalive set to request’s keepalive.\n      const [extractedBody, contentType] = extractBody(init.body, request.keepalive);\n      initBody = extractedBody;\n\n      // 3, If Content-Type is non-null and this’s headers’s header list does\n      // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n      // this’s headers.\n      if (contentType && !this[kHeaders][kHeadersList].contains('content-type')) {\n        this[kHeaders].append('content-type', contentType);\n      }\n    }\n\n    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n    // inputBody.\n    const inputOrInitBody = initBody ?? inputBody;\n\n    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is\n    // null, then:\n    if (inputOrInitBody != null && inputOrInitBody.source == null) {\n      // 1. If initBody is non-null and init[\"duplex\"] does not exist,\n      //    then throw a TypeError.\n      if (initBody != null && init.duplex == null) {\n        throw new TypeError('RequestInit: duplex option is required when sending a body.');\n      }\n\n      // 2. If this’s request’s mode is neither \"same-origin\" nor \"cors\",\n      // then throw a TypeError.\n      if (request.mode !== 'same-origin' && request.mode !== 'cors') {\n        throw new TypeError('If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"');\n      }\n\n      // 3. Set this’s request’s use-CORS-preflight flag.\n      request.useCORSPreflightFlag = true;\n    }\n\n    // 39. Let finalBody be inputOrInitBody.\n    let finalBody = inputOrInitBody;\n\n    // 40. If initBody is null and inputBody is non-null, then:\n    if (initBody == null && inputBody != null) {\n      // 1. If input is unusable, then throw a TypeError.\n      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {\n        throw new TypeError('Cannot construct a Request with a Request object that has already been used.');\n      }\n\n      // 2. Set finalBody to the result of creating a proxy for inputBody.\n      if (!TransformStream) {\n        TransformStream = require('stream/web').TransformStream;\n      }\n\n      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n      const identityTransform = new TransformStream();\n      inputBody.stream.pipeThrough(identityTransform);\n      finalBody = {\n        source: inputBody.source,\n        length: inputBody.length,\n        stream: identityTransform.readable\n      };\n    }\n\n    // 41. Set this’s request’s body to finalBody.\n    this[kState].body = finalBody;\n  }\n\n  // Returns request’s HTTP method, which is \"GET\" by default.\n  get method() {\n    webidl.brandCheck(this, Request);\n\n    // The method getter steps are to return this’s request’s method.\n    return this[kState].method;\n  }\n\n  // Returns the URL of request as a string.\n  get url() {\n    webidl.brandCheck(this, Request);\n\n    // The url getter steps are to return this’s request’s URL, serialized.\n    return URLSerializer(this[kState].url);\n  }\n\n  // Returns a Headers object consisting of the headers associated with request.\n  // Note that headers added in the network layer by the user agent will not\n  // be accounted for in this object, e.g., the \"Host\" header.\n  get headers() {\n    webidl.brandCheck(this, Request);\n\n    // The headers getter steps are to return this’s headers.\n    return this[kHeaders];\n  }\n\n  // Returns the kind of resource requested by request, e.g., \"document\"\n  // or \"script\".\n  get destination() {\n    webidl.brandCheck(this, Request);\n\n    // The destination getter are to return this’s request’s destination.\n    return this[kState].destination;\n  }\n\n  // Returns the referrer of request. Its value can be a same-origin URL if\n  // explicitly set in init, the empty string to indicate no referrer, and\n  // \"about:client\" when defaulting to the global’s default. This is used\n  // during fetching to determine the value of the `Referer` header of the\n  // request being made.\n  get referrer() {\n    webidl.brandCheck(this, Request);\n\n    // 1. If this’s request’s referrer is \"no-referrer\", then return the\n    // empty string.\n    if (this[kState].referrer === 'no-referrer') {\n      return '';\n    }\n\n    // 2. If this’s request’s referrer is \"client\", then return\n    // \"about:client\".\n    if (this[kState].referrer === 'client') {\n      return 'about:client';\n    }\n\n    // Return this’s request’s referrer, serialized.\n    return this[kState].referrer.toString();\n  }\n\n  // Returns the referrer policy associated with request.\n  // This is used during fetching to compute the value of the request’s\n  // referrer.\n  get referrerPolicy() {\n    webidl.brandCheck(this, Request);\n\n    // The referrerPolicy getter steps are to return this’s request’s referrer policy.\n    return this[kState].referrerPolicy;\n  }\n\n  // Returns the mode associated with request, which is a string indicating\n  // whether the request will use CORS, or will be restricted to same-origin\n  // URLs.\n  get mode() {\n    webidl.brandCheck(this, Request);\n\n    // The mode getter steps are to return this’s request’s mode.\n    return this[kState].mode;\n  }\n\n  // Returns the credentials mode associated with request,\n  // which is a string indicating whether credentials will be sent with the\n  // request always, never, or only when sent to a same-origin URL.\n  get credentials() {\n    // The credentials getter steps are to return this’s request’s credentials mode.\n    return this[kState].credentials;\n  }\n\n  // Returns the cache mode associated with request,\n  // which is a string indicating how the request will\n  // interact with the browser’s cache when fetching.\n  get cache() {\n    webidl.brandCheck(this, Request);\n\n    // The cache getter steps are to return this’s request’s cache mode.\n    return this[kState].cache;\n  }\n\n  // Returns the redirect mode associated with request,\n  // which is a string indicating how redirects for the\n  // request will be handled during fetching. A request\n  // will follow redirects by default.\n  get redirect() {\n    webidl.brandCheck(this, Request);\n\n    // The redirect getter steps are to return this’s request’s redirect mode.\n    return this[kState].redirect;\n  }\n\n  // Returns request’s subresource integrity metadata, which is a\n  // cryptographic hash of the resource being fetched. Its value\n  // consists of multiple hashes separated by whitespace. [SRI]\n  get integrity() {\n    webidl.brandCheck(this, Request);\n\n    // The integrity getter steps are to return this’s request’s integrity\n    // metadata.\n    return this[kState].integrity;\n  }\n\n  // Returns a boolean indicating whether or not request can outlive the\n  // global in which it was created.\n  get keepalive() {\n    webidl.brandCheck(this, Request);\n\n    // The keepalive getter steps are to return this’s request’s keepalive.\n    return this[kState].keepalive;\n  }\n\n  // Returns a boolean indicating whether or not request is for a reload\n  // navigation.\n  get isReloadNavigation() {\n    webidl.brandCheck(this, Request);\n\n    // The isReloadNavigation getter steps are to return true if this’s\n    // request’s reload-navigation flag is set; otherwise false.\n    return this[kState].reloadNavigation;\n  }\n\n  // Returns a boolean indicating whether or not request is for a history\n  // navigation (a.k.a. back-foward navigation).\n  get isHistoryNavigation() {\n    webidl.brandCheck(this, Request);\n\n    // The isHistoryNavigation getter steps are to return true if this’s request’s\n    // history-navigation flag is set; otherwise false.\n    return this[kState].historyNavigation;\n  }\n\n  // Returns the signal associated with request, which is an AbortSignal\n  // object indicating whether or not request has been aborted, and its\n  // abort event handler.\n  get signal() {\n    webidl.brandCheck(this, Request);\n\n    // The signal getter steps are to return this’s signal.\n    return this[kSignal];\n  }\n  get body() {\n    webidl.brandCheck(this, Request);\n    return this[kState].body ? this[kState].body.stream : null;\n  }\n  get bodyUsed() {\n    webidl.brandCheck(this, Request);\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream);\n  }\n  get duplex() {\n    webidl.brandCheck(this, Request);\n    return 'half';\n  }\n\n  // Returns a clone of request.\n  clone() {\n    webidl.brandCheck(this, Request);\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (this.bodyUsed || this.body?.locked) {\n      throw new TypeError('unusable');\n    }\n\n    // 2. Let clonedRequest be the result of cloning this’s request.\n    const clonedRequest = cloneRequest(this[kState]);\n\n    // 3. Let clonedRequestObject be the result of creating a Request object,\n    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.\n    const clonedRequestObject = new Request(kInit);\n    clonedRequestObject[kState] = clonedRequest;\n    clonedRequestObject[kRealm] = this[kRealm];\n    clonedRequestObject[kHeaders] = new Headers();\n    clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList;\n    clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard];\n    clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm];\n\n    // 4. Make clonedRequestObject’s signal follow this’s signal.\n    const ac = new AbortController();\n    if (this.signal.aborted) {\n      ac.abort(this.signal.reason);\n    } else {\n      this.signal.addEventListener('abort', () => {\n        ac.abort(this.signal.reason);\n      }, {\n        once: true\n      });\n    }\n    clonedRequestObject[kSignal] = ac.signal;\n\n    // 4. Return clonedRequestObject.\n    return clonedRequestObject;\n  }\n}\nmixinBody(Request);\nfunction makeRequest(init) {\n  // https://fetch.spec.whatwg.org/#requests\n  const request = {\n    method: 'GET',\n    localURLsOnly: false,\n    unsafeRequest: false,\n    body: null,\n    client: null,\n    reservedClient: null,\n    replacesClientId: '',\n    window: 'client',\n    keepalive: false,\n    serviceWorkers: 'all',\n    initiator: '',\n    destination: '',\n    priority: null,\n    origin: 'client',\n    policyContainer: 'client',\n    referrer: 'client',\n    referrerPolicy: '',\n    mode: 'no-cors',\n    useCORSPreflightFlag: false,\n    credentials: 'same-origin',\n    useCredentials: false,\n    cache: 'default',\n    redirect: 'follow',\n    integrity: '',\n    cryptoGraphicsNonceMetadata: '',\n    parserMetadata: '',\n    reloadNavigation: false,\n    historyNavigation: false,\n    userActivation: false,\n    taintedOrigin: false,\n    redirectCount: 0,\n    responseTainting: 'basic',\n    preventNoCacheCacheControlHeaderModification: false,\n    done: false,\n    timingAllowFailed: false,\n    ...init,\n    headersList: init.headersList ? new HeadersList(init.headersList) : new HeadersList()\n  };\n  request.url = request.urlList[0];\n  return request;\n}\n\n// https://fetch.spec.whatwg.org/#concept-request-clone\nfunction cloneRequest(request) {\n  // To clone a request request, run these steps:\n\n  // 1. Let newRequest be a copy of request, except for its body.\n  const newRequest = makeRequest({\n    ...request,\n    body: null\n  });\n\n  // 2. If request’s body is non-null, set newRequest’s body to the\n  // result of cloning request’s body.\n  if (request.body != null) {\n    newRequest.body = cloneBody(request.body);\n  }\n\n  // 3. Return newRequest.\n  return newRequest;\n}\nObject.defineProperties(Request.prototype, {\n  method: kEnumerableProperty,\n  url: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  signal: kEnumerableProperty,\n  duplex: kEnumerableProperty,\n  destination: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  isHistoryNavigation: kEnumerableProperty,\n  isReloadNavigation: kEnumerableProperty,\n  keepalive: kEnumerableProperty,\n  integrity: kEnumerableProperty,\n  cache: kEnumerableProperty,\n  credentials: kEnumerableProperty,\n  attribute: kEnumerableProperty,\n  referrerPolicy: kEnumerableProperty,\n  referrer: kEnumerableProperty,\n  mode: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Request',\n    configurable: true\n  }\n});\nwebidl.converters.Request = webidl.interfaceConverter(Request);\n\n// https://fetch.spec.whatwg.org/#requestinfo\nwebidl.converters.RequestInfo = function (V) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V);\n  }\n  if (V instanceof Request) {\n    return webidl.converters.Request(V);\n  }\n  return webidl.converters.USVString(V);\n};\nwebidl.converters.AbortSignal = webidl.interfaceConverter(AbortSignal);\n\n// https://fetch.spec.whatwg.org/#requestinit\nwebidl.converters.RequestInit = webidl.dictionaryConverter([{\n  key: 'method',\n  converter: webidl.converters.ByteString\n}, {\n  key: 'headers',\n  converter: webidl.converters.HeadersInit\n}, {\n  key: 'body',\n  converter: webidl.nullableConverter(webidl.converters.BodyInit)\n}, {\n  key: 'referrer',\n  converter: webidl.converters.USVString\n}, {\n  key: 'referrerPolicy',\n  converter: webidl.converters.DOMString,\n  // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n  allowedValues: referrerPolicy\n}, {\n  key: 'mode',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#concept-request-mode\n  allowedValues: requestMode\n}, {\n  key: 'credentials',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestcredentials\n  allowedValues: requestCredentials\n}, {\n  key: 'cache',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestcache\n  allowedValues: requestCache\n}, {\n  key: 'redirect',\n  converter: webidl.converters.DOMString,\n  // https://fetch.spec.whatwg.org/#requestredirect\n  allowedValues: requestRedirect\n}, {\n  key: 'integrity',\n  converter: webidl.converters.DOMString\n}, {\n  key: 'keepalive',\n  converter: webidl.converters.boolean\n}, {\n  key: 'signal',\n  converter: webidl.nullableConverter(signal => webidl.converters.AbortSignal(signal, {\n    strict: false\n  }))\n}, {\n  key: 'window',\n  converter: webidl.converters.any\n}, {\n  key: 'duplex',\n  converter: webidl.converters.DOMString,\n  allowedValues: requestDuplex\n}]);\nmodule.exports = {\n  Request,\n  makeRequest\n};","map":{"version":3,"names":["extractBody","mixinBody","cloneBody","require","Headers","fill","fillHeaders","HeadersList","FinalizationRegistry","util","isValidHTTPToken","sameOrigin","normalizeMethod","forbiddenMethods","corsSafeListedMethods","referrerPolicy","requestRedirect","requestMode","requestCredentials","requestCache","requestDuplex","kEnumerableProperty","kHeaders","kSignal","kState","kGuard","kRealm","webidl","getGlobalOrigin","URLSerializer","kHeadersList","assert","setMaxListeners","getEventListeners","defaultMaxListeners","TransformStream","globalThis","kInit","Symbol","requestFinalizer","signal","abort","removeEventListener","Request","constructor","input","init","argumentLengthCheck","arguments","header","converters","RequestInfo","RequestInit","settingsObject","baseUrl","request","fallbackMode","parsedURL","URL","err","TypeError","cause","username","password","makeRequest","urlList","origin","window","name","undefined","method","headersList","unsafeRequest","client","priority","referrer","mode","credentials","cache","redirect","integrity","keepalive","reloadNavigation","historyNavigation","Object","keys","length","url","parsedReferrer","errors","exception","message","String","Boolean","indexOf","toUpperCase","ac","AbortController","aborted","addEventListener","reason","acRef","WeakRef","deref","once","register","includes","headers","clear","key","val","append","inputBody","body","initBody","extractedBody","contentType","contains","inputOrInitBody","source","duplex","useCORSPreflightFlag","finalBody","isDisturbed","stream","locked","identityTransform","pipeThrough","readable","brandCheck","destination","toString","isReloadNavigation","isHistoryNavigation","bodyUsed","clone","clonedRequest","cloneRequest","clonedRequestObject","localURLsOnly","reservedClient","replacesClientId","serviceWorkers","initiator","policyContainer","useCredentials","cryptoGraphicsNonceMetadata","parserMetadata","userActivation","taintedOrigin","redirectCount","responseTainting","preventNoCacheCacheControlHeaderModification","done","timingAllowFailed","newRequest","defineProperties","prototype","attribute","toStringTag","value","configurable","interfaceConverter","V","USVString","AbortSignal","dictionaryConverter","converter","ByteString","HeadersInit","nullableConverter","BodyInit","DOMString","allowedValues","boolean","strict","any","module","exports"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/undici/lib/fetch/request.js"],"sourcesContent":["/* globals AbortController */\n\n'use strict'\n\nconst { extractBody, mixinBody, cloneBody } = require('./body')\nconst { Headers, fill: fillHeaders, HeadersList } = require('./headers')\nconst { FinalizationRegistry } = require('../compat/dispatcher-weakref')()\nconst util = require('../core/util')\nconst {\n  isValidHTTPToken,\n  sameOrigin,\n  normalizeMethod\n} = require('./util')\nconst {\n  forbiddenMethods,\n  corsSafeListedMethods,\n  referrerPolicy,\n  requestRedirect,\n  requestMode,\n  requestCredentials,\n  requestCache,\n  requestDuplex\n} = require('./constants')\nconst { kEnumerableProperty } = util\nconst { kHeaders, kSignal, kState, kGuard, kRealm } = require('./symbols')\nconst { webidl } = require('./webidl')\nconst { getGlobalOrigin } = require('./global')\nconst { URLSerializer } = require('./dataURL')\nconst { kHeadersList } = require('../core/symbols')\nconst assert = require('assert')\nconst { setMaxListeners, getEventListeners, defaultMaxListeners } = require('events')\n\nlet TransformStream = globalThis.TransformStream\n\nconst kInit = Symbol('init')\n\nconst requestFinalizer = new FinalizationRegistry(({ signal, abort }) => {\n  signal.removeEventListener('abort', abort)\n})\n\n// https://fetch.spec.whatwg.org/#request-class\nclass Request {\n  // https://fetch.spec.whatwg.org/#dom-request\n  constructor (input, init = {}) {\n    if (input === kInit) {\n      return\n    }\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Request constructor' })\n\n    input = webidl.converters.RequestInfo(input)\n    init = webidl.converters.RequestInit(init)\n\n    // TODO\n    this[kRealm] = {\n      settingsObject: {\n        baseUrl: getGlobalOrigin()\n      }\n    }\n\n    // 1. Let request be null.\n    let request = null\n\n    // 2. Let fallbackMode be null.\n    let fallbackMode = null\n\n    // 3. Let baseURL be this’s relevant settings object’s API base URL.\n    const baseUrl = this[kRealm].settingsObject.baseUrl\n\n    // 4. Let signal be null.\n    let signal = null\n\n    // 5. If input is a string, then:\n    if (typeof input === 'string') {\n      // 1. Let parsedURL be the result of parsing input with baseURL.\n      // 2. If parsedURL is failure, then throw a TypeError.\n      let parsedURL\n      try {\n        parsedURL = new URL(input, baseUrl)\n      } catch (err) {\n        throw new TypeError('Failed to parse URL from ' + input, { cause: err })\n      }\n\n      // 3. If parsedURL includes credentials, then throw a TypeError.\n      if (parsedURL.username || parsedURL.password) {\n        throw new TypeError(\n          'Request cannot be constructed from a URL that includes credentials: ' +\n            input\n        )\n      }\n\n      // 4. Set request to a new request whose URL is parsedURL.\n      request = makeRequest({ urlList: [parsedURL] })\n\n      // 5. Set fallbackMode to \"cors\".\n      fallbackMode = 'cors'\n    } else {\n      // 6. Otherwise:\n\n      // 7. Assert: input is a Request object.\n      assert(input instanceof Request)\n\n      // 8. Set request to input’s request.\n      request = input[kState]\n\n      // 9. Set signal to input’s signal.\n      signal = input[kSignal]\n    }\n\n    // 7. Let origin be this’s relevant settings object’s origin.\n    const origin = this[kRealm].settingsObject.origin\n\n    // 8. Let window be \"client\".\n    let window = 'client'\n\n    // 9. If request’s window is an environment settings object and its origin\n    // is same origin with origin, then set window to request’s window.\n    if (\n      request.window?.constructor?.name === 'EnvironmentSettingsObject' &&\n      sameOrigin(request.window, origin)\n    ) {\n      window = request.window\n    }\n\n    // 10. If init[\"window\"] exists and is non-null, then throw a TypeError.\n    if (init.window !== undefined && init.window != null) {\n      throw new TypeError(`'window' option '${window}' must be null`)\n    }\n\n    // 11. If init[\"window\"] exists, then set window to \"no-window\".\n    if (init.window !== undefined) {\n      window = 'no-window'\n    }\n\n    // 12. Set request to a new request with the following properties:\n    request = makeRequest({\n      // URL request’s URL.\n      // undici implementation note: this is set as the first item in request's urlList in makeRequest\n      // method request’s method.\n      method: request.method,\n      // header list A copy of request’s header list.\n      // undici implementation note: headersList is cloned in makeRequest\n      headersList: request.headersList,\n      // unsafe-request flag Set.\n      unsafeRequest: request.unsafeRequest,\n      // client This’s relevant settings object.\n      client: this[kRealm].settingsObject,\n      // window window.\n      window,\n      // priority request’s priority.\n      priority: request.priority,\n      // origin request’s origin. The propagation of the origin is only significant for navigation requests\n      // being handled by a service worker. In this scenario a request can have an origin that is different\n      // from the current client.\n      origin: request.origin,\n      // referrer request’s referrer.\n      referrer: request.referrer,\n      // referrer policy request’s referrer policy.\n      referrerPolicy: request.referrerPolicy,\n      // mode request’s mode.\n      mode: request.mode,\n      // credentials mode request’s credentials mode.\n      credentials: request.credentials,\n      // cache mode request’s cache mode.\n      cache: request.cache,\n      // redirect mode request’s redirect mode.\n      redirect: request.redirect,\n      // integrity metadata request’s integrity metadata.\n      integrity: request.integrity,\n      // keepalive request’s keepalive.\n      keepalive: request.keepalive,\n      // reload-navigation flag request’s reload-navigation flag.\n      reloadNavigation: request.reloadNavigation,\n      // history-navigation flag request’s history-navigation flag.\n      historyNavigation: request.historyNavigation,\n      // URL list A clone of request’s URL list.\n      urlList: [...request.urlList]\n    })\n\n    // 13. If init is not empty, then:\n    if (Object.keys(init).length > 0) {\n      // 1. If request’s mode is \"navigate\", then set it to \"same-origin\".\n      if (request.mode === 'navigate') {\n        request.mode = 'same-origin'\n      }\n\n      // 2. Unset request’s reload-navigation flag.\n      request.reloadNavigation = false\n\n      // 3. Unset request’s history-navigation flag.\n      request.historyNavigation = false\n\n      // 4. Set request’s origin to \"client\".\n      request.origin = 'client'\n\n      // 5. Set request’s referrer to \"client\"\n      request.referrer = 'client'\n\n      // 6. Set request’s referrer policy to the empty string.\n      request.referrerPolicy = ''\n\n      // 7. Set request’s URL to request’s current URL.\n      request.url = request.urlList[request.urlList.length - 1]\n\n      // 8. Set request’s URL list to « request’s URL ».\n      request.urlList = [request.url]\n    }\n\n    // 14. If init[\"referrer\"] exists, then:\n    if (init.referrer !== undefined) {\n      // 1. Let referrer be init[\"referrer\"].\n      const referrer = init.referrer\n\n      // 2. If referrer is the empty string, then set request’s referrer to \"no-referrer\".\n      if (referrer === '') {\n        request.referrer = 'no-referrer'\n      } else {\n        // 1. Let parsedReferrer be the result of parsing referrer with\n        // baseURL.\n        // 2. If parsedReferrer is failure, then throw a TypeError.\n        let parsedReferrer\n        try {\n          parsedReferrer = new URL(referrer, baseUrl)\n        } catch (err) {\n          throw new TypeError(`Referrer \"${referrer}\" is not a valid URL.`, { cause: err })\n        }\n\n        // 3. If one of the following is true\n        // parsedReferrer’s cannot-be-a-base-URL is true, scheme is \"about\",\n        // and path contains a single string \"client\"\n        // parsedReferrer’s origin is not same origin with origin\n        // then set request’s referrer to \"client\".\n        // TODO\n\n        // 4. Otherwise, set request’s referrer to parsedReferrer.\n        request.referrer = parsedReferrer\n      }\n    }\n\n    // 15. If init[\"referrerPolicy\"] exists, then set request’s referrer policy\n    // to it.\n    if (init.referrerPolicy !== undefined) {\n      request.referrerPolicy = init.referrerPolicy\n    }\n\n    // 16. Let mode be init[\"mode\"] if it exists, and fallbackMode otherwise.\n    let mode\n    if (init.mode !== undefined) {\n      mode = init.mode\n    } else {\n      mode = fallbackMode\n    }\n\n    // 17. If mode is \"navigate\", then throw a TypeError.\n    if (mode === 'navigate') {\n      throw webidl.errors.exception({\n        header: 'Request constructor',\n        message: 'invalid request mode navigate.'\n      })\n    }\n\n    // 18. If mode is non-null, set request’s mode to mode.\n    if (mode != null) {\n      request.mode = mode\n    }\n\n    // 19. If init[\"credentials\"] exists, then set request’s credentials mode\n    // to it.\n    if (init.credentials !== undefined) {\n      request.credentials = init.credentials\n    }\n\n    // 18. If init[\"cache\"] exists, then set request’s cache mode to it.\n    if (init.cache !== undefined) {\n      request.cache = init.cache\n    }\n\n    // 21. If request’s cache mode is \"only-if-cached\" and request’s mode is\n    // not \"same-origin\", then throw a TypeError.\n    if (request.cache === 'only-if-cached' && request.mode !== 'same-origin') {\n      throw new TypeError(\n        \"'only-if-cached' can be set only with 'same-origin' mode\"\n      )\n    }\n\n    // 22. If init[\"redirect\"] exists, then set request’s redirect mode to it.\n    if (init.redirect !== undefined) {\n      request.redirect = init.redirect\n    }\n\n    // 23. If init[\"integrity\"] exists, then set request’s integrity metadata to it.\n    if (init.integrity !== undefined && init.integrity != null) {\n      request.integrity = String(init.integrity)\n    }\n\n    // 24. If init[\"keepalive\"] exists, then set request’s keepalive to it.\n    if (init.keepalive !== undefined) {\n      request.keepalive = Boolean(init.keepalive)\n    }\n\n    // 25. If init[\"method\"] exists, then:\n    if (init.method !== undefined) {\n      // 1. Let method be init[\"method\"].\n      let method = init.method\n\n      // 2. If method is not a method or method is a forbidden method, then\n      // throw a TypeError.\n      if (!isValidHTTPToken(init.method)) {\n        throw TypeError(`'${init.method}' is not a valid HTTP method.`)\n      }\n\n      if (forbiddenMethods.indexOf(method.toUpperCase()) !== -1) {\n        throw TypeError(`'${init.method}' HTTP method is unsupported.`)\n      }\n\n      // 3. Normalize method.\n      method = normalizeMethod(init.method)\n\n      // 4. Set request’s method to method.\n      request.method = method\n    }\n\n    // 26. If init[\"signal\"] exists, then set signal to it.\n    if (init.signal !== undefined) {\n      signal = init.signal\n    }\n\n    // 27. Set this’s request to request.\n    this[kState] = request\n\n    // 28. Set this’s signal to a new AbortSignal object with this’s relevant\n    // Realm.\n    const ac = new AbortController()\n    this[kSignal] = ac.signal\n    this[kSignal][kRealm] = this[kRealm]\n\n    // 29. If signal is not null, then make this’s signal follow signal.\n    if (signal != null) {\n      if (\n        !signal ||\n        typeof signal.aborted !== 'boolean' ||\n        typeof signal.addEventListener !== 'function'\n      ) {\n        throw new TypeError(\n          \"Failed to construct 'Request': member signal is not of type AbortSignal.\"\n        )\n      }\n\n      if (signal.aborted) {\n        ac.abort(signal.reason)\n      } else {\n        const acRef = new WeakRef(ac)\n        const abort = function () {\n          acRef.deref()?.abort(this.reason)\n        }\n\n        if (getEventListeners(signal, 'abort').length >= defaultMaxListeners) {\n          setMaxListeners(100, signal)\n        }\n\n        signal.addEventListener('abort', abort, { once: true })\n        requestFinalizer.register(this, { signal, abort })\n      }\n    }\n\n    // 30. Set this’s headers to a new Headers object with this’s relevant\n    // Realm, whose header list is request’s header list and guard is\n    // \"request\".\n    this[kHeaders] = new Headers()\n    this[kHeaders][kHeadersList] = request.headersList\n    this[kHeaders][kGuard] = 'request'\n    this[kHeaders][kRealm] = this[kRealm]\n\n    // 31. If this’s request’s mode is \"no-cors\", then:\n    if (mode === 'no-cors') {\n      // 1. If this’s request’s method is not a CORS-safelisted method,\n      // then throw a TypeError.\n      if (!corsSafeListedMethods.includes(request.method)) {\n        throw new TypeError(\n          `'${request.method} is unsupported in no-cors mode.`\n        )\n      }\n\n      // 2. Set this’s headers’s guard to \"request-no-cors\".\n      this[kHeaders][kGuard] = 'request-no-cors'\n    }\n\n    // 32. If init is not empty, then:\n    if (Object.keys(init).length !== 0) {\n      // 1. Let headers be a copy of this’s headers and its associated header\n      // list.\n      let headers = new Headers(this[kHeaders])\n\n      // 2. If init[\"headers\"] exists, then set headers to init[\"headers\"].\n      if (init.headers !== undefined) {\n        headers = init.headers\n      }\n\n      // 3. Empty this’s headers’s header list.\n      this[kHeaders][kHeadersList].clear()\n\n      // 4. If headers is a Headers object, then for each header in its header\n      // list, append header’s name/header’s value to this’s headers.\n      if (headers.constructor.name === 'Headers') {\n        for (const [key, val] of headers) {\n          this[kHeaders].append(key, val)\n        }\n      } else {\n        // 5. Otherwise, fill this’s headers with headers.\n        fillHeaders(this[kHeaders], headers)\n      }\n    }\n\n    // 33. Let inputBody be input’s request’s body if input is a Request\n    // object; otherwise null.\n    const inputBody = input instanceof Request ? input[kState].body : null\n\n    // 34. If either init[\"body\"] exists and is non-null or inputBody is\n    // non-null, and request’s method is `GET` or `HEAD`, then throw a\n    // TypeError.\n    if (\n      ((init.body !== undefined && init.body != null) || inputBody != null) &&\n      (request.method === 'GET' || request.method === 'HEAD')\n    ) {\n      throw new TypeError('Request with GET/HEAD method cannot have body.')\n    }\n\n    // 35. Let initBody be null.\n    let initBody = null\n\n    // 36. If init[\"body\"] exists and is non-null, then:\n    if (init.body !== undefined && init.body != null) {\n      // 1. Let Content-Type be null.\n      // 2. Set initBody and Content-Type to the result of extracting\n      // init[\"body\"], with keepalive set to request’s keepalive.\n      const [extractedBody, contentType] = extractBody(\n        init.body,\n        request.keepalive\n      )\n      initBody = extractedBody\n\n      // 3, If Content-Type is non-null and this’s headers’s header list does\n      // not contain `Content-Type`, then append `Content-Type`/Content-Type to\n      // this’s headers.\n      if (contentType && !this[kHeaders][kHeadersList].contains('content-type')) {\n        this[kHeaders].append('content-type', contentType)\n      }\n    }\n\n    // 37. Let inputOrInitBody be initBody if it is non-null; otherwise\n    // inputBody.\n    const inputOrInitBody = initBody ?? inputBody\n\n    // 38. If inputOrInitBody is non-null and inputOrInitBody’s source is\n    // null, then:\n    if (inputOrInitBody != null && inputOrInitBody.source == null) {\n      // 1. If initBody is non-null and init[\"duplex\"] does not exist,\n      //    then throw a TypeError.\n      if (initBody != null && init.duplex == null) {\n        throw new TypeError('RequestInit: duplex option is required when sending a body.')\n      }\n\n      // 2. If this’s request’s mode is neither \"same-origin\" nor \"cors\",\n      // then throw a TypeError.\n      if (request.mode !== 'same-origin' && request.mode !== 'cors') {\n        throw new TypeError(\n          'If request is made from ReadableStream, mode should be \"same-origin\" or \"cors\"'\n        )\n      }\n\n      // 3. Set this’s request’s use-CORS-preflight flag.\n      request.useCORSPreflightFlag = true\n    }\n\n    // 39. Let finalBody be inputOrInitBody.\n    let finalBody = inputOrInitBody\n\n    // 40. If initBody is null and inputBody is non-null, then:\n    if (initBody == null && inputBody != null) {\n      // 1. If input is unusable, then throw a TypeError.\n      if (util.isDisturbed(inputBody.stream) || inputBody.stream.locked) {\n        throw new TypeError(\n          'Cannot construct a Request with a Request object that has already been used.'\n        )\n      }\n\n      // 2. Set finalBody to the result of creating a proxy for inputBody.\n      if (!TransformStream) {\n        TransformStream = require('stream/web').TransformStream\n      }\n\n      // https://streams.spec.whatwg.org/#readablestream-create-a-proxy\n      const identityTransform = new TransformStream()\n      inputBody.stream.pipeThrough(identityTransform)\n      finalBody = {\n        source: inputBody.source,\n        length: inputBody.length,\n        stream: identityTransform.readable\n      }\n    }\n\n    // 41. Set this’s request’s body to finalBody.\n    this[kState].body = finalBody\n  }\n\n  // Returns request’s HTTP method, which is \"GET\" by default.\n  get method () {\n    webidl.brandCheck(this, Request)\n\n    // The method getter steps are to return this’s request’s method.\n    return this[kState].method\n  }\n\n  // Returns the URL of request as a string.\n  get url () {\n    webidl.brandCheck(this, Request)\n\n    // The url getter steps are to return this’s request’s URL, serialized.\n    return URLSerializer(this[kState].url)\n  }\n\n  // Returns a Headers object consisting of the headers associated with request.\n  // Note that headers added in the network layer by the user agent will not\n  // be accounted for in this object, e.g., the \"Host\" header.\n  get headers () {\n    webidl.brandCheck(this, Request)\n\n    // The headers getter steps are to return this’s headers.\n    return this[kHeaders]\n  }\n\n  // Returns the kind of resource requested by request, e.g., \"document\"\n  // or \"script\".\n  get destination () {\n    webidl.brandCheck(this, Request)\n\n    // The destination getter are to return this’s request’s destination.\n    return this[kState].destination\n  }\n\n  // Returns the referrer of request. Its value can be a same-origin URL if\n  // explicitly set in init, the empty string to indicate no referrer, and\n  // \"about:client\" when defaulting to the global’s default. This is used\n  // during fetching to determine the value of the `Referer` header of the\n  // request being made.\n  get referrer () {\n    webidl.brandCheck(this, Request)\n\n    // 1. If this’s request’s referrer is \"no-referrer\", then return the\n    // empty string.\n    if (this[kState].referrer === 'no-referrer') {\n      return ''\n    }\n\n    // 2. If this’s request’s referrer is \"client\", then return\n    // \"about:client\".\n    if (this[kState].referrer === 'client') {\n      return 'about:client'\n    }\n\n    // Return this’s request’s referrer, serialized.\n    return this[kState].referrer.toString()\n  }\n\n  // Returns the referrer policy associated with request.\n  // This is used during fetching to compute the value of the request’s\n  // referrer.\n  get referrerPolicy () {\n    webidl.brandCheck(this, Request)\n\n    // The referrerPolicy getter steps are to return this’s request’s referrer policy.\n    return this[kState].referrerPolicy\n  }\n\n  // Returns the mode associated with request, which is a string indicating\n  // whether the request will use CORS, or will be restricted to same-origin\n  // URLs.\n  get mode () {\n    webidl.brandCheck(this, Request)\n\n    // The mode getter steps are to return this’s request’s mode.\n    return this[kState].mode\n  }\n\n  // Returns the credentials mode associated with request,\n  // which is a string indicating whether credentials will be sent with the\n  // request always, never, or only when sent to a same-origin URL.\n  get credentials () {\n    // The credentials getter steps are to return this’s request’s credentials mode.\n    return this[kState].credentials\n  }\n\n  // Returns the cache mode associated with request,\n  // which is a string indicating how the request will\n  // interact with the browser’s cache when fetching.\n  get cache () {\n    webidl.brandCheck(this, Request)\n\n    // The cache getter steps are to return this’s request’s cache mode.\n    return this[kState].cache\n  }\n\n  // Returns the redirect mode associated with request,\n  // which is a string indicating how redirects for the\n  // request will be handled during fetching. A request\n  // will follow redirects by default.\n  get redirect () {\n    webidl.brandCheck(this, Request)\n\n    // The redirect getter steps are to return this’s request’s redirect mode.\n    return this[kState].redirect\n  }\n\n  // Returns request’s subresource integrity metadata, which is a\n  // cryptographic hash of the resource being fetched. Its value\n  // consists of multiple hashes separated by whitespace. [SRI]\n  get integrity () {\n    webidl.brandCheck(this, Request)\n\n    // The integrity getter steps are to return this’s request’s integrity\n    // metadata.\n    return this[kState].integrity\n  }\n\n  // Returns a boolean indicating whether or not request can outlive the\n  // global in which it was created.\n  get keepalive () {\n    webidl.brandCheck(this, Request)\n\n    // The keepalive getter steps are to return this’s request’s keepalive.\n    return this[kState].keepalive\n  }\n\n  // Returns a boolean indicating whether or not request is for a reload\n  // navigation.\n  get isReloadNavigation () {\n    webidl.brandCheck(this, Request)\n\n    // The isReloadNavigation getter steps are to return true if this’s\n    // request’s reload-navigation flag is set; otherwise false.\n    return this[kState].reloadNavigation\n  }\n\n  // Returns a boolean indicating whether or not request is for a history\n  // navigation (a.k.a. back-foward navigation).\n  get isHistoryNavigation () {\n    webidl.brandCheck(this, Request)\n\n    // The isHistoryNavigation getter steps are to return true if this’s request’s\n    // history-navigation flag is set; otherwise false.\n    return this[kState].historyNavigation\n  }\n\n  // Returns the signal associated with request, which is an AbortSignal\n  // object indicating whether or not request has been aborted, and its\n  // abort event handler.\n  get signal () {\n    webidl.brandCheck(this, Request)\n\n    // The signal getter steps are to return this’s signal.\n    return this[kSignal]\n  }\n\n  get body () {\n    webidl.brandCheck(this, Request)\n\n    return this[kState].body ? this[kState].body.stream : null\n  }\n\n  get bodyUsed () {\n    webidl.brandCheck(this, Request)\n\n    return !!this[kState].body && util.isDisturbed(this[kState].body.stream)\n  }\n\n  get duplex () {\n    webidl.brandCheck(this, Request)\n\n    return 'half'\n  }\n\n  // Returns a clone of request.\n  clone () {\n    webidl.brandCheck(this, Request)\n\n    // 1. If this is unusable, then throw a TypeError.\n    if (this.bodyUsed || this.body?.locked) {\n      throw new TypeError('unusable')\n    }\n\n    // 2. Let clonedRequest be the result of cloning this’s request.\n    const clonedRequest = cloneRequest(this[kState])\n\n    // 3. Let clonedRequestObject be the result of creating a Request object,\n    // given clonedRequest, this’s headers’s guard, and this’s relevant Realm.\n    const clonedRequestObject = new Request(kInit)\n    clonedRequestObject[kState] = clonedRequest\n    clonedRequestObject[kRealm] = this[kRealm]\n    clonedRequestObject[kHeaders] = new Headers()\n    clonedRequestObject[kHeaders][kHeadersList] = clonedRequest.headersList\n    clonedRequestObject[kHeaders][kGuard] = this[kHeaders][kGuard]\n    clonedRequestObject[kHeaders][kRealm] = this[kHeaders][kRealm]\n\n    // 4. Make clonedRequestObject’s signal follow this’s signal.\n    const ac = new AbortController()\n    if (this.signal.aborted) {\n      ac.abort(this.signal.reason)\n    } else {\n      this.signal.addEventListener(\n        'abort',\n        () => {\n          ac.abort(this.signal.reason)\n        },\n        { once: true }\n      )\n    }\n    clonedRequestObject[kSignal] = ac.signal\n\n    // 4. Return clonedRequestObject.\n    return clonedRequestObject\n  }\n}\n\nmixinBody(Request)\n\nfunction makeRequest (init) {\n  // https://fetch.spec.whatwg.org/#requests\n  const request = {\n    method: 'GET',\n    localURLsOnly: false,\n    unsafeRequest: false,\n    body: null,\n    client: null,\n    reservedClient: null,\n    replacesClientId: '',\n    window: 'client',\n    keepalive: false,\n    serviceWorkers: 'all',\n    initiator: '',\n    destination: '',\n    priority: null,\n    origin: 'client',\n    policyContainer: 'client',\n    referrer: 'client',\n    referrerPolicy: '',\n    mode: 'no-cors',\n    useCORSPreflightFlag: false,\n    credentials: 'same-origin',\n    useCredentials: false,\n    cache: 'default',\n    redirect: 'follow',\n    integrity: '',\n    cryptoGraphicsNonceMetadata: '',\n    parserMetadata: '',\n    reloadNavigation: false,\n    historyNavigation: false,\n    userActivation: false,\n    taintedOrigin: false,\n    redirectCount: 0,\n    responseTainting: 'basic',\n    preventNoCacheCacheControlHeaderModification: false,\n    done: false,\n    timingAllowFailed: false,\n    ...init,\n    headersList: init.headersList\n      ? new HeadersList(init.headersList)\n      : new HeadersList()\n  }\n  request.url = request.urlList[0]\n  return request\n}\n\n// https://fetch.spec.whatwg.org/#concept-request-clone\nfunction cloneRequest (request) {\n  // To clone a request request, run these steps:\n\n  // 1. Let newRequest be a copy of request, except for its body.\n  const newRequest = makeRequest({ ...request, body: null })\n\n  // 2. If request’s body is non-null, set newRequest’s body to the\n  // result of cloning request’s body.\n  if (request.body != null) {\n    newRequest.body = cloneBody(request.body)\n  }\n\n  // 3. Return newRequest.\n  return newRequest\n}\n\nObject.defineProperties(Request.prototype, {\n  method: kEnumerableProperty,\n  url: kEnumerableProperty,\n  headers: kEnumerableProperty,\n  redirect: kEnumerableProperty,\n  clone: kEnumerableProperty,\n  signal: kEnumerableProperty,\n  duplex: kEnumerableProperty,\n  destination: kEnumerableProperty,\n  body: kEnumerableProperty,\n  bodyUsed: kEnumerableProperty,\n  isHistoryNavigation: kEnumerableProperty,\n  isReloadNavigation: kEnumerableProperty,\n  keepalive: kEnumerableProperty,\n  integrity: kEnumerableProperty,\n  cache: kEnumerableProperty,\n  credentials: kEnumerableProperty,\n  attribute: kEnumerableProperty,\n  referrerPolicy: kEnumerableProperty,\n  referrer: kEnumerableProperty,\n  mode: kEnumerableProperty,\n  [Symbol.toStringTag]: {\n    value: 'Request',\n    configurable: true\n  }\n})\n\nwebidl.converters.Request = webidl.interfaceConverter(\n  Request\n)\n\n// https://fetch.spec.whatwg.org/#requestinfo\nwebidl.converters.RequestInfo = function (V) {\n  if (typeof V === 'string') {\n    return webidl.converters.USVString(V)\n  }\n\n  if (V instanceof Request) {\n    return webidl.converters.Request(V)\n  }\n\n  return webidl.converters.USVString(V)\n}\n\nwebidl.converters.AbortSignal = webidl.interfaceConverter(\n  AbortSignal\n)\n\n// https://fetch.spec.whatwg.org/#requestinit\nwebidl.converters.RequestInit = webidl.dictionaryConverter([\n  {\n    key: 'method',\n    converter: webidl.converters.ByteString\n  },\n  {\n    key: 'headers',\n    converter: webidl.converters.HeadersInit\n  },\n  {\n    key: 'body',\n    converter: webidl.nullableConverter(\n      webidl.converters.BodyInit\n    )\n  },\n  {\n    key: 'referrer',\n    converter: webidl.converters.USVString\n  },\n  {\n    key: 'referrerPolicy',\n    converter: webidl.converters.DOMString,\n    // https://w3c.github.io/webappsec-referrer-policy/#referrer-policy\n    allowedValues: referrerPolicy\n  },\n  {\n    key: 'mode',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#concept-request-mode\n    allowedValues: requestMode\n  },\n  {\n    key: 'credentials',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcredentials\n    allowedValues: requestCredentials\n  },\n  {\n    key: 'cache',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestcache\n    allowedValues: requestCache\n  },\n  {\n    key: 'redirect',\n    converter: webidl.converters.DOMString,\n    // https://fetch.spec.whatwg.org/#requestredirect\n    allowedValues: requestRedirect\n  },\n  {\n    key: 'integrity',\n    converter: webidl.converters.DOMString\n  },\n  {\n    key: 'keepalive',\n    converter: webidl.converters.boolean\n  },\n  {\n    key: 'signal',\n    converter: webidl.nullableConverter(\n      (signal) => webidl.converters.AbortSignal(\n        signal,\n        { strict: false }\n      )\n    )\n  },\n  {\n    key: 'window',\n    converter: webidl.converters.any\n  },\n  {\n    key: 'duplex',\n    converter: webidl.converters.DOMString,\n    allowedValues: requestDuplex\n  }\n])\n\nmodule.exports = { Request, makeRequest }\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}