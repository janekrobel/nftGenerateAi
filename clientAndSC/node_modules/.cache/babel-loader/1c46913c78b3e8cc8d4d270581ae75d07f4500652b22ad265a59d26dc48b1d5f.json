{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ContractFactory = void 0;\nconst index_js_1 = require(\"../abi/index.js\");\nconst index_js_2 = require(\"../address/index.js\");\nconst index_js_3 = require(\"../utils/index.js\");\nconst contract_js_1 = require(\"./contract.js\");\n// A = Arguments to the constructor\n// I = Interface of deployed contracts\nclass ContractFactory {\n  interface;\n  bytecode;\n  runner;\n  constructor(abi, bytecode, runner) {\n    const iface = index_js_1.Interface.from(abi);\n    // Dereference Solidity bytecode objects and allow a missing `0x`-prefix\n    if (bytecode instanceof Uint8Array) {\n      bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));\n    } else {\n      if (typeof bytecode === \"object\") {\n        bytecode = bytecode.object;\n      }\n      if (!bytecode.startsWith(\"0x\")) {\n        bytecode = \"0x\" + bytecode;\n      }\n      bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));\n    }\n    (0, index_js_3.defineProperties)(this, {\n      bytecode,\n      interface: iface,\n      runner: runner || null\n    });\n  }\n  async getDeployTransaction() {\n    let overrides = {};\n    const fragment = this.interface.deploy;\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (fragment.inputs.length + 1 === args.length) {\n      overrides = await (0, contract_js_1.copyOverrides)(args.pop());\n    }\n    if (fragment.inputs.length !== args.length) {\n      throw new Error(\"incorrect number of arguments to constructor\");\n    }\n    const resolvedArgs = await (0, contract_js_1.resolveArgs)(this.runner, fragment.inputs, args);\n    const data = (0, index_js_3.concat)([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);\n    return Object.assign({}, overrides, {\n      data\n    });\n  }\n  async deploy() {\n    const tx = await this.getDeployTransaction(...arguments);\n    (0, index_js_3.assert)(this.runner && typeof this.runner.sendTransaction === \"function\", \"factory runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"sendTransaction\"\n    });\n    const sentTx = await this.runner.sendTransaction(tx);\n    const address = (0, index_js_2.getCreateAddress)(sentTx);\n    return new contract_js_1.BaseContract(address, this.interface, this.runner, sentTx);\n  }\n  connect(runner) {\n    return new ContractFactory(this.interface, this.bytecode, runner);\n  }\n  static fromSolidity(output, runner) {\n    (0, index_js_3.assertArgument)(output != null, \"bad compiler output\", \"output\", output);\n    if (typeof output === \"string\") {\n      output = JSON.parse(output);\n    }\n    const abi = output.abi;\n    let bytecode = \"\";\n    if (output.bytecode) {\n      bytecode = output.bytecode;\n    } else if (output.evm && output.evm.bytecode) {\n      bytecode = output.evm.bytecode;\n    }\n    return new this(abi, bytecode, runner);\n  }\n}\nexports.ContractFactory = ContractFactory;","map":{"version":3,"mappings":";;;;;;AACA;AACA;AACA;AAKA;AAYA;AACA;AACA,MAAaA,eAAe;EACfC,SAAS;EACTC,QAAQ;EACRC,MAAM;EAEfC,YAAYC,GAA6B,EAAEH,QAAwC,EAAEC,MAA8B;IAC/G,MAAMG,KAAK,GAAGC,oBAAS,CAACC,IAAI,CAACH,GAAG,CAAC;IAEjC;IACA,IAAIH,QAAQ,YAAYO,UAAU,EAAE;MAChCP,QAAQ,GAAG,sBAAO,EAAC,uBAAQ,EAACA,QAAQ,CAAC,CAAC;KACzC,MAAM;MACH,IAAI,OAAOA,QAAS,KAAK,QAAQ,EAAE;QAAEA,QAAQ,GAAGA,QAAQ,CAACQ,MAAM;;MAC/D,IAAI,CAACR,QAAQ,CAACS,UAAU,CAAC,IAAI,CAAC,EAAE;QAAET,QAAQ,GAAG,IAAI,GAAGA,QAAQ;;MAC5DA,QAAQ,GAAG,sBAAO,EAAC,uBAAQ,EAACA,QAAQ,CAAC,CAAC;;IAG1C,+BAAgB,EAAkB,IAAI,EAAE;MACpCA,QAAQ;MAAED,SAAS,EAAEK,KAAK;MAAEH,MAAM,EAAGA,MAAM,IAAI;KAClD,CAAC;EACN;EAEA,MAAMS,oBAAoB,GAA+B;IACrD,IAAIC,SAAS,GAA4C,EAAG;IAE5D,MAAMC,QAAQ,GAAG,IAAI,CAACb,SAAS,CAACc,MAAM;IAAC,kCAHbC,IAA2B;MAA3BA,IAA2B;IAAA;IAKrD,IAAIF,QAAQ,CAACG,MAAM,CAACC,MAAM,GAAG,CAAC,KAAKF,IAAI,CAACE,MAAM,EAAE;MAC5CL,SAAS,GAAG,MAAM,+BAAa,EAACG,IAAI,CAACG,GAAG,EAAE,CAAC;;IAG/C,IAAIL,QAAQ,CAACG,MAAM,CAACC,MAAM,KAAKF,IAAI,CAACE,MAAM,EAAE;MACxC,MAAM,IAAIE,KAAK,CAAC,8CAA8C,CAAC;;IAGnE,MAAMC,YAAY,GAAG,MAAM,6BAAW,EAAC,IAAI,CAAClB,MAAM,EAAEW,QAAQ,CAACG,MAAM,EAAED,IAAI,CAAC;IAE1E,MAAMM,IAAI,GAAG,qBAAM,EAAC,CAAE,IAAI,CAACpB,QAAQ,EAAE,IAAI,CAACD,SAAS,CAACsB,YAAY,CAACF,YAAY,CAAC,CAAE,CAAC;IACjF,OAAOG,MAAM,CAACC,MAAM,CAAC,EAAG,EAAEZ,SAAS,EAAE;MAAES;IAAI,CAAE,CAAC;EAClD;EAEA,MAAMP,MAAM,GAA+B;IACvC,MAAMW,EAAE,GAAG,MAAM,IAAI,CAACd,oBAAoB,CAAC,YAAO,CAAC;IAEnD,qBAAM,EAAC,IAAI,CAACT,MAAM,IAAI,OAAO,IAAI,CAACA,MAAM,CAACwB,eAAgB,KAAK,UAAU,EACpE,sDAAsD,EAAE,uBAAuB,EAAE;MACjFC,SAAS,EAAE;KAAmB,CAAC;IAEnC,MAAMC,MAAM,GAAG,MAAM,IAAI,CAAC1B,MAAM,CAACwB,eAAe,CAACD,EAAE,CAAC;IACpD,MAAMI,OAAO,GAAG,+BAAgB,EAACD,MAAM,CAAC;IACxC,OAAO,IAAUE,0BAAa,CAACD,OAAO,EAAE,IAAI,CAAC7B,SAAS,EAAE,IAAI,CAACE,MAAM,EAAE0B,MAAM,CAAC;EAChF;EAEAG,OAAO,CAAC7B,MAA6B;IACjC,OAAO,IAAIH,eAAe,CAAC,IAAI,CAACC,SAAS,EAAE,IAAI,CAACC,QAAQ,EAAEC,MAAM,CAAC;EACrE;EAEA,OAAO8B,YAAY,CAA2DC,MAAW,EAAE/B,MAAuB;IAC9G,6BAAc,EAAC+B,MAAM,IAAI,IAAI,EAAE,qBAAqB,EAAE,QAAQ,EAAEA,MAAM,CAAC;IAEvE,IAAI,OAAOA,MAAO,KAAK,QAAQ,EAAE;MAAEA,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACF,MAAM,CAAC;;IAE9D,MAAM7B,GAAG,GAAG6B,MAAM,CAAC7B,GAAG;IAEtB,IAAIH,QAAQ,GAAG,EAAE;IACjB,IAAIgC,MAAM,CAAChC,QAAQ,EAAE;MACjBA,QAAQ,GAAGgC,MAAM,CAAChC,QAAQ;KAC7B,MAAM,IAAIgC,MAAM,CAACG,GAAG,IAAIH,MAAM,CAACG,GAAG,CAACnC,QAAQ,EAAE;MAC1CA,QAAQ,GAAGgC,MAAM,CAACG,GAAG,CAACnC,QAAQ;;IAGlC,OAAO,IAAI,IAAI,CAACG,GAAG,EAAEH,QAAQ,EAAEC,MAAM,CAAC;EAC1C;;AAxEJmC","names":["ContractFactory","interface","bytecode","runner","constructor","abi","iface","index_js_1","from","Uint8Array","object","startsWith","getDeployTransaction","overrides","fragment","deploy","args","inputs","length","pop","Error","resolvedArgs","data","encodeDeploy","Object","assign","tx","sendTransaction","operation","sentTx","address","contract_js_1","connect","fromSolidity","output","JSON","parse","evm","exports"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/contract/factory.ts"],"sourcesContent":["\nimport { Interface } from \"../abi/index.js\";\nimport { getCreateAddress } from \"../address/index.js\";\nimport {\n    concat, defineProperties, getBytes, hexlify,\n    assert, assertArgument\n} from \"../utils/index.js\";\n\nimport { BaseContract, copyOverrides, resolveArgs } from \"./contract.js\";\n\nimport type { InterfaceAbi } from \"../abi/index.js\";\nimport type { ContractRunner } from \"../providers/index.js\";\nimport type { BytesLike } from \"../utils/index.js\";\n\nimport type {\n    ContractInterface, ContractMethodArgs, ContractDeployTransaction,\n} from \"./types.js\";\nimport type { ContractTransactionResponse } from \"./wrappers.js\";\n\n\n// A = Arguments to the constructor\n// I = Interface of deployed contracts\nexport class ContractFactory<A extends Array<any> = Array<any>, I = BaseContract> {\n    readonly interface!: Interface;\n    readonly bytecode!: string;\n    readonly runner!: null | ContractRunner;\n\n    constructor(abi: Interface | InterfaceAbi, bytecode: BytesLike | { object: string }, runner?: null | ContractRunner) {\n        const iface = Interface.from(abi);\n\n        // Dereference Solidity bytecode objects and allow a missing `0x`-prefix\n        if (bytecode instanceof Uint8Array) {\n            bytecode = hexlify(getBytes(bytecode));\n        } else {\n            if (typeof(bytecode) === \"object\") { bytecode = bytecode.object; }\n            if (!bytecode.startsWith(\"0x\")) { bytecode = \"0x\" + bytecode; }\n            bytecode = hexlify(getBytes(bytecode));\n        }\n\n        defineProperties<ContractFactory>(this, {\n            bytecode, interface: iface, runner: (runner || null)\n        });\n    }\n\n    async getDeployTransaction(...args: ContractMethodArgs<A>): Promise<ContractDeployTransaction> {\n        let overrides: Omit<ContractDeployTransaction, \"data\"> = { };\n\n        const fragment = this.interface.deploy;\n\n        if (fragment.inputs.length + 1 === args.length) {\n            overrides = await copyOverrides(args.pop());\n        }\n\n        if (fragment.inputs.length !== args.length) {\n            throw new Error(\"incorrect number of arguments to constructor\");\n        }\n\n        const resolvedArgs = await resolveArgs(this.runner, fragment.inputs, args);\n\n        const data = concat([ this.bytecode, this.interface.encodeDeploy(resolvedArgs) ]);\n        return Object.assign({ }, overrides, { data });\n    }\n\n    async deploy(...args: ContractMethodArgs<A>): Promise<BaseContract & { deploymentTransaction(): ContractTransactionResponse } & Omit<I, keyof BaseContract>> {\n        const tx = await this.getDeployTransaction(...args);\n\n        assert(this.runner && typeof(this.runner.sendTransaction) === \"function\",\n            \"factory runner does not support sending transactions\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"sendTransaction\" });\n\n        const sentTx = await this.runner.sendTransaction(tx);\n        const address = getCreateAddress(sentTx);\n        return new (<any>BaseContract)(address, this.interface, this.runner, sentTx);\n    }\n\n    connect(runner: null | ContractRunner): ContractFactory<A, I> {\n        return new ContractFactory(this.interface, this.bytecode, runner);\n    }\n\n    static fromSolidity<A extends Array<any> = Array<any>, I = ContractInterface>(output: any, runner?: ContractRunner): ContractFactory<A, I> {\n        assertArgument(output != null, \"bad compiler output\", \"output\", output);\n\n        if (typeof(output) === \"string\") { output = JSON.parse(output); }\n\n        const abi = output.abi;\n\n        let bytecode = \"\";\n        if (output.bytecode) {\n            bytecode = output.bytecode;\n        } else if (output.evm && output.evm.bytecode) {\n            bytecode = output.evm.bytecode;\n        }\n\n        return new this(abi, bytecode, runner);\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}