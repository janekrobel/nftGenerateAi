{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { getCurrentHub } from '@sentry/hub';\n/**\n * This calls a function on the current hub.\n * @param method function to call on hub.\n * @param args to pass to function.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction callOnHub(method) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  var hub = getCurrentHub();\n  if (hub && hub[method]) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return hub[method].apply(hub, __spread(args));\n  }\n  throw new Error(\"No hub defined or \" + method + \" was not found on the hub, please open a bug report.\");\n}\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @returns The generated eventId.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function captureException(exception, captureContext) {\n  var syntheticException;\n  try {\n    throw new Error('Sentry syntheticException');\n  } catch (exception) {\n    syntheticException = exception;\n  }\n  return callOnHub('captureException', exception, {\n    captureContext: captureContext,\n    originalException: exception,\n    syntheticException: syntheticException\n  });\n}\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param level Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(message, captureContext) {\n  var syntheticException;\n  try {\n    throw new Error(message);\n  } catch (exception) {\n    syntheticException = exception;\n  }\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  var level = typeof captureContext === 'string' ? captureContext : undefined;\n  var context = typeof captureContext !== 'string' ? {\n    captureContext: captureContext\n  } : undefined;\n  return callOnHub('captureMessage', message, level, __assign({\n    originalException: message,\n    syntheticException: syntheticException\n  }, context));\n}\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event) {\n  return callOnHub('captureEvent', event);\n}\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback) {\n  callOnHub('configureScope', callback);\n}\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb) {\n  callOnHub('addBreadcrumb', breadcrumb);\n}\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function setContext(name, context) {\n  callOnHub('setContext', name, context);\n}\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras) {\n  callOnHub('setExtras', extras);\n}\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags) {\n  callOnHub('setTags', tags);\n}\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key, extra) {\n  callOnHub('setExtra', key, extra);\n}\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nexport function setTag(key, value) {\n  callOnHub('setTag', key, value);\n}\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user) {\n  callOnHub('setUser', user);\n}\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback) {\n  callOnHub('withScope', callback);\n}\n/**\n * Calls a function on the latest client. Use this with caution, it's meant as\n * in \"internal\" helper so we don't need to expose every possible function in\n * the shim. It is not guaranteed that the client actually implements the\n * function.\n *\n * @param method The method to call on the client/client.\n * @param args Arguments to pass to the client/fontend.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function _callOnClient(method) {\n  var args = [];\n  for (var _i = 1; _i < arguments.length; _i++) {\n    args[_i - 1] = arguments[_i];\n  }\n  callOnHub.apply(void 0, __spread(['_invokeClient', method], args));\n}\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */\nexport function startTransaction(context, customSamplingContext) {\n  return callOnHub('startTransaction', __assign({}, context), customSamplingContext);\n}","map":{"version":3,"mappings":";AAAA,SAASA,aAAa,QAAoB,aAAa;AAevD;;;;;AAKA;AACA,SAASC,SAAS,CAAIC,MAAc;EAAE;OAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;IAAdC;;EACpC,IAAMC,GAAG,GAAGL,aAAa,EAAE;EAC3B,IAAIK,GAAG,IAAIA,GAAG,CAACH,MAAmB,CAAC,EAAE;IACnC;IACA,OAAQG,GAAG,CAACH,MAAmB,CAAC,OAAxBG,GAAG,WAAiCD,IAAI;;EAElD,MAAM,IAAIE,KAAK,CAAC,uBAAqBJ,MAAM,yDAAsD,CAAC;AACpG;AAEA;;;;;;AAMA;AACA,OAAM,SAAUK,gBAAgB,CAACC,SAAc,EAAEC,cAA+B;EAC9E,IAAIC,kBAAyB;EAC7B,IAAI;IACF,MAAM,IAAIJ,KAAK,CAAC,2BAA2B,CAAC;GAC7C,CAAC,OAAOE,SAAS,EAAE;IAClBE,kBAAkB,GAAGF,SAAkB;;EAEzC,OAAOP,SAAS,CAAC,kBAAkB,EAAEO,SAAS,EAAE;IAC9CC,cAAc;IACdE,iBAAiB,EAAEH,SAAS;IAC5BE,kBAAkB;GACnB,CAAC;AACJ;AAEA;;;;;;;AAOA,OAAM,SAAUE,cAAc,CAACC,OAAe,EAAEJ,cAA0C;EACxF,IAAIC,kBAAyB;EAC7B,IAAI;IACF,MAAM,IAAIJ,KAAK,CAACO,OAAO,CAAC;GACzB,CAAC,OAAOL,SAAS,EAAE;IAClBE,kBAAkB,GAAGF,SAAkB;;EAGzC;EACA;EACA,IAAMM,KAAK,GAAG,OAAOL,cAAc,KAAK,QAAQ,GAAGA,cAAc,GAAGM,SAAS;EAC7E,IAAMC,OAAO,GAAG,OAAOP,cAAc,KAAK,QAAQ,GAAG;IAAEA,cAAc;EAAA,CAAE,GAAGM,SAAS;EAEnF,OAAOd,SAAS,CAAC,gBAAgB,EAAEY,OAAO,EAAEC,KAAK;IAC/CH,iBAAiB,EAAEE,OAAO;IAC1BH,kBAAkB;EAAA,GACfM,OAAO,EACV;AACJ;AAEA;;;;;;AAMA,OAAM,SAAUC,YAAY,CAACC,KAAY;EACvC,OAAOjB,SAAS,CAAC,cAAc,EAAEiB,KAAK,CAAC;AACzC;AAEA;;;;AAIA,OAAM,SAAUC,cAAc,CAACC,QAAgC;EAC7DnB,SAAS,CAAO,gBAAgB,EAAEmB,QAAQ,CAAC;AAC7C;AAEA;;;;;;;;AAQA,OAAM,SAAUC,aAAa,CAACC,UAAsB;EAClDrB,SAAS,CAAO,eAAe,EAAEqB,UAAU,CAAC;AAC9C;AAEA;;;;;AAKA;AACA,OAAM,SAAUC,UAAU,CAACC,IAAY,EAAER,OAAsC;EAC7Ef,SAAS,CAAO,YAAY,EAAEuB,IAAI,EAAER,OAAO,CAAC;AAC9C;AAEA;;;;AAIA,OAAM,SAAUS,SAAS,CAACC,MAAc;EACtCzB,SAAS,CAAO,WAAW,EAAEyB,MAAM,CAAC;AACtC;AAEA;;;;AAIA,OAAM,SAAUC,OAAO,CAACC,IAAkC;EACxD3B,SAAS,CAAO,SAAS,EAAE2B,IAAI,CAAC;AAClC;AAEA;;;;;AAKA,OAAM,SAAUC,QAAQ,CAACC,GAAW,EAAEC,KAAY;EAChD9B,SAAS,CAAO,UAAU,EAAE6B,GAAG,EAAEC,KAAK,CAAC;AACzC;AAEA;;;;;;;;AAQA,OAAM,SAAUC,MAAM,CAACF,GAAW,EAAEG,KAAgB;EAClDhC,SAAS,CAAO,QAAQ,EAAE6B,GAAG,EAAEG,KAAK,CAAC;AACvC;AAEA;;;;;AAKA,OAAM,SAAUC,OAAO,CAACC,IAAiB;EACvClC,SAAS,CAAO,SAAS,EAAEkC,IAAI,CAAC;AAClC;AAEA;;;;;;;;;;;;;AAaA,OAAM,SAAUC,SAAS,CAAChB,QAAgC;EACxDnB,SAAS,CAAO,WAAW,EAAEmB,QAAQ,CAAC;AACxC;AAEA;;;;;;;;;;AAUA;AACA,OAAM,SAAUiB,aAAa,CAACnC,MAAc;EAAE;OAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;IAAdC;;EAC5CH,SAAS,yBAAO,eAAe,EAAEC,MAAM,GAAKE,IAAI;AAClD;AAEA;;;;;;;;;;;;;;;;;AAiBA,OAAM,SAAUkC,gBAAgB,CAC9BtB,OAA2B,EAC3BuB,qBAA6C;EAE7C,OAAOtC,SAAS,CAAC,kBAAkB,eAAOe,OAAO,GAAIuB,qBAAqB,CAAC;AAC7E","names":["getCurrentHub","callOnHub","method","_i","args","hub","Error","captureException","exception","captureContext","syntheticException","originalException","captureMessage","message","level","undefined","context","captureEvent","event","configureScope","callback","addBreadcrumb","breadcrumb","setContext","name","setExtras","extras","setTags","tags","setExtra","key","extra","setTag","value","setUser","user","withScope","_callOnClient","startTransaction","customSamplingContext"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@sentry/minimal/src/index.ts"],"sourcesContent":["import { getCurrentHub, Hub, Scope } from '@sentry/hub';\nimport {\n  Breadcrumb,\n  CaptureContext,\n  CustomSamplingContext,\n  Event,\n  Extra,\n  Extras,\n  Primitive,\n  Severity,\n  Transaction,\n  TransactionContext,\n  User,\n} from '@sentry/types';\n\n/**\n * This calls a function on the current hub.\n * @param method function to call on hub.\n * @param args to pass to function.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction callOnHub<T>(method: string, ...args: any[]): T {\n  const hub = getCurrentHub();\n  if (hub && hub[method as keyof Hub]) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (hub[method as keyof Hub] as any)(...args);\n  }\n  throw new Error(`No hub defined or ${method} was not found on the hub, please open a bug report.`);\n}\n\n/**\n * Captures an exception event and sends it to Sentry.\n *\n * @param exception An exception-like object.\n * @returns The generated eventId.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\nexport function captureException(exception: any, captureContext?: CaptureContext): string {\n  let syntheticException: Error;\n  try {\n    throw new Error('Sentry syntheticException');\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n  return callOnHub('captureException', exception, {\n    captureContext,\n    originalException: exception,\n    syntheticException,\n  });\n}\n\n/**\n * Captures a message event and sends it to Sentry.\n *\n * @param message The message to send to Sentry.\n * @param level Define the level of the message.\n * @returns The generated eventId.\n */\nexport function captureMessage(message: string, captureContext?: CaptureContext | Severity): string {\n  let syntheticException: Error;\n  try {\n    throw new Error(message);\n  } catch (exception) {\n    syntheticException = exception as Error;\n  }\n\n  // This is necessary to provide explicit scopes upgrade, without changing the original\n  // arity of the `captureMessage(message, level)` method.\n  const level = typeof captureContext === 'string' ? captureContext : undefined;\n  const context = typeof captureContext !== 'string' ? { captureContext } : undefined;\n\n  return callOnHub('captureMessage', message, level, {\n    originalException: message,\n    syntheticException,\n    ...context,\n  });\n}\n\n/**\n * Captures a manually created event and sends it to Sentry.\n *\n * @param event The event to send to Sentry.\n * @returns The generated eventId.\n */\nexport function captureEvent(event: Event): string {\n  return callOnHub('captureEvent', event);\n}\n\n/**\n * Callback to set context information onto the scope.\n * @param callback Callback function that receives Scope.\n */\nexport function configureScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('configureScope', callback);\n}\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n *\n * @param breadcrumb The breadcrumb to record.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb): void {\n  callOnHub<void>('addBreadcrumb', breadcrumb);\n}\n\n/**\n * Sets context data with the given name.\n * @param name of the context\n * @param context Any kind of data. This data will be normalized.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function setContext(name: string, context: { [key: string]: any } | null): void {\n  callOnHub<void>('setContext', name, context);\n}\n\n/**\n * Set an object that will be merged sent as extra data with the event.\n * @param extras Extras object to merge into current context.\n */\nexport function setExtras(extras: Extras): void {\n  callOnHub<void>('setExtras', extras);\n}\n\n/**\n * Set an object that will be merged sent as tags data with the event.\n * @param tags Tags context object to merge into current context.\n */\nexport function setTags(tags: { [key: string]: Primitive }): void {\n  callOnHub<void>('setTags', tags);\n}\n\n/**\n * Set key:value that will be sent as extra data with the event.\n * @param key String of extra\n * @param extra Any kind of data. This data will be normalized.\n */\nexport function setExtra(key: string, extra: Extra): void {\n  callOnHub<void>('setExtra', key, extra);\n}\n\n/**\n * Set key:value that will be sent as tags data with the event.\n *\n * Can also be used to unset a tag, by passing `undefined`.\n *\n * @param key String key of tag\n * @param value Value of tag\n */\nexport function setTag(key: string, value: Primitive): void {\n  callOnHub<void>('setTag', key, value);\n}\n\n/**\n * Updates user context information for future events.\n *\n * @param user User context object to be set in the current context. Pass `null` to unset the user.\n */\nexport function setUser(user: User | null): void {\n  callOnHub<void>('setUser', user);\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n *\n * This is essentially a convenience function for:\n *\n *     pushScope();\n *     callback();\n *     popScope();\n *\n * @param callback that will be enclosed into push/popScope.\n */\nexport function withScope(callback: (scope: Scope) => void): void {\n  callOnHub<void>('withScope', callback);\n}\n\n/**\n * Calls a function on the latest client. Use this with caution, it's meant as\n * in \"internal\" helper so we don't need to expose every possible function in\n * the shim. It is not guaranteed that the client actually implements the\n * function.\n *\n * @param method The method to call on the client/client.\n * @param args Arguments to pass to the client/fontend.\n * @hidden\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function _callOnClient(method: string, ...args: any[]): void {\n  callOnHub<void>('_invokeClient', method, ...args);\n}\n\n/**\n * Starts a new `Transaction` and returns it. This is the entry point to manual tracing instrumentation.\n *\n * A tree structure can be built by adding child spans to the transaction, and child spans to other spans. To start a\n * new child span within the transaction or any span, call the respective `.startChild()` method.\n *\n * Every child span must be finished before the transaction is finished, otherwise the unfinished spans are discarded.\n *\n * The transaction must be finished with a call to its `.finish()` method, at which point the transaction with all its\n * finished child spans will be sent to Sentry.\n *\n * @param context Properties of the new `Transaction`.\n * @param customSamplingContext Information given to the transaction sampling function (along with context-dependent\n * default values). See {@link Options.tracesSampler}.\n *\n * @returns The transaction which was just started\n */\nexport function startTransaction(\n  context: TransactionContext,\n  customSamplingContext?: CustomSamplingContext,\n): Transaction {\n  return callOnHub('startTransaction', { ...context }, customSamplingContext);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}