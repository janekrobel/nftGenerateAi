{"ast":null,"code":"const ethers = require('ethers');\nconst abi = require('./artifacts/contracts/AiNft.sol/AiNft.json');\nlet provider;\nlet signer;\nlet contractAddress = \"0x90072B47Dd9FB99383e391FaF12Ffc436df1571A\";\nlet infuraUrl = \"https://goerli.infura.io/v3/a89fc1de7ad2450da2ca305a134730be\";\nexports.disconnectToMetamask = () => {\n  provider = \"\";\n  signer = \"\";\n};\nexports.connectToMetamask = async () => {\n  if (window.ethereum) {\n    try {\n      window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      provider = new ethers.providers.JsonRpcProvider(infuraUrl);\n      signer = new ethers.providers.Web3Provider(window.ethereum).getSigner();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n};\nexports.mint = async () => {\n  try {\n    if (signer && provider) {\n      const aiNftContract = new ethers.Contract(contractAddress, abi.abi, provider);\n      const options = {\n        value: ethers.utils.parseEther(\"0\")\n      };\n      const response = await aiNftContract.connect(signer).mint(options);\n      const events = await response.wait();\n      return true;\n    }\n  } catch (err) {\n    return false;\n  }\n};\nexports.getAllIds = async () => {\n  let account = signer.getAddress();\n  try {\n    const response = await aiNftContract.getOwnedNFTIds(account);\n    return response;\n  } catch (err) {\n    console.log(err);\n    return false;\n  }\n};","map":{"version":3,"names":["ethers","require","abi","provider","signer","contractAddress","infuraUrl","exports","disconnectToMetamask","connectToMetamask","window","ethereum","request","method","providers","JsonRpcProvider","Web3Provider","getSigner","error","mint","aiNftContract","Contract","options","value","utils","parseEther","response","connect","events","wait","err","getAllIds","account","getAddress","getOwnedNFTIds","console","log"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/src/contractModel.js"],"sourcesContent":["const ethers = require('ethers');\nconst abi = require('./artifacts/contracts/AiNft.sol/AiNft.json');\n\nlet provider;\nlet signer;\nlet contractAddress = \"0x90072B47Dd9FB99383e391FaF12Ffc436df1571A\";\nlet infuraUrl = \"https://goerli.infura.io/v3/a89fc1de7ad2450da2ca305a134730be\";\n\nexports.disconnectToMetamask = () => {\n    provider = \"\"\n    signer = \"\"\n}\n\nexports.connectToMetamask = async () => {\n    if(window.ethereum) {\n        try{\n            window.ethereum.request({ method: \"eth_requestAccounts\" });\n            provider = new ethers.providers.JsonRpcProvider(infuraUrl);\n            signer = new ethers.providers.Web3Provider(window.ethereum).getSigner();\n            return true;\n        }\n        catch(error){\n            return false;\n        }\n    }\n}\n\nexports.mint = async () => {\n    try{\n        if(signer && provider){\n            const aiNftContract = new ethers.Contract(contractAddress,abi.abi,provider);\n            const options = {value: ethers.utils.parseEther(\"0\")};\n            const response = await aiNftContract.connect(signer).mint(options);\n            const events  = await response.wait();\n            return true;\n        }\n    }\n    catch(err){\n        return false; \n    }        \n}\nexports.getAllIds = async () => {\n    let account = signer.getAddress();\n    try{\n        const response = await aiNftContract.getOwnedNFTIds(account);\n        return response;\n    }\n    catch(err){\n        console.log(err);\n        return false;\n    }\n\n    \n}\n\n\n\n\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,GAAG,GAAGD,OAAO,CAAC,4CAA4C,CAAC;AAEjE,IAAIE,QAAQ;AACZ,IAAIC,MAAM;AACV,IAAIC,eAAe,GAAG,4CAA4C;AAClE,IAAIC,SAAS,GAAG,8DAA8D;AAE9EC,OAAO,CAACC,oBAAoB,GAAG,MAAM;EACjCL,QAAQ,GAAG,EAAE;EACbC,MAAM,GAAG,EAAE;AACf,CAAC;AAEDG,OAAO,CAACE,iBAAiB,GAAG,YAAY;EACpC,IAAGC,MAAM,CAACC,QAAQ,EAAE;IAChB,IAAG;MACCD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC;MAC1DV,QAAQ,GAAG,IAAIH,MAAM,CAACc,SAAS,CAACC,eAAe,CAACT,SAAS,CAAC;MAC1DF,MAAM,GAAG,IAAIJ,MAAM,CAACc,SAAS,CAACE,YAAY,CAACN,MAAM,CAACC,QAAQ,CAAC,CAACM,SAAS,EAAE;MACvE,OAAO,IAAI;IACf,CAAC,CACD,OAAMC,KAAK,EAAC;MACR,OAAO,KAAK;IAChB;EACJ;AACJ,CAAC;AAEDX,OAAO,CAACY,IAAI,GAAG,YAAY;EACvB,IAAG;IACC,IAAGf,MAAM,IAAID,QAAQ,EAAC;MAClB,MAAMiB,aAAa,GAAG,IAAIpB,MAAM,CAACqB,QAAQ,CAAChB,eAAe,EAACH,GAAG,CAACA,GAAG,EAACC,QAAQ,CAAC;MAC3E,MAAMmB,OAAO,GAAG;QAACC,KAAK,EAAEvB,MAAM,CAACwB,KAAK,CAACC,UAAU,CAAC,GAAG;MAAC,CAAC;MACrD,MAAMC,QAAQ,GAAG,MAAMN,aAAa,CAACO,OAAO,CAACvB,MAAM,CAAC,CAACe,IAAI,CAACG,OAAO,CAAC;MAClE,MAAMM,MAAM,GAAI,MAAMF,QAAQ,CAACG,IAAI,EAAE;MACrC,OAAO,IAAI;IACf;EACJ,CAAC,CACD,OAAMC,GAAG,EAAC;IACN,OAAO,KAAK;EAChB;AACJ,CAAC;AACDvB,OAAO,CAACwB,SAAS,GAAG,YAAY;EAC5B,IAAIC,OAAO,GAAG5B,MAAM,CAAC6B,UAAU,EAAE;EACjC,IAAG;IACC,MAAMP,QAAQ,GAAG,MAAMN,aAAa,CAACc,cAAc,CAACF,OAAO,CAAC;IAC5D,OAAON,QAAQ;EACnB,CAAC,CACD,OAAMI,GAAG,EAAC;IACNK,OAAO,CAACC,GAAG,CAACN,GAAG,CAAC;IAChB,OAAO,KAAK;EAChB;AAGJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}