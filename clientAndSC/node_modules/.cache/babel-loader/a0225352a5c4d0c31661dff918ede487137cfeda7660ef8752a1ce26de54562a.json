{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { isInstanceOf, SyncPromise } from '@sentry/utils';\nimport { getExceptionFromError } from '../parsers';\nvar DEFAULT_KEY = 'cause';\nvar DEFAULT_LIMIT = 5;\n/** Adds SDK info to an event. */\nvar LinkedErrors = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function LinkedErrors(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n    this.name = LinkedErrors.id;\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n  /**\n   * @inheritDoc\n   */\n  LinkedErrors.prototype.setupOnce = function () {\n    addGlobalEventProcessor(function (event, hint) {\n      var self = getCurrentHub().getIntegration(LinkedErrors);\n      if (self) {\n        var handler = self._handler && self._handler.bind(self);\n        return typeof handler === 'function' ? handler(event, hint) : event;\n      }\n      return event;\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  LinkedErrors.prototype._handler = function (event, hint) {\n    var _this = this;\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return SyncPromise.resolve(event);\n    }\n    return new SyncPromise(function (resolve) {\n      _this._walkErrorTree(hint.originalException, _this._key).then(function (linkedErrors) {\n        if (event && event.exception && event.exception.values) {\n          event.exception.values = __spread(linkedErrors, event.exception.values);\n        }\n        resolve(event);\n      }).then(null, function () {\n        resolve(event);\n      });\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  LinkedErrors.prototype._walkErrorTree = function (error, key, stack) {\n    var _this = this;\n    if (stack === void 0) {\n      stack = [];\n    }\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return SyncPromise.resolve(stack);\n    }\n    return new SyncPromise(function (resolve, reject) {\n      getExceptionFromError(error[key]).then(function (exception) {\n        _this._walkErrorTree(error[key], key, __spread([exception], stack)).then(resolve).then(null, function () {\n          reject();\n        });\n      }).then(null, function () {\n        reject();\n      });\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  LinkedErrors.id = 'LinkedErrors';\n  return LinkedErrors;\n}();\nexport { LinkedErrors };","map":{"version":3,"mappings":"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","names":["addGlobalEventProcessor","getCurrentHub","isInstanceOf","SyncPromise","getExceptionFromError","DEFAULT_KEY","DEFAULT_LIMIT","options","LinkedErrors","id","_key","key","_limit","limit","event","hint","self","getIntegration","handler","_handler","bind","exception","values","originalException","Error","resolve","_this","_walkErrorTree","then","linkedErrors","error","stack","length","reject"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@sentry/node/src/integrations/linkederrors.ts"],"sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/core';\nimport { Event, EventHint, Exception, ExtendedError, Integration } from '@sentry/types';\nimport { isInstanceOf, SyncPromise } from '@sentry/utils';\n\nimport { getExceptionFromError } from '../parsers';\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\n/** Adds SDK info to an event. */\nexport class LinkedErrors implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'LinkedErrors';\n\n  /**\n   * @inheritDoc\n   */\n  public readonly name: string = LinkedErrors.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _key: string;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _limit: number;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { key?: string; limit?: number } = {}) {\n    this._key = options.key || DEFAULT_KEY;\n    this._limit = options.limit || DEFAULT_LIMIT;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    addGlobalEventProcessor((event: Event, hint?: EventHint) => {\n      const self = getCurrentHub().getIntegration(LinkedErrors);\n      if (self) {\n        const handler = self._handler && self._handler.bind(self);\n        return typeof handler === 'function' ? handler(event, hint) : event;\n      }\n      return event;\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _handler(event: Event, hint?: EventHint): PromiseLike<Event> {\n    if (!event.exception || !event.exception.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n      return SyncPromise.resolve(event);\n    }\n\n    return new SyncPromise<Event>(resolve => {\n      this._walkErrorTree(hint.originalException as Error, this._key)\n        .then((linkedErrors: Exception[]) => {\n          if (event && event.exception && event.exception.values) {\n            event.exception.values = [...linkedErrors, ...event.exception.values];\n          }\n          resolve(event);\n        })\n        .then(null, () => {\n          resolve(event);\n        });\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  private _walkErrorTree(error: ExtendedError, key: string, stack: Exception[] = []): PromiseLike<Exception[]> {\n    if (!isInstanceOf(error[key], Error) || stack.length + 1 >= this._limit) {\n      return SyncPromise.resolve(stack);\n    }\n    return new SyncPromise<Exception[]>((resolve, reject) => {\n      getExceptionFromError(error[key])\n        .then((exception: Exception) => {\n          this._walkErrorTree(error[key], key, [exception, ...stack])\n            .then(resolve)\n            .then(null, () => {\n              reject();\n            });\n        })\n        .then(null, () => {\n          reject();\n        });\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}