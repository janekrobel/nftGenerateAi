{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Transaction = void 0;\nconst index_js_1 = require(\"../address/index.js\");\nconst index_js_2 = require(\"../crypto/index.js\");\nconst index_js_3 = require(\"../utils/index.js\");\nconst accesslist_js_1 = require(\"./accesslist.js\");\nconst address_js_1 = require(\"./address.js\");\nconst BN_0 = BigInt(0);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27);\nconst BN_28 = BigInt(28);\nconst BN_35 = BigInt(35);\nconst BN_MAX_UINT = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\nfunction handleAddress(value) {\n  if (value === \"0x\") {\n    return null;\n  }\n  return (0, index_js_1.getAddress)(value);\n}\nfunction handleAccessList(value, param) {\n  try {\n    return (0, accesslist_js_1.accessListify)(value);\n  } catch (error) {\n    (0, index_js_3.assertArgument)(false, error.message, param, value);\n  }\n}\nfunction handleNumber(_value, param) {\n  if (_value === \"0x\") {\n    return 0;\n  }\n  return (0, index_js_3.getNumber)(_value, param);\n}\nfunction handleUint(_value, param) {\n  if (_value === \"0x\") {\n    return BN_0;\n  }\n  const value = (0, index_js_3.getBigInt)(_value, param);\n  (0, index_js_3.assertArgument)(value <= BN_MAX_UINT, \"value exceeds uint size\", param, value);\n  return value;\n}\nfunction formatNumber(_value, name) {\n  const value = (0, index_js_3.getBigInt)(_value, \"value\");\n  const result = (0, index_js_3.toBeArray)(value);\n  (0, index_js_3.assertArgument)(result.length <= 32, `value too large`, `tx.${name}`, value);\n  return result;\n}\nfunction formatAccessList(value) {\n  return (0, accesslist_js_1.accessListify)(value).map(set => [set.address, set.storageKeys]);\n}\nfunction _parseLegacy(data) {\n  const fields = (0, index_js_3.decodeRlp)(data);\n  (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), \"invalid field count for legacy transaction\", \"data\", data);\n  const tx = {\n    type: 0,\n    nonce: handleNumber(fields[0], \"nonce\"),\n    gasPrice: handleUint(fields[1], \"gasPrice\"),\n    gasLimit: handleUint(fields[2], \"gasLimit\"),\n    to: handleAddress(fields[3]),\n    value: handleUint(fields[4], \"value\"),\n    data: (0, index_js_3.hexlify)(fields[5]),\n    chainId: BN_0\n  };\n  // Legacy unsigned transaction\n  if (fields.length === 6) {\n    return tx;\n  }\n  const v = handleUint(fields[6], \"v\");\n  const r = handleUint(fields[7], \"r\");\n  const s = handleUint(fields[8], \"s\");\n  if (r === BN_0 && s === BN_0) {\n    // EIP-155 unsigned transaction\n    tx.chainId = v;\n  } else {\n    // Compute the EIP-155 chain ID (or 0 for legacy)\n    let chainId = (v - BN_35) / BN_2;\n    if (chainId < BN_0) {\n      chainId = BN_0;\n    }\n    tx.chainId = chainId;\n    // Signed Legacy Transaction\n    (0, index_js_3.assertArgument)(chainId !== BN_0 || v === BN_27 || v === BN_28, \"non-canonical legacy v\", \"v\", fields[6]);\n    tx.signature = index_js_2.Signature.from({\n      r: (0, index_js_3.zeroPadValue)(fields[7], 32),\n      s: (0, index_js_3.zeroPadValue)(fields[8], 32),\n      v\n    });\n    tx.hash = (0, index_js_2.keccak256)(data);\n  }\n  return tx;\n}\nfunction _serializeLegacy(tx, sig) {\n  const fields = [formatNumber(tx.nonce || 0, \"nonce\"), formatNumber(tx.gasPrice || 0, \"gasPrice\"), formatNumber(tx.gasLimit || 0, \"gasLimit\"), tx.to != null ? (0, index_js_1.getAddress)(tx.to) : \"0x\", formatNumber(tx.value || 0, \"value\"), tx.data || \"0x\"];\n  let chainId = BN_0;\n  if (tx.chainId != null) {\n    // A chainId was provided; if non-zero we'll use EIP-155\n    chainId = (0, index_js_3.getBigInt)(tx.chainId, \"tx.chainId\");\n    // We have a chainId in the tx and an EIP-155 v in the signature,\n    // make sure they agree with each other\n    (0, index_js_3.assertArgument)(!sig || sig.networkV == null || sig.legacyChainId === chainId, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n  } else if (sig) {\n    // No chainId provided, but the signature is signing with EIP-155; derive chainId\n    const legacy = sig.legacyChainId;\n    if (legacy != null) {\n      chainId = legacy;\n    }\n  }\n  // Requesting an unsigned transaction\n  if (!sig) {\n    // We have an EIP-155 transaction (chainId was specified and non-zero)\n    if (chainId !== BN_0) {\n      fields.push((0, index_js_3.toBeArray)(chainId));\n      fields.push(\"0x\");\n      fields.push(\"0x\");\n    }\n    return (0, index_js_3.encodeRlp)(fields);\n  }\n  // We pushed a chainId and null r, s on for hashing only; remove those\n  let v = BigInt(27 + sig.yParity);\n  if (chainId !== BN_0) {\n    v = index_js_2.Signature.getChainIdV(chainId, sig.v);\n  } else if (BigInt(sig.v) !== v) {\n    (0, index_js_3.assertArgument)(false, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n  }\n  fields.push((0, index_js_3.toBeArray)(v));\n  fields.push((0, index_js_3.toBeArray)(sig.r));\n  fields.push((0, index_js_3.toBeArray)(sig.s));\n  return (0, index_js_3.encodeRlp)(fields);\n}\nfunction _parseEipSignature(tx, fields, serialize) {\n  let yParity;\n  try {\n    yParity = handleNumber(fields[0], \"yParity\");\n    if (yParity !== 0 && yParity !== 1) {\n      throw new Error(\"bad yParity\");\n    }\n  } catch (error) {\n    (0, index_js_3.assertArgument)(false, \"invalid yParity\", \"yParity\", fields[0]);\n  }\n  const r = (0, index_js_3.zeroPadValue)(fields[1], 32);\n  const s = (0, index_js_3.zeroPadValue)(fields[2], 32);\n  const signature = index_js_2.Signature.from({\n    r,\n    s,\n    yParity\n  });\n  tx.signature = signature;\n}\nfunction _parseEip1559(data) {\n  const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));\n  (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), \"invalid field count for transaction type: 2\", \"data\", (0, index_js_3.hexlify)(data));\n  const maxPriorityFeePerGas = handleUint(fields[2], \"maxPriorityFeePerGas\");\n  const maxFeePerGas = handleUint(fields[3], \"maxFeePerGas\");\n  const tx = {\n    type: 2,\n    chainId: handleUint(fields[0], \"chainId\"),\n    nonce: handleNumber(fields[1], \"nonce\"),\n    maxPriorityFeePerGas: maxPriorityFeePerGas,\n    maxFeePerGas: maxFeePerGas,\n    gasPrice: null,\n    gasLimit: handleUint(fields[4], \"gasLimit\"),\n    to: handleAddress(fields[5]),\n    value: handleUint(fields[6], \"value\"),\n    data: (0, index_js_3.hexlify)(fields[7]),\n    accessList: handleAccessList(fields[8], \"accessList\")\n  };\n  // Unsigned EIP-1559 Transaction\n  if (fields.length === 9) {\n    return tx;\n  }\n  tx.hash = (0, index_js_2.keccak256)(data);\n  _parseEipSignature(tx, fields.slice(9), _serializeEip1559);\n  return tx;\n}\nfunction _serializeEip1559(tx, sig) {\n  const fields = [formatNumber(tx.chainId || 0, \"chainId\"), formatNumber(tx.nonce || 0, \"nonce\"), formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"), formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"), formatNumber(tx.gasLimit || 0, \"gasLimit\"), tx.to != null ? (0, index_js_1.getAddress)(tx.to) : \"0x\", formatNumber(tx.value || 0, \"value\"), tx.data || \"0x\", formatAccessList(tx.accessList || [])];\n  if (sig) {\n    fields.push(formatNumber(sig.yParity, \"yParity\"));\n    fields.push((0, index_js_3.toBeArray)(sig.r));\n    fields.push((0, index_js_3.toBeArray)(sig.s));\n  }\n  return (0, index_js_3.concat)([\"0x02\", (0, index_js_3.encodeRlp)(fields)]);\n}\nfunction _parseEip2930(data) {\n  const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));\n  (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), \"invalid field count for transaction type: 1\", \"data\", (0, index_js_3.hexlify)(data));\n  const tx = {\n    type: 1,\n    chainId: handleUint(fields[0], \"chainId\"),\n    nonce: handleNumber(fields[1], \"nonce\"),\n    gasPrice: handleUint(fields[2], \"gasPrice\"),\n    gasLimit: handleUint(fields[3], \"gasLimit\"),\n    to: handleAddress(fields[4]),\n    value: handleUint(fields[5], \"value\"),\n    data: (0, index_js_3.hexlify)(fields[6]),\n    accessList: handleAccessList(fields[7], \"accessList\")\n  };\n  // Unsigned EIP-2930 Transaction\n  if (fields.length === 8) {\n    return tx;\n  }\n  tx.hash = (0, index_js_2.keccak256)(data);\n  _parseEipSignature(tx, fields.slice(8), _serializeEip2930);\n  return tx;\n}\nfunction _serializeEip2930(tx, sig) {\n  const fields = [formatNumber(tx.chainId || 0, \"chainId\"), formatNumber(tx.nonce || 0, \"nonce\"), formatNumber(tx.gasPrice || 0, \"gasPrice\"), formatNumber(tx.gasLimit || 0, \"gasLimit\"), tx.to != null ? (0, index_js_1.getAddress)(tx.to) : \"0x\", formatNumber(tx.value || 0, \"value\"), tx.data || \"0x\", formatAccessList(tx.accessList || [])];\n  if (sig) {\n    fields.push(formatNumber(sig.yParity, \"recoveryParam\"));\n    fields.push((0, index_js_3.toBeArray)(sig.r));\n    fields.push((0, index_js_3.toBeArray)(sig.s));\n  }\n  return (0, index_js_3.concat)([\"0x01\", (0, index_js_3.encodeRlp)(fields)]);\n}\n/**\n *  A **Transaction** describes an operation to be executed on\n *  Ethereum by an Externally Owned Account (EOA). It includes\n *  who (the [[to]] address), what (the [[data]]) and how much (the\n *  [[value]] in ether) the operation should entail.\n *\n *  @example:\n *    tx = new Transaction()\n *    //_result:\n *\n *    tx.data = \"0x1234\";\n *    //_result:\n */\nclass Transaction {\n  #type;\n  #to;\n  #data;\n  #nonce;\n  #gasLimit;\n  #gasPrice;\n  #maxPriorityFeePerGas;\n  #maxFeePerGas;\n  #value;\n  #chainId;\n  #sig;\n  #accessList;\n  /**\n   *  The transaction type.\n   *\n   *  If null, the type will be automatically inferred based on\n   *  explicit properties.\n   */\n  get type() {\n    return this.#type;\n  }\n  set type(value) {\n    switch (value) {\n      case null:\n        this.#type = null;\n        break;\n      case 0:\n      case \"legacy\":\n        this.#type = 0;\n        break;\n      case 1:\n      case \"berlin\":\n      case \"eip-2930\":\n        this.#type = 1;\n        break;\n      case 2:\n      case \"london\":\n      case \"eip-1559\":\n        this.#type = 2;\n        break;\n      default:\n        (0, index_js_3.assertArgument)(false, \"unsupported transaction type\", \"type\", value);\n    }\n  }\n  /**\n   *  The name of the transaction type.\n   */\n  get typeName() {\n    switch (this.type) {\n      case 0:\n        return \"legacy\";\n      case 1:\n        return \"eip-2930\";\n      case 2:\n        return \"eip-1559\";\n    }\n    return null;\n  }\n  /**\n   *  The ``to`` address for the transaction or ``null`` if the\n   *  transaction is an ``init`` transaction.\n   */\n  get to() {\n    return this.#to;\n  }\n  set to(value) {\n    this.#to = value == null ? null : (0, index_js_1.getAddress)(value);\n  }\n  /**\n   *  The transaction nonce.\n   */\n  get nonce() {\n    return this.#nonce;\n  }\n  set nonce(value) {\n    this.#nonce = (0, index_js_3.getNumber)(value, \"value\");\n  }\n  /**\n   *  The gas limit.\n   */\n  get gasLimit() {\n    return this.#gasLimit;\n  }\n  set gasLimit(value) {\n    this.#gasLimit = (0, index_js_3.getBigInt)(value);\n  }\n  /**\n   *  The gas price.\n   *\n   *  On legacy networks this defines the fee that will be paid. On\n   *  EIP-1559 networks, this should be ``null``.\n   */\n  get gasPrice() {\n    const value = this.#gasPrice;\n    if (value == null && (this.type === 0 || this.type === 1)) {\n      return BN_0;\n    }\n    return value;\n  }\n  set gasPrice(value) {\n    this.#gasPrice = value == null ? null : (0, index_js_3.getBigInt)(value, \"gasPrice\");\n  }\n  /**\n   *  The maximum priority fee per unit of gas to pay. On legacy\n   *  networks this should be ``null``.\n   */\n  get maxPriorityFeePerGas() {\n    const value = this.#maxPriorityFeePerGas;\n    if (value == null) {\n      if (this.type === 2) {\n        return BN_0;\n      }\n      return null;\n    }\n    return value;\n  }\n  set maxPriorityFeePerGas(value) {\n    this.#maxPriorityFeePerGas = value == null ? null : (0, index_js_3.getBigInt)(value, \"maxPriorityFeePerGas\");\n  }\n  /**\n   *  The maximum total fee per unit of gas to pay. On legacy\n   *  networks this should be ``null``.\n   */\n  get maxFeePerGas() {\n    const value = this.#maxFeePerGas;\n    if (value == null) {\n      if (this.type === 2) {\n        return BN_0;\n      }\n      return null;\n    }\n    return value;\n  }\n  set maxFeePerGas(value) {\n    this.#maxFeePerGas = value == null ? null : (0, index_js_3.getBigInt)(value, \"maxFeePerGas\");\n  }\n  /**\n   *  The transaction data. For ``init`` transactions this is the\n   *  deployment code.\n   */\n  get data() {\n    return this.#data;\n  }\n  set data(value) {\n    this.#data = (0, index_js_3.hexlify)(value);\n  }\n  /**\n   *  The amount of ether to send in this transactions.\n   */\n  get value() {\n    return this.#value;\n  }\n  set value(value) {\n    this.#value = (0, index_js_3.getBigInt)(value, \"value\");\n  }\n  /**\n   *  The chain ID this transaction is valid on.\n   */\n  get chainId() {\n    return this.#chainId;\n  }\n  set chainId(value) {\n    this.#chainId = (0, index_js_3.getBigInt)(value);\n  }\n  /**\n   *  If signed, the signature for this transaction.\n   */\n  get signature() {\n    return this.#sig || null;\n  }\n  set signature(value) {\n    this.#sig = value == null ? null : index_js_2.Signature.from(value);\n  }\n  /**\n   *  The access list.\n   *\n   *  An access list permits discounted (but pre-paid) access to\n   *  bytecode and state variable access within contract execution.\n   */\n  get accessList() {\n    const value = this.#accessList || null;\n    if (value == null) {\n      if (this.type === 1 || this.type === 2) {\n        return [];\n      }\n      return null;\n    }\n    return value;\n  }\n  set accessList(value) {\n    this.#accessList = value == null ? null : (0, accesslist_js_1.accessListify)(value);\n  }\n  /**\n   *  Creates a new Transaction with default values.\n   */\n  constructor() {\n    this.#type = null;\n    this.#to = null;\n    this.#nonce = 0;\n    this.#gasLimit = BigInt(0);\n    this.#gasPrice = null;\n    this.#maxPriorityFeePerGas = null;\n    this.#maxFeePerGas = null;\n    this.#data = \"0x\";\n    this.#value = BigInt(0);\n    this.#chainId = BigInt(0);\n    this.#sig = null;\n    this.#accessList = null;\n  }\n  /**\n   *  The transaction hash, if signed. Otherwise, ``null``.\n   */\n  get hash() {\n    if (this.signature == null) {\n      return null;\n    }\n    return (0, index_js_2.keccak256)(this.serialized);\n  }\n  /**\n   *  The pre-image hash of this transaction.\n   *\n   *  This is the digest that a [[Signer]] must sign to authorize\n   *  this transaction.\n   */\n  get unsignedHash() {\n    return (0, index_js_2.keccak256)(this.unsignedSerialized);\n  }\n  /**\n   *  The sending address, if signed. Otherwise, ``null``.\n   */\n  get from() {\n    if (this.signature == null) {\n      return null;\n    }\n    return (0, address_js_1.recoverAddress)(this.unsignedHash, this.signature);\n  }\n  /**\n   *  The public key of the sender, if signed. Otherwise, ``null``.\n   */\n  get fromPublicKey() {\n    if (this.signature == null) {\n      return null;\n    }\n    return index_js_2.SigningKey.recoverPublicKey(this.unsignedHash, this.signature);\n  }\n  /**\n   *  Returns true if signed.\n   *\n   *  This provides a Type Guard that properties requiring a signed\n   *  transaction are non-null.\n   */\n  isSigned() {\n    //isSigned(): this is SignedTransaction {\n    return this.signature != null;\n  }\n  /**\n   *  The serialized transaction.\n   *\n   *  This throws if the transaction is unsigned. For the pre-image,\n   *  use [[unsignedSerialized]].\n   */\n  get serialized() {\n    (0, index_js_3.assert)(this.signature != null, \"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized\", \"UNSUPPORTED_OPERATION\", {\n      operation: \".serialized\"\n    });\n    switch (this.inferType()) {\n      case 0:\n        return _serializeLegacy(this, this.signature);\n      case 1:\n        return _serializeEip2930(this, this.signature);\n      case 2:\n        return _serializeEip1559(this, this.signature);\n    }\n    (0, index_js_3.assert)(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n      operation: \".serialized\"\n    });\n  }\n  /**\n   *  The transaction pre-image.\n   *\n   *  The hash of this is the digest which needs to be signed to\n   *  authorize this transaction.\n   */\n  get unsignedSerialized() {\n    switch (this.inferType()) {\n      case 0:\n        return _serializeLegacy(this);\n      case 1:\n        return _serializeEip2930(this);\n      case 2:\n        return _serializeEip1559(this);\n    }\n    (0, index_js_3.assert)(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n      operation: \".unsignedSerialized\"\n    });\n  }\n  /**\n   *  Return the most \"likely\" type; currently the highest\n   *  supported transaction type.\n   */\n  inferType() {\n    return this.inferTypes().pop();\n  }\n  /**\n   *  Validates the explicit properties and returns a list of compatible\n   *  transaction types.\n   */\n  inferTypes() {\n    // Checks that there are no conflicting properties set\n    const hasGasPrice = this.gasPrice != null;\n    const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;\n    const hasAccessList = this.accessList != null;\n    //if (hasGasPrice && hasFee) {\n    //    throw new Error(\"transaction cannot have gasPrice and maxFeePerGas\");\n    //}\n    if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {\n      (0, index_js_3.assert)(this.maxFeePerGas >= this.maxPriorityFeePerGas, \"priorityFee cannot be more than maxFee\", \"BAD_DATA\", {\n        value: this\n      });\n    }\n    //if (this.type === 2 && hasGasPrice) {\n    //    throw new Error(\"eip-1559 transaction cannot have gasPrice\");\n    //}\n    (0, index_js_3.assert)(!hasFee || this.type !== 0 && this.type !== 1, \"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas\", \"BAD_DATA\", {\n      value: this\n    });\n    (0, index_js_3.assert)(this.type !== 0 || !hasAccessList, \"legacy transaction cannot have accessList\", \"BAD_DATA\", {\n      value: this\n    });\n    const types = [];\n    // Explicit type\n    if (this.type != null) {\n      types.push(this.type);\n    } else {\n      if (hasFee) {\n        types.push(2);\n      } else if (hasGasPrice) {\n        types.push(1);\n        if (!hasAccessList) {\n          types.push(0);\n        }\n      } else if (hasAccessList) {\n        types.push(1);\n        types.push(2);\n      } else {\n        types.push(0);\n        types.push(1);\n        types.push(2);\n      }\n    }\n    types.sort();\n    return types;\n  }\n  /**\n   *  Returns true if this transaction is a legacy transaction (i.e.\n   *  ``type === 0``).\n   *\n   *  This provides a Type Guard that the related properties are\n   *  non-null.\n   */\n  isLegacy() {\n    return this.type === 0;\n  }\n  /**\n   *  Returns true if this transaction is berlin hardform transaction (i.e.\n   *  ``type === 1``).\n   *\n   *  This provides a Type Guard that the related properties are\n   *  non-null.\n   */\n  isBerlin() {\n    return this.type === 1;\n  }\n  /**\n   *  Returns true if this transaction is london hardform transaction (i.e.\n   *  ``type === 2``).\n   *\n   *  This provides a Type Guard that the related properties are\n   *  non-null.\n   */\n  isLondon() {\n    return this.type === 2;\n  }\n  /**\n   *  Create a copy of this transaciton.\n   */\n  clone() {\n    return Transaction.from(this);\n  }\n  /**\n   *  Return a JSON-friendly object.\n   */\n  toJSON() {\n    const s = v => {\n      if (v == null) {\n        return null;\n      }\n      return v.toString();\n    };\n    return {\n      type: this.type,\n      to: this.to,\n      //            from: this.from,\n      data: this.data,\n      nonce: this.nonce,\n      gasLimit: s(this.gasLimit),\n      gasPrice: s(this.gasPrice),\n      maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),\n      maxFeePerGas: s(this.maxFeePerGas),\n      value: s(this.value),\n      chainId: s(this.chainId),\n      sig: this.signature ? this.signature.toJSON() : null,\n      accessList: this.accessList\n    };\n  }\n  /**\n   *  Create a **Transaction** from a serialized transaction or a\n   *  Transaction-like object.\n   */\n  static from(tx) {\n    if (tx == null) {\n      return new Transaction();\n    }\n    if (typeof tx === \"string\") {\n      const payload = (0, index_js_3.getBytes)(tx);\n      if (payload[0] >= 0x7f) {\n        // @TODO: > vs >= ??\n        return Transaction.from(_parseLegacy(payload));\n      }\n      switch (payload[0]) {\n        case 1:\n          return Transaction.from(_parseEip2930(payload));\n        case 2:\n          return Transaction.from(_parseEip1559(payload));\n      }\n      (0, index_js_3.assert)(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"from\"\n      });\n    }\n    const result = new Transaction();\n    if (tx.type != null) {\n      result.type = tx.type;\n    }\n    if (tx.to != null) {\n      result.to = tx.to;\n    }\n    if (tx.nonce != null) {\n      result.nonce = tx.nonce;\n    }\n    if (tx.gasLimit != null) {\n      result.gasLimit = tx.gasLimit;\n    }\n    if (tx.gasPrice != null) {\n      result.gasPrice = tx.gasPrice;\n    }\n    if (tx.maxPriorityFeePerGas != null) {\n      result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;\n    }\n    if (tx.maxFeePerGas != null) {\n      result.maxFeePerGas = tx.maxFeePerGas;\n    }\n    if (tx.data != null) {\n      result.data = tx.data;\n    }\n    if (tx.value != null) {\n      result.value = tx.value;\n    }\n    if (tx.chainId != null) {\n      result.chainId = tx.chainId;\n    }\n    if (tx.signature != null) {\n      result.signature = index_js_2.Signature.from(tx.signature);\n    }\n    if (tx.accessList != null) {\n      result.accessList = tx.accessList;\n    }\n    if (tx.hash != null) {\n      (0, index_js_3.assertArgument)(result.isSigned(), \"unsigned transaction cannot define hash\", \"tx\", tx);\n      (0, index_js_3.assertArgument)(result.hash === tx.hash, \"hash mismatch\", \"tx\", tx);\n    }\n    if (tx.from != null) {\n      (0, index_js_3.assertArgument)(result.isSigned(), \"unsigned transaction cannot define from\", \"tx\", tx);\n      (0, index_js_3.assertArgument)(result.from.toLowerCase() === (tx.from || \"\").toLowerCase(), \"from mismatch\", \"tx\", tx);\n    }\n    return result;\n  }\n}\nexports.Transaction = Transaction;","map":{"version":3,"mappings":"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","names":["BN_0","BigInt","BN_2","BN_27","BN_28","BN_35","BN_MAX_UINT","handleAddress","value","handleAccessList","param","error","message","handleNumber","_value","handleUint","formatNumber","name","result","length","formatAccessList","map","set","address","storageKeys","_parseLegacy","data","fields","Array","isArray","tx","type","nonce","gasPrice","gasLimit","to","chainId","v","r","s","signature","index_js_2","from","hash","_serializeLegacy","sig","networkV","legacyChainId","legacy","push","yParity","getChainIdV","_parseEipSignature","serialize","Error","_parseEip1559","slice","maxPriorityFeePerGas","maxFeePerGas","accessList","_serializeEip1559","_parseEip2930","_serializeEip2930","Transaction","typeName","constructor","serialized","unsignedHash","unsignedSerialized","fromPublicKey","recoverPublicKey","isSigned","operation","inferType","inferTypes","pop","hasGasPrice","hasFee","hasAccessList","types","sort","isLegacy","isBerlin","isLondon","clone","toJSON","toString","payload","toLowerCase","exports"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/transaction/transaction.ts"],"sourcesContent":["\nimport { getAddress } from \"../address/index.js\";\nimport { keccak256, Signature, SigningKey } from \"../crypto/index.js\";\nimport {\n    concat, decodeRlp, encodeRlp, getBytes, getBigInt, getNumber, hexlify,\n    assert, assertArgument, toBeArray, zeroPadValue\n} from \"../utils/index.js\";\n\nimport { accessListify } from \"./accesslist.js\";\nimport { recoverAddress } from \"./address.js\";\n\nimport type { BigNumberish, BytesLike } from \"../utils/index.js\";\nimport type { SignatureLike } from \"../crypto/index.js\";\n\nimport type { AccessList, AccessListish } from \"./index.js\";\n\n\nconst BN_0 = BigInt(0);\nconst BN_2 = BigInt(2);\nconst BN_27 = BigInt(27)\nconst BN_28 = BigInt(28)\nconst BN_35 = BigInt(35);\nconst BN_MAX_UINT = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n\nexport interface TransactionLike<A = string> {\n    /**\n     *  The type.\n     */\n    type?: null | number;\n\n    /**\n     *  The recipient address or ``null`` for an ``init`` transaction.\n     */\n    to?: null | A;\n\n    /**\n     *  The sender.\n     */\n    from?: null | A;\n\n    /**\n     *  The nonce.\n     */\n    nonce?: null | number;\n\n    /**\n     *  The maximum amount of gas that can be used.\n     */\n    gasLimit?: null | BigNumberish;\n\n    /**\n     *  The gas price for legacy and berlin transactions.\n     */\n    gasPrice?: null | BigNumberish;\n\n    /**\n     *  The maximum priority fee per gas for london transactions.\n     */\n    maxPriorityFeePerGas?: null | BigNumberish;\n\n    /**\n     *  The maximum total fee per gas for london transactions.\n     */\n    maxFeePerGas?: null | BigNumberish;\n\n    /**\n     *  The data.\n     */\n    data?: null | string;\n\n    /**\n     *  The value (in wei) to send.\n     */\n    value?: null | BigNumberish;\n\n    /**\n     *  The chain ID the transaction is valid on.\n     */\n    chainId?: null | BigNumberish;\n\n    /**\n     *  The transaction hash.\n     */\n    hash?: null | string;\n\n    /**\n     *  The signature provided by the sender.\n     */\n    signature?: null | SignatureLike;\n\n    /**\n     *  The access list for berlin and london transactions.\n     */\n    accessList?: null | AccessListish;\n}\n\nfunction handleAddress(value: string): null | string {\n    if (value === \"0x\") { return null; }\n    return getAddress(value);\n}\n\nfunction handleAccessList(value: any, param: string): AccessList {\n    try {\n        return accessListify(value);\n    } catch (error: any) {\n        assertArgument(false, error.message, param, value);\n    }\n}\n\nfunction handleNumber(_value: string, param: string): number {\n    if (_value === \"0x\") { return 0; }\n    return getNumber(_value, param);\n}\n\nfunction handleUint(_value: string, param: string): bigint {\n    if (_value === \"0x\") { return BN_0; }\n    const value = getBigInt(_value, param);\n    assertArgument(value <= BN_MAX_UINT, \"value exceeds uint size\", param, value);\n    return value;\n}\n\nfunction formatNumber(_value: BigNumberish, name: string): Uint8Array {\n    const value = getBigInt(_value, \"value\");\n    const result = toBeArray(value);\n    assertArgument(result.length <= 32, `value too large`, `tx.${ name }`, value);\n    return result;\n}\n\nfunction formatAccessList(value: AccessListish): Array<[ string, Array<string> ]> {\n    return accessListify(value).map((set) => [ set.address, set.storageKeys ]);\n}\n\nfunction _parseLegacy(data: Uint8Array): TransactionLike {\n    const fields: any = decodeRlp(data);\n\n    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 6),\n        \"invalid field count for legacy transaction\", \"data\", data);\n\n    const tx: TransactionLike = {\n        type:     0,\n        nonce:    handleNumber(fields[0], \"nonce\"),\n        gasPrice: handleUint(fields[1], \"gasPrice\"),\n        gasLimit: handleUint(fields[2], \"gasLimit\"),\n        to:       handleAddress(fields[3]),\n        value:    handleUint(fields[4], \"value\"),\n        data:     hexlify(fields[5]),\n        chainId:  BN_0\n    };\n\n    // Legacy unsigned transaction\n    if (fields.length === 6) { return tx; }\n\n    const v = handleUint(fields[6], \"v\");\n    const r = handleUint(fields[7], \"r\");\n    const s = handleUint(fields[8], \"s\");\n\n    if (r === BN_0 && s === BN_0) {\n        // EIP-155 unsigned transaction\n        tx.chainId = v;\n\n    } else {\n\n        // Compute the EIP-155 chain ID (or 0 for legacy)\n        let chainId = (v - BN_35) / BN_2;\n        if (chainId < BN_0) { chainId = BN_0; }\n        tx.chainId = chainId\n\n        // Signed Legacy Transaction\n        assertArgument(chainId !== BN_0 || (v === BN_27 || v === BN_28), \"non-canonical legacy v\", \"v\", fields[6]);\n\n        tx.signature = Signature.from({\n            r: zeroPadValue(fields[7], 32),\n            s: zeroPadValue(fields[8], 32),\n            v\n        });\n\n        tx.hash = keccak256(data);\n    }\n\n    return tx;\n}\n\nfunction _serializeLegacy(tx: Transaction, sig?: Signature): string {\n    const fields: Array<any> = [\n        formatNumber(tx.nonce || 0, \"nonce\"),\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\n        formatNumber(tx.gasLimit || 0, \"gasLimit\"),\n        ((tx.to != null) ? getAddress(tx.to): \"0x\"),\n        formatNumber(tx.value || 0, \"value\"),\n        (tx.data || \"0x\"),\n    ];\n\n    let chainId = BN_0;\n    if (tx.chainId != null) {\n        // A chainId was provided; if non-zero we'll use EIP-155\n        chainId = getBigInt(tx.chainId, \"tx.chainId\");\n\n        // We have a chainId in the tx and an EIP-155 v in the signature,\n        // make sure they agree with each other\n        assertArgument(!sig || sig.networkV == null || sig.legacyChainId === chainId,\n             \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n\n    } else if (sig) {\n        // No chainId provided, but the signature is signing with EIP-155; derive chainId\n        const legacy = sig.legacyChainId;\n        if (legacy != null) { chainId = legacy; }\n    }\n\n    // Requesting an unsigned transaction\n    if (!sig) {\n        // We have an EIP-155 transaction (chainId was specified and non-zero)\n        if (chainId !== BN_0) {\n            fields.push(toBeArray(chainId));\n            fields.push(\"0x\");\n            fields.push(\"0x\");\n        }\n\n        return encodeRlp(fields);\n    }\n\n    // We pushed a chainId and null r, s on for hashing only; remove those\n    let v = BigInt(27 + sig.yParity);\n    if (chainId !== BN_0) {\n        v = Signature.getChainIdV(chainId, sig.v);\n    } else if (BigInt(sig.v) !== v) {\n        assertArgument(false, \"tx.chainId/sig.v mismatch\", \"sig\", sig);\n    }\n\n    fields.push(toBeArray(v));\n    fields.push(toBeArray(sig.r));\n    fields.push(toBeArray(sig.s));\n\n    return encodeRlp(fields);\n}\n\nfunction _parseEipSignature(tx: TransactionLike, fields: Array<string>, serialize: (tx: TransactionLike) => string): void {\n    let yParity: number;\n    try {\n        yParity = handleNumber(fields[0], \"yParity\");\n        if (yParity !== 0 && yParity !== 1) { throw new Error(\"bad yParity\"); }\n    } catch (error) {\n        assertArgument(false, \"invalid yParity\", \"yParity\", fields[0]);\n    }\n\n    const r = zeroPadValue(fields[1], 32);\n    const s = zeroPadValue(fields[2], 32);\n\n    const signature = Signature.from({ r, s, yParity });\n    tx.signature = signature;\n}\n\nfunction _parseEip1559(data: Uint8Array): TransactionLike {\n    const fields: any = decodeRlp(getBytes(data).slice(1));\n\n    assertArgument(Array.isArray(fields) && (fields.length === 9 || fields.length === 12),\n        \"invalid field count for transaction type: 2\", \"data\", hexlify(data));\n\n    const maxPriorityFeePerGas = handleUint(fields[2], \"maxPriorityFeePerGas\");\n    const maxFeePerGas = handleUint(fields[3], \"maxFeePerGas\");\n    const tx: TransactionLike = {\n        type:                  2,\n        chainId:               handleUint(fields[0], \"chainId\"),\n        nonce:                 handleNumber(fields[1], \"nonce\"),\n        maxPriorityFeePerGas:  maxPriorityFeePerGas,\n        maxFeePerGas:          maxFeePerGas,\n        gasPrice:              null,\n        gasLimit:              handleUint(fields[4], \"gasLimit\"),\n        to:                    handleAddress(fields[5]),\n        value:                 handleUint(fields[6], \"value\"),\n        data:                  hexlify(fields[7]),\n        accessList:            handleAccessList(fields[8], \"accessList\"),\n    };\n\n    // Unsigned EIP-1559 Transaction\n    if (fields.length === 9) { return tx; }\n\n    tx.hash = keccak256(data);\n\n    _parseEipSignature(tx, fields.slice(9), _serializeEip1559);\n\n    return tx;\n}\n\nfunction _serializeEip1559(tx: TransactionLike, sig?: Signature): string {\n    const fields: Array<any> = [\n        formatNumber(tx.chainId || 0, \"chainId\"),\n        formatNumber(tx.nonce || 0, \"nonce\"),\n        formatNumber(tx.maxPriorityFeePerGas || 0, \"maxPriorityFeePerGas\"),\n        formatNumber(tx.maxFeePerGas || 0, \"maxFeePerGas\"),\n        formatNumber(tx.gasLimit || 0, \"gasLimit\"),\n        ((tx.to != null) ? getAddress(tx.to): \"0x\"),\n        formatNumber(tx.value || 0, \"value\"),\n        (tx.data || \"0x\"),\n        (formatAccessList(tx.accessList || []))\n    ];\n\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"yParity\"));\n        fields.push(toBeArray(sig.r));\n        fields.push(toBeArray(sig.s));\n    }\n\n    return concat([ \"0x02\", encodeRlp(fields)]);\n}\n\nfunction _parseEip2930(data: Uint8Array): TransactionLike {\n    const fields: any = decodeRlp(getBytes(data).slice(1));\n\n    assertArgument(Array.isArray(fields) && (fields.length === 8 || fields.length === 11),\n        \"invalid field count for transaction type: 1\", \"data\", hexlify(data));\n\n    const tx: TransactionLike = {\n        type:       1,\n        chainId:    handleUint(fields[0], \"chainId\"),\n        nonce:      handleNumber(fields[1], \"nonce\"),\n        gasPrice:   handleUint(fields[2], \"gasPrice\"),\n        gasLimit:   handleUint(fields[3], \"gasLimit\"),\n        to:         handleAddress(fields[4]),\n        value:      handleUint(fields[5], \"value\"),\n        data:       hexlify(fields[6]),\n        accessList: handleAccessList(fields[7], \"accessList\")\n    };\n\n    // Unsigned EIP-2930 Transaction\n    if (fields.length === 8) { return tx; }\n\n    tx.hash = keccak256(data);\n\n    _parseEipSignature(tx, fields.slice(8), _serializeEip2930);\n\n    return tx;\n}\n\nfunction _serializeEip2930(tx: TransactionLike, sig?: Signature): string {\n    const fields: any = [\n        formatNumber(tx.chainId || 0, \"chainId\"),\n        formatNumber(tx.nonce || 0, \"nonce\"),\n        formatNumber(tx.gasPrice || 0, \"gasPrice\"),\n        formatNumber(tx.gasLimit || 0, \"gasLimit\"),\n        ((tx.to != null) ? getAddress(tx.to): \"0x\"),\n        formatNumber(tx.value || 0, \"value\"),\n        (tx.data || \"0x\"),\n        (formatAccessList(tx.accessList || []))\n    ];\n\n    if (sig) {\n        fields.push(formatNumber(sig.yParity, \"recoveryParam\"));\n        fields.push(toBeArray(sig.r));\n        fields.push(toBeArray(sig.s));\n    }\n\n    return concat([ \"0x01\", encodeRlp(fields)]);\n}\n\n/**\n *  A **Transaction** describes an operation to be executed on\n *  Ethereum by an Externally Owned Account (EOA). It includes\n *  who (the [[to]] address), what (the [[data]]) and how much (the\n *  [[value]] in ether) the operation should entail.\n *\n *  @example:\n *    tx = new Transaction()\n *    //_result:\n *\n *    tx.data = \"0x1234\";\n *    //_result:\n */\nexport class Transaction implements TransactionLike<string> {\n    #type: null | number;\n    #to: null | string;\n    #data: string;\n    #nonce: number;\n    #gasLimit: bigint;\n    #gasPrice: null | bigint;\n    #maxPriorityFeePerGas: null | bigint;\n    #maxFeePerGas: null | bigint;\n    #value: bigint;\n    #chainId: bigint;\n    #sig: null | Signature;\n    #accessList: null | AccessList;\n\n    /**\n     *  The transaction type.\n     *\n     *  If null, the type will be automatically inferred based on\n     *  explicit properties.\n     */\n    get type(): null | number { return this.#type; }\n    set type(value: null | number | string) {\n        switch (value) {\n            case null:\n                this.#type = null;\n                break;\n            case 0: case \"legacy\":\n                this.#type = 0;\n                break;\n            case 1: case \"berlin\": case \"eip-2930\":\n                this.#type = 1;\n                break;\n            case 2: case \"london\": case \"eip-1559\":\n                this.#type = 2;\n                break;\n            default:\n                assertArgument(false, \"unsupported transaction type\", \"type\", value);\n        }\n    }\n\n    /**\n     *  The name of the transaction type.\n     */\n    get typeName(): null | string {\n        switch (this.type) {\n            case 0: return \"legacy\";\n            case 1: return \"eip-2930\";\n            case 2: return \"eip-1559\";\n        }\n\n        return null;\n    }\n\n    /**\n     *  The ``to`` address for the transaction or ``null`` if the\n     *  transaction is an ``init`` transaction.\n     */\n    get to(): null | string { return this.#to; }\n    set to(value: null | string) {\n        this.#to = (value == null) ? null: getAddress(value);\n    }\n\n    /**\n     *  The transaction nonce.\n     */\n    get nonce(): number { return this.#nonce; }\n    set nonce(value: BigNumberish) { this.#nonce = getNumber(value, \"value\"); }\n\n    /**\n     *  The gas limit.\n     */\n    get gasLimit(): bigint { return this.#gasLimit; }\n    set gasLimit(value: BigNumberish) { this.#gasLimit = getBigInt(value); }\n\n    /**\n     *  The gas price.\n     *\n     *  On legacy networks this defines the fee that will be paid. On\n     *  EIP-1559 networks, this should be ``null``.\n     */\n    get gasPrice(): null | bigint {\n        const value = this.#gasPrice;\n        if (value == null && (this.type === 0 || this.type === 1)) { return BN_0; }\n        return value;\n    }\n    set gasPrice(value: null | BigNumberish) {\n        this.#gasPrice = (value == null) ? null: getBigInt(value, \"gasPrice\");\n    }\n\n    /**\n     *  The maximum priority fee per unit of gas to pay. On legacy\n     *  networks this should be ``null``.\n     */\n    get maxPriorityFeePerGas(): null | bigint {\n        const value = this.#maxPriorityFeePerGas;\n        if (value == null) {\n            if (this.type === 2) { return BN_0; }\n            return null;\n        }\n        return value;\n    }\n    set maxPriorityFeePerGas(value: null | BigNumberish) {\n        this.#maxPriorityFeePerGas = (value == null) ? null: getBigInt(value, \"maxPriorityFeePerGas\");\n    }\n\n    /**\n     *  The maximum total fee per unit of gas to pay. On legacy\n     *  networks this should be ``null``.\n     */\n    get maxFeePerGas(): null | bigint {\n        const value = this.#maxFeePerGas;\n        if (value == null) {\n            if (this.type === 2) { return BN_0; }\n            return null;\n        }\n        return value;\n    }\n    set maxFeePerGas(value: null | BigNumberish) {\n        this.#maxFeePerGas = (value == null) ? null: getBigInt(value, \"maxFeePerGas\");\n    }\n\n    /**\n     *  The transaction data. For ``init`` transactions this is the\n     *  deployment code.\n     */\n    get data(): string { return this.#data; }\n    set data(value: BytesLike) { this.#data = hexlify(value); }\n\n    /**\n     *  The amount of ether to send in this transactions.\n     */\n    get value(): bigint { return this.#value; }\n    set value(value: BigNumberish) {\n        this.#value = getBigInt(value, \"value\");\n    }\n\n    /**\n     *  The chain ID this transaction is valid on.\n     */\n    get chainId(): bigint { return this.#chainId; }\n    set chainId(value: BigNumberish) { this.#chainId = getBigInt(value); }\n\n    /**\n     *  If signed, the signature for this transaction.\n     */\n    get signature(): null | Signature { return this.#sig || null; }\n    set signature(value: null | SignatureLike) {\n        this.#sig = (value == null) ? null: Signature.from(value);\n    }\n\n    /**\n     *  The access list.\n     *\n     *  An access list permits discounted (but pre-paid) access to\n     *  bytecode and state variable access within contract execution.\n     */\n    get accessList(): null | AccessList {\n        const value = this.#accessList || null;\n        if (value == null) {\n            if (this.type === 1 || this.type === 2) { return [ ]; }\n            return null;\n        }\n        return value;\n    }\n    set accessList(value: null | AccessListish) {\n        this.#accessList = (value == null) ? null: accessListify(value);\n    }\n\n    /**\n     *  Creates a new Transaction with default values.\n     */\n    constructor() {\n        this.#type = null;\n        this.#to = null;\n        this.#nonce = 0;\n        this.#gasLimit = BigInt(0);\n        this.#gasPrice = null;\n        this.#maxPriorityFeePerGas = null;\n        this.#maxFeePerGas = null;\n        this.#data = \"0x\";\n        this.#value = BigInt(0);\n        this.#chainId = BigInt(0);\n        this.#sig = null;\n        this.#accessList = null;\n    }\n\n    /**\n     *  The transaction hash, if signed. Otherwise, ``null``.\n     */\n    get hash(): null | string {\n        if (this.signature == null) { return null; }\n        return keccak256(this.serialized);\n    }\n\n    /**\n     *  The pre-image hash of this transaction.\n     *\n     *  This is the digest that a [[Signer]] must sign to authorize\n     *  this transaction.\n     */\n    get unsignedHash(): string {\n        return keccak256(this.unsignedSerialized);\n    }\n\n    /**\n     *  The sending address, if signed. Otherwise, ``null``.\n     */\n    get from(): null | string {\n        if (this.signature == null) { return null; }\n        return recoverAddress(this.unsignedHash, this.signature);\n    }\n\n    /**\n     *  The public key of the sender, if signed. Otherwise, ``null``.\n     */\n    get fromPublicKey(): null | string {\n        if (this.signature == null) { return null; }\n        return SigningKey.recoverPublicKey(this.unsignedHash, this.signature);\n    }\n\n    /**\n     *  Returns true if signed.\n     *\n     *  This provides a Type Guard that properties requiring a signed\n     *  transaction are non-null.\n     */\n    isSigned(): this is (Transaction & { type: number, typeName: string, from: string, signature: Signature }) {\n    //isSigned(): this is SignedTransaction {\n        return this.signature != null;\n    }\n\n    /**\n     *  The serialized transaction.\n     *\n     *  This throws if the transaction is unsigned. For the pre-image,\n     *  use [[unsignedSerialized]].\n     */\n    get serialized(): string {\n        assert(this.signature != null, \"cannot serialize unsigned transaction; maybe you meant .unsignedSerialized\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\"});\n\n        switch (this.inferType()) {\n            case 0:\n                return _serializeLegacy(this, this.signature);\n            case 1:\n                return _serializeEip2930(this, this.signature);\n            case 2:\n                return _serializeEip1559(this, this.signature);\n        }\n\n        assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \".serialized\" });\n    }\n\n    /**\n     *  The transaction pre-image.\n     *\n     *  The hash of this is the digest which needs to be signed to\n     *  authorize this transaction.\n     */\n    get unsignedSerialized(): string {\n        switch (this.inferType()) {\n            case 0:\n                return _serializeLegacy(this);\n            case 1:\n                return _serializeEip2930(this);\n            case 2:\n                return _serializeEip1559(this);\n        }\n\n        assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \".unsignedSerialized\" });\n    }\n\n    /**\n     *  Return the most \"likely\" type; currently the highest\n     *  supported transaction type.\n     */\n    inferType(): number {\n        return <number>(this.inferTypes().pop());\n    }\n\n    /**\n     *  Validates the explicit properties and returns a list of compatible\n     *  transaction types.\n     */\n    inferTypes(): Array<number> {\n\n        // Checks that there are no conflicting properties set\n        const hasGasPrice = this.gasPrice != null;\n        const hasFee = (this.maxFeePerGas != null || this.maxPriorityFeePerGas != null);\n        const hasAccessList = (this.accessList != null);\n\n        //if (hasGasPrice && hasFee) {\n        //    throw new Error(\"transaction cannot have gasPrice and maxFeePerGas\");\n        //}\n\n        if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {\n            assert(this.maxFeePerGas >= this.maxPriorityFeePerGas, \"priorityFee cannot be more than maxFee\", \"BAD_DATA\", { value: this });\n        }\n\n        //if (this.type === 2 && hasGasPrice) {\n        //    throw new Error(\"eip-1559 transaction cannot have gasPrice\");\n        //}\n\n        assert(!hasFee || (this.type !== 0 && this.type !== 1), \"transaction type cannot have maxFeePerGas or maxPriorityFeePerGas\", \"BAD_DATA\", { value: this });\n        assert(this.type !== 0 || !hasAccessList, \"legacy transaction cannot have accessList\", \"BAD_DATA\", { value: this })\n\n        const types: Array<number> = [ ];\n\n        // Explicit type\n        if (this.type != null) {\n            types.push(this.type);\n\n        } else {\n            if (hasFee) {\n                types.push(2);\n            } else if (hasGasPrice) {\n                types.push(1);\n                if (!hasAccessList) { types.push(0); }\n            } else if (hasAccessList) {\n                types.push(1);\n                types.push(2);\n            } else {\n                types.push(0);\n                types.push(1);\n                types.push(2);\n            }\n        }\n\n        types.sort();\n\n        return types;\n    }\n\n    /**\n     *  Returns true if this transaction is a legacy transaction (i.e.\n     *  ``type === 0``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isLegacy(): this is (Transaction & { type: 0, gasPrice: bigint }) {\n        return (this.type === 0);\n    }\n\n    /**\n     *  Returns true if this transaction is berlin hardform transaction (i.e.\n     *  ``type === 1``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isBerlin(): this is (Transaction & { type: 1, gasPrice: bigint, accessList: AccessList }) {\n        return (this.type === 1);\n    }\n\n    /**\n     *  Returns true if this transaction is london hardform transaction (i.e.\n     *  ``type === 2``).\n     *\n     *  This provides a Type Guard that the related properties are\n     *  non-null.\n     */\n    isLondon(): this is (Transaction & { type: 2, accessList: AccessList, maxFeePerGas: bigint, maxPriorityFeePerGas: bigint}) {\n        return (this.type === 2);\n    }\n\n    /**\n     *  Create a copy of this transaciton.\n     */\n    clone(): Transaction {\n        return Transaction.from(this);\n    }\n\n    /**\n     *  Return a JSON-friendly object.\n     */\n    toJSON(): any {\n        const s = (v: null | bigint) => {\n            if (v == null) { return null; }\n            return v.toString();\n        };\n\n        return {\n            type: this.type,\n            to: this.to,\n//            from: this.from,\n            data: this.data,\n            nonce: this.nonce,\n            gasLimit: s(this.gasLimit),\n            gasPrice: s(this.gasPrice),\n            maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),\n            maxFeePerGas: s(this.maxFeePerGas),\n            value: s(this.value),\n            chainId: s(this.chainId),\n            sig: this.signature ? this.signature.toJSON(): null,\n            accessList: this.accessList\n        };\n    }\n\n    /**\n     *  Create a **Transaction** from a serialized transaction or a\n     *  Transaction-like object.\n     */\n    static from(tx?: string | TransactionLike<string>): Transaction {\n        if (tx == null) { return new Transaction(); }\n\n        if (typeof(tx) === \"string\") {\n            const payload = getBytes(tx);\n\n            if (payload[0] >= 0x7f) { // @TODO: > vs >= ??\n                return Transaction.from(_parseLegacy(payload));\n            }\n\n            switch(payload[0]) {\n                case 1: return Transaction.from(_parseEip2930(payload));\n                case 2: return Transaction.from(_parseEip1559(payload));\n            }\n            assert(false, \"unsupported transaction type\", \"UNSUPPORTED_OPERATION\", { operation: \"from\" });\n        }\n\n        const result = new Transaction();\n        if (tx.type != null) { result.type = tx.type; }\n        if (tx.to != null) { result.to = tx.to; }\n        if (tx.nonce != null) { result.nonce = tx.nonce; }\n        if (tx.gasLimit != null) { result.gasLimit = tx.gasLimit; }\n        if (tx.gasPrice != null) { result.gasPrice = tx.gasPrice; }\n        if (tx.maxPriorityFeePerGas != null) { result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas; }\n        if (tx.maxFeePerGas != null) { result.maxFeePerGas = tx.maxFeePerGas; }\n        if (tx.data != null) { result.data = tx.data; }\n        if (tx.value != null) { result.value = tx.value; }\n        if (tx.chainId != null) { result.chainId = tx.chainId; }\n        if (tx.signature != null) { result.signature = Signature.from(tx.signature); }\n        if (tx.accessList != null) { result.accessList = tx.accessList; }\n\n        if (tx.hash != null) {\n            assertArgument(result.isSigned(), \"unsigned transaction cannot define hash\", \"tx\", tx);\n            assertArgument(result.hash === tx.hash, \"hash mismatch\", \"tx\", tx);\n        }\n\n        if (tx.from != null) {\n            assertArgument(result.isSigned(), \"unsigned transaction cannot define from\", \"tx\", tx);\n            assertArgument(result.from.toLowerCase() === (tx.from || \"\").toLowerCase(), \"from mismatch\", \"tx\", tx);\n        }\n\n        return result;\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}