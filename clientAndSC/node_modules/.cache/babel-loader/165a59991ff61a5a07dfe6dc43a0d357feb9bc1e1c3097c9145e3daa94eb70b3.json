{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.accountBodyToRLP = exports.accountBodyToSlim = exports.accountBodyFromSlim = exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;\nconst ethereumjs_rlp_1 = require(\"@nomicfoundation/ethereumjs-rlp\");\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nconst bytes_1 = require(\"./bytes\");\nconst constants_1 = require(\"./constants\");\nconst helpers_1 = require(\"./helpers\");\nconst internal_1 = require(\"./internal\");\nconst _0n = BigInt(0);\nclass Account {\n  /**\n   * This constructor assigns and validates the values.\n   * Use the static factory methods to assist in creating an Account from varying data types.\n   */\n  constructor() {\n    let nonce = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _0n;\n    let balance = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _0n;\n    let storageRoot = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : constants_1.KECCAK256_RLP;\n    let codeHash = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : constants_1.KECCAK256_NULL;\n    this.nonce = nonce;\n    this.balance = balance;\n    this.storageRoot = storageRoot;\n    this.codeHash = codeHash;\n    this._validate();\n  }\n  static fromAccountData(accountData) {\n    const {\n      nonce,\n      balance,\n      storageRoot,\n      codeHash\n    } = accountData;\n    return new Account(nonce !== undefined ? (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(nonce)) : undefined, balance !== undefined ? (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(balance)) : undefined, storageRoot !== undefined ? (0, bytes_1.toBuffer)(storageRoot) : undefined, codeHash !== undefined ? (0, bytes_1.toBuffer)(codeHash) : undefined);\n  }\n  static fromRlpSerializedAccount(serialized) {\n    const values = (0, bytes_1.arrToBufArr)(ethereumjs_rlp_1.RLP.decode(Uint8Array.from(serialized)));\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized account input. Must be array');\n    }\n    return this.fromValuesArray(values);\n  }\n  static fromValuesArray(values) {\n    const [nonce, balance, storageRoot, codeHash] = values;\n    return new Account((0, bytes_1.bufferToBigInt)(nonce), (0, bytes_1.bufferToBigInt)(balance), storageRoot, codeHash);\n  }\n  _validate() {\n    if (this.nonce < _0n) {\n      throw new Error('nonce must be greater than zero');\n    }\n    if (this.balance < _0n) {\n      throw new Error('balance must be greater than zero');\n    }\n    if (this.storageRoot.length !== 32) {\n      throw new Error('storageRoot must have a length of 32');\n    }\n    if (this.codeHash.length !== 32) {\n      throw new Error('codeHash must have a length of 32');\n    }\n  }\n  /**\n   * Returns a Buffer Array of the raw Buffers for the account, in order.\n   */\n  raw() {\n    return [(0, bytes_1.bigIntToUnpaddedBuffer)(this.nonce), (0, bytes_1.bigIntToUnpaddedBuffer)(this.balance), this.storageRoot, this.codeHash];\n  }\n  /**\n   * Returns the RLP serialization of the account as a `Buffer`.\n   */\n  serialize() {\n    return Buffer.from(ethereumjs_rlp_1.RLP.encode((0, bytes_1.bufArrToArr)(this.raw())));\n  }\n  /**\n   * Returns a `Boolean` determining if the account is a contract.\n   */\n  isContract() {\n    return !this.codeHash.equals(constants_1.KECCAK256_NULL);\n  }\n  /**\n   * Returns a `Boolean` determining if the account is empty complying to the definition of\n   * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n   * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n   */\n  isEmpty() {\n    return this.balance === _0n && this.nonce === _0n && this.codeHash.equals(constants_1.KECCAK256_NULL);\n  }\n}\nexports.Account = Account;\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nconst isValidAddress = function (hexAddress) {\n  try {\n    (0, helpers_1.assertIsString)(hexAddress);\n  } catch (e) {\n    return false;\n  }\n  return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\nexports.isValidAddress = isValidAddress;\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\nconst toChecksumAddress = function (hexAddress, eip1191ChainId) {\n  (0, helpers_1.assertIsHexString)(hexAddress);\n  const address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();\n  let prefix = '';\n  if (eip1191ChainId !== undefined) {\n    const chainId = (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(eip1191ChainId));\n    prefix = chainId.toString() + '0x';\n  }\n  const buf = Buffer.from(prefix + address, 'utf8');\n  const hash = (0, keccak_1.keccak256)(buf).toString('hex');\n  let ret = '0x';\n  for (let i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase();\n    } else {\n      ret += address[i];\n    }\n  }\n  return ret;\n};\nexports.toChecksumAddress = toChecksumAddress;\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nconst isValidChecksumAddress = function (hexAddress, eip1191ChainId) {\n  return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;\n};\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nconst generateAddress = function (from, nonce) {\n  (0, helpers_1.assertIsBuffer)(from);\n  (0, helpers_1.assertIsBuffer)(nonce);\n  if ((0, bytes_1.bufferToBigInt)(nonce) === BigInt(0)) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    return Buffer.from((0, keccak_1.keccak256)((0, bytes_1.arrToBufArr)(ethereumjs_rlp_1.RLP.encode((0, bytes_1.bufArrToArr)([from, null]))))).slice(-20);\n  }\n  // Only take the lower 160bits of the hash\n  return Buffer.from((0, keccak_1.keccak256)((0, bytes_1.arrToBufArr)(ethereumjs_rlp_1.RLP.encode((0, bytes_1.bufArrToArr)([from, nonce]))))).slice(-20);\n};\nexports.generateAddress = generateAddress;\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nconst generateAddress2 = function (from, salt, initCode) {\n  (0, helpers_1.assertIsBuffer)(from);\n  (0, helpers_1.assertIsBuffer)(salt);\n  (0, helpers_1.assertIsBuffer)(initCode);\n  if (from.length !== 20) {\n    throw new Error('Expected from to be of length 20');\n  }\n  if (salt.length !== 32) {\n    throw new Error('Expected salt to be of length 32');\n  }\n  const address = (0, keccak_1.keccak256)(Buffer.concat([Buffer.from('ff', 'hex'), from, salt, (0, keccak_1.keccak256)(initCode)]));\n  return (0, bytes_1.toBuffer)(address).slice(-20);\n};\nexports.generateAddress2 = generateAddress2;\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nconst isValidPrivate = function (privateKey) {\n  return (0, secp256k1_1.privateKeyVerify)(privateKey);\n};\nexports.isValidPrivate = isValidPrivate;\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nconst isValidPublic = function (publicKey) {\n  let sanitize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  (0, helpers_1.assertIsBuffer)(publicKey);\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return (0, secp256k1_1.publicKeyVerify)(Buffer.concat([Buffer.from([4]), publicKey]));\n  }\n  if (!sanitize) {\n    return false;\n  }\n  return (0, secp256k1_1.publicKeyVerify)(publicKey);\n};\nexports.isValidPublic = isValidPublic;\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nconst pubToAddress = function (pubKey) {\n  let sanitize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  (0, helpers_1.assertIsBuffer)(pubKey);\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(pubKey, false).slice(1));\n  }\n  if (pubKey.length !== 64) {\n    throw new Error('Expected pubKey to be of length 64');\n  }\n  // Only take the lower 160bits of the hash\n  return Buffer.from((0, keccak_1.keccak256)(pubKey)).slice(-20);\n};\nexports.pubToAddress = pubToAddress;\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nconst privateToPublic = function (privateKey) {\n  (0, helpers_1.assertIsBuffer)(privateKey);\n  // skip the type flag and use the X, Y points\n  return Buffer.from((0, secp256k1_1.publicKeyCreate)(privateKey, false)).slice(1);\n};\nexports.privateToPublic = privateToPublic;\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nconst privateToAddress = function (privateKey) {\n  return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));\n};\nexports.privateToAddress = privateToAddress;\n/**\n * Converts a public key to the Ethereum format.\n */\nconst importPublic = function (publicKey) {\n  (0, helpers_1.assertIsBuffer)(publicKey);\n  if (publicKey.length !== 64) {\n    publicKey = Buffer.from((0, secp256k1_1.publicKeyConvert)(publicKey, false).slice(1));\n  }\n  return publicKey;\n};\nexports.importPublic = importPublic;\n/**\n * Returns the zero address.\n */\nconst zeroAddress = function () {\n  const addressLength = 20;\n  const addr = (0, bytes_1.zeros)(addressLength);\n  return (0, bytes_1.bufferToHex)(addr);\n};\nexports.zeroAddress = zeroAddress;\n/**\n * Checks if a given address is the zero address.\n */\nconst isZeroAddress = function (hexAddress) {\n  try {\n    (0, helpers_1.assertIsString)(hexAddress);\n  } catch (e) {\n    return false;\n  }\n  const zeroAddr = (0, exports.zeroAddress)();\n  return zeroAddr === hexAddress;\n};\nexports.isZeroAddress = isZeroAddress;\nfunction accountBodyFromSlim(body) {\n  const [nonce, balance, storageRoot, codeHash] = body;\n  return [nonce, balance, (0, bytes_1.arrToBufArr)(storageRoot).length === 0 ? constants_1.KECCAK256_RLP : storageRoot, (0, bytes_1.arrToBufArr)(codeHash).length === 0 ? constants_1.KECCAK256_NULL : codeHash];\n}\nexports.accountBodyFromSlim = accountBodyFromSlim;\nconst emptyUint8Arr = new Uint8Array(0);\nfunction accountBodyToSlim(body) {\n  const [nonce, balance, storageRoot, codeHash] = body;\n  return [nonce, balance, (0, bytes_1.arrToBufArr)(storageRoot).equals(constants_1.KECCAK256_RLP) ? emptyUint8Arr : storageRoot, (0, bytes_1.arrToBufArr)(codeHash).equals(constants_1.KECCAK256_NULL) ? emptyUint8Arr : codeHash];\n}\nexports.accountBodyToSlim = accountBodyToSlim;\n/**\n * Converts a slim account RLP to a normal account RLP\n */\nfunction accountBodyToRLP(body) {\n  let couldBeSlim = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body;\n  return (0, bytes_1.arrToBufArr)(ethereumjs_rlp_1.RLP.encode(accountBody));\n}\nexports.accountBodyToRLP = accountBodyToRLP;","map":{"version":3,"mappings":";;;;;;AAAA;AACA;AACA;AAOA;AASA;AACA;AACA;AAIA,MAAMA,GAAG,GAAGC,MAAM,CAAC,CAAC,CAAC;AAWrB,MAAaC,OAAO;EAiClB;;;;EAIAC,cAA8F;IAAA,IAAlFC,KAAK,uEAAGJ,GAAG;IAAA,IAAEK,OAAO,uEAAGL,GAAG;IAAA,IAAEM,WAAW,uEAAGC,yBAAa;IAAA,IAAEC,QAAQ,uEAAGD,0BAAc;IAC5F,IAAI,CAACH,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,WAAW,GAAGA,WAAW;IAC9B,IAAI,CAACE,QAAQ,GAAGA,QAAQ;IAExB,IAAI,CAACC,SAAS,EAAE;EAClB;EAtCA,OAAOC,eAAe,CAACC,WAAwB;IAC7C,MAAM;MAAEP,KAAK;MAAEC,OAAO;MAAEC,WAAW;MAAEE;IAAQ,CAAE,GAAGG,WAAW;IAE7D,OAAO,IAAIT,OAAO,CAChBE,KAAK,KAAKQ,SAAS,GAAG,0BAAc,EAAC,oBAAQ,EAACR,KAAK,CAAC,CAAC,GAAGQ,SAAS,EACjEP,OAAO,KAAKO,SAAS,GAAG,0BAAc,EAAC,oBAAQ,EAACP,OAAO,CAAC,CAAC,GAAGO,SAAS,EACrEN,WAAW,KAAKM,SAAS,GAAG,oBAAQ,EAACN,WAAW,CAAC,GAAGM,SAAS,EAC7DJ,QAAQ,KAAKI,SAAS,GAAG,oBAAQ,EAACJ,QAAQ,CAAC,GAAGI,SAAS,CACxD;EACH;EAEO,OAAOC,wBAAwB,CAACC,UAAkB;IACvD,MAAMC,MAAM,GAAG,uBAAW,EAACC,oBAAG,CAACC,MAAM,CAACC,UAAU,CAACC,IAAI,CAACL,UAAU,CAAC,CAAiB,CAAa;IAE/F,IAAI,CAACM,KAAK,CAACC,OAAO,CAACN,MAAM,CAAC,EAAE;MAC1B,MAAM,IAAIO,KAAK,CAAC,iDAAiD,CAAC;;IAGpE,OAAO,IAAI,CAACC,eAAe,CAACR,MAAM,CAAC;EACrC;EAEO,OAAOQ,eAAe,CAACR,MAAgB;IAC5C,MAAM,CAACX,KAAK,EAAEC,OAAO,EAAEC,WAAW,EAAEE,QAAQ,CAAC,GAAGO,MAAM;IAEtD,OAAO,IAAIb,OAAO,CAAC,0BAAc,EAACE,KAAK,CAAC,EAAE,0BAAc,EAACC,OAAO,CAAC,EAAEC,WAAW,EAAEE,QAAQ,CAAC;EAC3F;EAeQC,SAAS;IACf,IAAI,IAAI,CAACL,KAAK,GAAGJ,GAAG,EAAE;MACpB,MAAM,IAAIsB,KAAK,CAAC,iCAAiC,CAAC;;IAEpD,IAAI,IAAI,CAACjB,OAAO,GAAGL,GAAG,EAAE;MACtB,MAAM,IAAIsB,KAAK,CAAC,mCAAmC,CAAC;;IAEtD,IAAI,IAAI,CAAChB,WAAW,CAACkB,MAAM,KAAK,EAAE,EAAE;MAClC,MAAM,IAAIF,KAAK,CAAC,sCAAsC,CAAC;;IAEzD,IAAI,IAAI,CAACd,QAAQ,CAACgB,MAAM,KAAK,EAAE,EAAE;MAC/B,MAAM,IAAIF,KAAK,CAAC,mCAAmC,CAAC;;EAExD;EAEA;;;EAGAG,GAAG;IACD,OAAO,CACL,kCAAsB,EAAC,IAAI,CAACrB,KAAK,CAAC,EAClC,kCAAsB,EAAC,IAAI,CAACC,OAAO,CAAC,EACpC,IAAI,CAACC,WAAW,EAChB,IAAI,CAACE,QAAQ,CACd;EACH;EAEA;;;EAGAkB,SAAS;IACP,OAAOC,MAAM,CAACR,IAAI,CAACH,oBAAG,CAACY,MAAM,CAAC,uBAAW,EAAC,IAAI,CAACH,GAAG,EAAE,CAAC,CAAC,CAAC;EACzD;EAEA;;;EAGAI,UAAU;IACR,OAAO,CAAC,IAAI,CAACrB,QAAQ,CAACsB,MAAM,CAACvB,0BAAc,CAAC;EAC9C;EAEA;;;;;EAKAwB,OAAO;IACL,OAAO,IAAI,CAAC1B,OAAO,KAAKL,GAAG,IAAI,IAAI,CAACI,KAAK,KAAKJ,GAAG,IAAI,IAAI,CAACQ,QAAQ,CAACsB,MAAM,CAACvB,0BAAc,CAAC;EAC3F;;AA9FFyB;AAiGA;;;AAGO,MAAMC,cAAc,GAAG,UAAUC,UAAkB;EACxD,IAAI;IACF,4BAAc,EAACA,UAAU,CAAC;GAC3B,CAAC,OAAOC,CAAM,EAAE;IACf,OAAO,KAAK;;EAGd,OAAO,qBAAqB,CAACC,IAAI,CAACF,UAAU,CAAC;AAC/C,CAAC;AARYF,sBAAc;AAU3B;;;;;;;;;;;;AAYO,MAAMK,iBAAiB,GAAG,UAC/BH,UAAkB,EAClBI,cAA2B;EAE3B,+BAAiB,EAACJ,UAAU,CAAC;EAC7B,MAAMK,OAAO,GAAG,6BAAc,EAACL,UAAU,CAAC,CAACM,WAAW,EAAE;EAExD,IAAIC,MAAM,GAAG,EAAE;EACf,IAAIH,cAAc,KAAK1B,SAAS,EAAE;IAChC,MAAM8B,OAAO,GAAG,0BAAc,EAAC,oBAAQ,EAACJ,cAAc,CAAC,CAAC;IACxDG,MAAM,GAAGC,OAAO,CAACC,QAAQ,EAAE,GAAG,IAAI;;EAGpC,MAAMC,GAAG,GAAGjB,MAAM,CAACR,IAAI,CAACsB,MAAM,GAAGF,OAAO,EAAE,MAAM,CAAC;EACjD,MAAMM,IAAI,GAAG,sBAAS,EAACD,GAAG,CAAC,CAACD,QAAQ,CAAC,KAAK,CAAC;EAC3C,IAAIG,GAAG,GAAG,IAAI;EAEd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,OAAO,CAACf,MAAM,EAAEuB,CAAC,EAAE,EAAE;IACvC,IAAIC,QAAQ,CAACH,IAAI,CAACE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE;MAC9BD,GAAG,IAAIP,OAAO,CAACQ,CAAC,CAAC,CAACE,WAAW,EAAE;KAChC,MAAM;MACLH,GAAG,IAAIP,OAAO,CAACQ,CAAC,CAAC;;;EAIrB,OAAOD,GAAG;AACZ,CAAC;AA1BYd,yBAAiB;AA4B9B;;;;;AAKO,MAAMkB,sBAAsB,GAAG,UACpChB,UAAkB,EAClBI,cAA2B;EAE3B,OAAO,0BAAc,EAACJ,UAAU,CAAC,IAAI,6BAAiB,EAACA,UAAU,EAAEI,cAAc,CAAC,KAAKJ,UAAU;AACnG,CAAC;AALYF,8BAAsB;AAOnC;;;;;AAKO,MAAMmB,eAAe,GAAG,UAAUhC,IAAY,EAAEf,KAAa;EAClE,4BAAc,EAACe,IAAI,CAAC;EACpB,4BAAc,EAACf,KAAK,CAAC;EAErB,IAAI,0BAAc,EAACA,KAAK,CAAC,KAAKH,MAAM,CAAC,CAAC,CAAC,EAAE;IACvC;IACA;IACA,OAAO0B,MAAM,CAACR,IAAI,CAAC,sBAAS,EAAC,uBAAW,EAACH,oBAAG,CAACY,MAAM,CAAC,uBAAW,EAAC,CAACT,IAAI,EAAE,IAAI,CAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAACiC,KAAK,CAC5F,CAAC,EAAE,CACJ;;EAGH;EACA,OAAOzB,MAAM,CAACR,IAAI,CAAC,sBAAS,EAAC,uBAAW,EAACH,oBAAG,CAACY,MAAM,CAAC,uBAAW,EAAC,CAACT,IAAI,EAAEf,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACgD,KAAK,CAAC,CAAC,EAAE,CAAC;AAC/F,CAAC;AAdYpB,uBAAe;AAgB5B;;;;;;AAMO,MAAMqB,gBAAgB,GAAG,UAAUlC,IAAY,EAAEmC,IAAY,EAAEC,QAAgB;EACpF,4BAAc,EAACpC,IAAI,CAAC;EACpB,4BAAc,EAACmC,IAAI,CAAC;EACpB,4BAAc,EAACC,QAAQ,CAAC;EAExB,IAAIpC,IAAI,CAACK,MAAM,KAAK,EAAE,EAAE;IACtB,MAAM,IAAIF,KAAK,CAAC,kCAAkC,CAAC;;EAErD,IAAIgC,IAAI,CAAC9B,MAAM,KAAK,EAAE,EAAE;IACtB,MAAM,IAAIF,KAAK,CAAC,kCAAkC,CAAC;;EAGrD,MAAMiB,OAAO,GAAG,sBAAS,EACvBZ,MAAM,CAAC6B,MAAM,CAAC,CAAC7B,MAAM,CAACR,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,EAAEA,IAAI,EAAEmC,IAAI,EAAE,sBAAS,EAACC,QAAQ,CAAC,CAAC,CAAC,CAC3E;EAED,OAAO,oBAAQ,EAAChB,OAAO,CAAC,CAACa,KAAK,CAAC,CAAC,EAAE,CAAC;AACrC,CAAC;AAjBYpB,wBAAgB;AAmB7B;;;AAGO,MAAMyB,cAAc,GAAG,UAAUC,UAAkB;EACxD,OAAO,gCAAgB,EAACA,UAAU,CAAC;AACrC,CAAC;AAFY1B,sBAAc;AAI3B;;;;;;AAMO,MAAM2B,aAAa,GAAG,UAAUC,SAAiB,EAA2B;EAAA,IAAzBC,+EAAoB,KAAK;EACjF,4BAAc,EAACD,SAAS,CAAC;EACzB,IAAIA,SAAS,CAACpC,MAAM,KAAK,EAAE,EAAE;IAC3B;IACA,OAAO,+BAAe,EAACG,MAAM,CAAC6B,MAAM,CAAC,CAAC7B,MAAM,CAACR,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,EAAEyC,SAAS,CAAC,CAAC,CAAC;;EAGtE,IAAI,CAACC,QAAQ,EAAE;IACb,OAAO,KAAK;;EAGd,OAAO,+BAAe,EAACD,SAAS,CAAC;AACnC,CAAC;AAZY5B,qBAAa;AAc1B;;;;;;AAMO,MAAM8B,YAAY,GAAG,UAAUC,MAAc,EAA2B;EAAA,IAAzBF,+EAAoB,KAAK;EAC7E,4BAAc,EAACE,MAAM,CAAC;EACtB,IAAIF,QAAQ,IAAIE,MAAM,CAACvC,MAAM,KAAK,EAAE,EAAE;IACpCuC,MAAM,GAAGpC,MAAM,CAACR,IAAI,CAAC,gCAAgB,EAAC4C,MAAM,EAAE,KAAK,CAAC,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEhE,IAAIW,MAAM,CAACvC,MAAM,KAAK,EAAE,EAAE;IACxB,MAAM,IAAIF,KAAK,CAAC,oCAAoC,CAAC;;EAEvD;EACA,OAAOK,MAAM,CAACR,IAAI,CAAC,sBAAS,EAAC4C,MAAM,CAAC,CAAC,CAACX,KAAK,CAAC,CAAC,EAAE,CAAC;AAClD,CAAC;AAVYpB,oBAAY;AAWZA,uBAAe,GAAGA,oBAAY;AAE3C;;;;AAIO,MAAMgC,eAAe,GAAG,UAAUN,UAAkB;EACzD,4BAAc,EAACA,UAAU,CAAC;EAC1B;EACA,OAAO/B,MAAM,CAACR,IAAI,CAAC,+BAAe,EAACuC,UAAU,EAAE,KAAK,CAAC,CAAC,CAACN,KAAK,CAAC,CAAC,CAAC;AACjE,CAAC;AAJYpB,uBAAe;AAM5B;;;;AAIO,MAAMiC,gBAAgB,GAAG,UAAUP,UAAkB;EAC1D,OAAO,2BAAe,EAAC,2BAAe,EAACA,UAAU,CAAC,CAAC;AACrD,CAAC;AAFY1B,wBAAgB;AAI7B;;;AAGO,MAAMkC,YAAY,GAAG,UAAUN,SAAiB;EACrD,4BAAc,EAACA,SAAS,CAAC;EACzB,IAAIA,SAAS,CAACpC,MAAM,KAAK,EAAE,EAAE;IAC3BoC,SAAS,GAAGjC,MAAM,CAACR,IAAI,CAAC,gCAAgB,EAACyC,SAAS,EAAE,KAAK,CAAC,CAACR,KAAK,CAAC,CAAC,CAAC,CAAC;;EAEtE,OAAOQ,SAAS;AAClB,CAAC;AANY5B,oBAAY;AAQzB;;;AAGO,MAAMmC,WAAW,GAAG;EACzB,MAAMC,aAAa,GAAG,EAAE;EACxB,MAAMC,IAAI,GAAG,iBAAK,EAACD,aAAa,CAAC;EACjC,OAAO,uBAAW,EAACC,IAAI,CAAC;AAC1B,CAAC;AAJYrC,mBAAW;AAMxB;;;AAGO,MAAMsC,aAAa,GAAG,UAAUpC,UAAkB;EACvD,IAAI;IACF,4BAAc,EAACA,UAAU,CAAC;GAC3B,CAAC,OAAOC,CAAM,EAAE;IACf,OAAO,KAAK;;EAGd,MAAMoC,QAAQ,GAAG,uBAAW,GAAE;EAC9B,OAAOA,QAAQ,KAAKrC,UAAU;AAChC,CAAC;AATYF,qBAAa;AAW1B,SAAgBwC,mBAAmB,CAACC,IAAuB;EACzD,MAAM,CAACrE,KAAK,EAAEC,OAAO,EAAEC,WAAW,EAAEE,QAAQ,CAAC,GAAGiE,IAAI;EACpD,OAAO,CACLrE,KAAK,EACLC,OAAO,EACP,uBAAW,EAACC,WAAW,CAAC,CAACkB,MAAM,KAAK,CAAC,GAAGjB,yBAAa,GAAGD,WAAW,EACnE,uBAAW,EAACE,QAAQ,CAAC,CAACgB,MAAM,KAAK,CAAC,GAAGjB,0BAAc,GAAGC,QAAQ,CAC/D;AACH;AARAwB;AAUA,MAAM0C,aAAa,GAAG,IAAIxD,UAAU,CAAC,CAAC,CAAC;AACvC,SAAgByD,iBAAiB,CAACF,IAAuB;EACvD,MAAM,CAACrE,KAAK,EAAEC,OAAO,EAAEC,WAAW,EAAEE,QAAQ,CAAC,GAAGiE,IAAI;EACpD,OAAO,CACLrE,KAAK,EACLC,OAAO,EACP,uBAAW,EAACC,WAAW,CAAC,CAACwB,MAAM,CAACvB,yBAAa,CAAC,GAAGmE,aAAa,GAAGpE,WAAW,EAC5E,uBAAW,EAACE,QAAQ,CAAC,CAACsB,MAAM,CAACvB,0BAAc,CAAC,GAAGmE,aAAa,GAAGlE,QAAQ,CACxE;AACH;AARAwB;AAUA;;;AAGA,SAAgB4C,gBAAgB,CAACH,IAAuB,EAAoB;EAAA,IAAlBI,WAAW,uEAAG,IAAI;EAC1E,MAAMC,WAAW,GAAGD,WAAW,GAAGL,mBAAmB,CAACC,IAAI,CAAC,GAAGA,IAAI;EAClE,OAAO,uBAAW,EAACzD,oBAAG,CAACY,MAAM,CAACkD,WAAW,CAAC,CAAC;AAC7C;AAHA9C","names":["_0n","BigInt","Account","constructor","nonce","balance","storageRoot","constants_1","codeHash","_validate","fromAccountData","accountData","undefined","fromRlpSerializedAccount","serialized","values","ethereumjs_rlp_1","decode","Uint8Array","from","Array","isArray","Error","fromValuesArray","length","raw","serialize","Buffer","encode","isContract","equals","isEmpty","exports","isValidAddress","hexAddress","e","test","toChecksumAddress","eip1191ChainId","address","toLowerCase","prefix","chainId","toString","buf","hash","ret","i","parseInt","toUpperCase","isValidChecksumAddress","generateAddress","slice","generateAddress2","salt","initCode","concat","isValidPrivate","privateKey","isValidPublic","publicKey","sanitize","pubToAddress","pubKey","privateToPublic","privateToAddress","importPublic","zeroAddress","addressLength","addr","isZeroAddress","zeroAddr","accountBodyFromSlim","body","emptyUint8Arr","accountBodyToSlim","accountBodyToRLP","couldBeSlim","accountBody"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@nomicfoundation/ethereumjs-util/src/account.ts"],"sourcesContent":["import { RLP } from '@nomicfoundation/ethereumjs-rlp'\nimport { keccak256 } from 'ethereum-cryptography/keccak'\nimport {\n  privateKeyVerify,\n  publicKeyConvert,\n  publicKeyCreate,\n  publicKeyVerify,\n} from 'ethereum-cryptography/secp256k1'\n\nimport {\n  arrToBufArr,\n  bigIntToUnpaddedBuffer,\n  bufArrToArr,\n  bufferToBigInt,\n  bufferToHex,\n  toBuffer,\n  zeros,\n} from './bytes'\nimport { KECCAK256_NULL, KECCAK256_RLP } from './constants'\nimport { assertIsBuffer, assertIsHexString, assertIsString } from './helpers'\nimport { stripHexPrefix } from './internal'\n\nimport type { BigIntLike, BufferLike } from './types'\n\nconst _0n = BigInt(0)\n\nexport interface AccountData {\n  nonce?: BigIntLike\n  balance?: BigIntLike\n  storageRoot?: BufferLike\n  codeHash?: BufferLike\n}\n\nexport type AccountBodyBuffer = [Buffer, Buffer, Buffer | Uint8Array, Buffer | Uint8Array]\n\nexport class Account {\n  nonce: bigint\n  balance: bigint\n  storageRoot: Buffer\n  codeHash: Buffer\n\n  static fromAccountData(accountData: AccountData) {\n    const { nonce, balance, storageRoot, codeHash } = accountData\n\n    return new Account(\n      nonce !== undefined ? bufferToBigInt(toBuffer(nonce)) : undefined,\n      balance !== undefined ? bufferToBigInt(toBuffer(balance)) : undefined,\n      storageRoot !== undefined ? toBuffer(storageRoot) : undefined,\n      codeHash !== undefined ? toBuffer(codeHash) : undefined\n    )\n  }\n\n  public static fromRlpSerializedAccount(serialized: Buffer) {\n    const values = arrToBufArr(RLP.decode(Uint8Array.from(serialized)) as Uint8Array[]) as Buffer[]\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized account input. Must be array')\n    }\n\n    return this.fromValuesArray(values)\n  }\n\n  public static fromValuesArray(values: Buffer[]) {\n    const [nonce, balance, storageRoot, codeHash] = values\n\n    return new Account(bufferToBigInt(nonce), bufferToBigInt(balance), storageRoot, codeHash)\n  }\n\n  /**\n   * This constructor assigns and validates the values.\n   * Use the static factory methods to assist in creating an Account from varying data types.\n   */\n  constructor(nonce = _0n, balance = _0n, storageRoot = KECCAK256_RLP, codeHash = KECCAK256_NULL) {\n    this.nonce = nonce\n    this.balance = balance\n    this.storageRoot = storageRoot\n    this.codeHash = codeHash\n\n    this._validate()\n  }\n\n  private _validate() {\n    if (this.nonce < _0n) {\n      throw new Error('nonce must be greater than zero')\n    }\n    if (this.balance < _0n) {\n      throw new Error('balance must be greater than zero')\n    }\n    if (this.storageRoot.length !== 32) {\n      throw new Error('storageRoot must have a length of 32')\n    }\n    if (this.codeHash.length !== 32) {\n      throw new Error('codeHash must have a length of 32')\n    }\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers for the account, in order.\n   */\n  raw(): Buffer[] {\n    return [\n      bigIntToUnpaddedBuffer(this.nonce),\n      bigIntToUnpaddedBuffer(this.balance),\n      this.storageRoot,\n      this.codeHash,\n    ]\n  }\n\n  /**\n   * Returns the RLP serialization of the account as a `Buffer`.\n   */\n  serialize(): Buffer {\n    return Buffer.from(RLP.encode(bufArrToArr(this.raw())))\n  }\n\n  /**\n   * Returns a `Boolean` determining if the account is a contract.\n   */\n  isContract(): boolean {\n    return !this.codeHash.equals(KECCAK256_NULL)\n  }\n\n  /**\n   * Returns a `Boolean` determining if the account is empty complying to the definition of\n   * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n   * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n   */\n  isEmpty(): boolean {\n    return this.balance === _0n && this.nonce === _0n && this.codeHash.equals(KECCAK256_NULL)\n  }\n}\n\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */\nexport const isValidAddress = function (hexAddress: string): boolean {\n  try {\n    assertIsString(hexAddress)\n  } catch (e: any) {\n    return false\n  }\n\n  return /^0x[0-9a-fA-F]{40}$/.test(hexAddress)\n}\n\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */\nexport const toChecksumAddress = function (\n  hexAddress: string,\n  eip1191ChainId?: BigIntLike\n): string {\n  assertIsHexString(hexAddress)\n  const address = stripHexPrefix(hexAddress).toLowerCase()\n\n  let prefix = ''\n  if (eip1191ChainId !== undefined) {\n    const chainId = bufferToBigInt(toBuffer(eip1191ChainId))\n    prefix = chainId.toString() + '0x'\n  }\n\n  const buf = Buffer.from(prefix + address, 'utf8')\n  const hash = keccak256(buf).toString('hex')\n  let ret = '0x'\n\n  for (let i = 0; i < address.length; i++) {\n    if (parseInt(hash[i], 16) >= 8) {\n      ret += address[i].toUpperCase()\n    } else {\n      ret += address[i]\n    }\n  }\n\n  return ret\n}\n\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */\nexport const isValidChecksumAddress = function (\n  hexAddress: string,\n  eip1191ChainId?: BigIntLike\n): boolean {\n  return isValidAddress(hexAddress) && toChecksumAddress(hexAddress, eip1191ChainId) === hexAddress\n}\n\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */\nexport const generateAddress = function (from: Buffer, nonce: Buffer): Buffer {\n  assertIsBuffer(from)\n  assertIsBuffer(nonce)\n\n  if (bufferToBigInt(nonce) === BigInt(0)) {\n    // in RLP we want to encode null in the case of zero nonce\n    // read the RLP documentation for an answer if you dare\n    return Buffer.from(keccak256(arrToBufArr(RLP.encode(bufArrToArr([from, null] as any))))).slice(\n      -20\n    )\n  }\n\n  // Only take the lower 160bits of the hash\n  return Buffer.from(keccak256(arrToBufArr(RLP.encode(bufArrToArr([from, nonce]))))).slice(-20)\n}\n\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */\nexport const generateAddress2 = function (from: Buffer, salt: Buffer, initCode: Buffer): Buffer {\n  assertIsBuffer(from)\n  assertIsBuffer(salt)\n  assertIsBuffer(initCode)\n\n  if (from.length !== 20) {\n    throw new Error('Expected from to be of length 20')\n  }\n  if (salt.length !== 32) {\n    throw new Error('Expected salt to be of length 32')\n  }\n\n  const address = keccak256(\n    Buffer.concat([Buffer.from('ff', 'hex'), from, salt, keccak256(initCode)])\n  )\n\n  return toBuffer(address).slice(-20)\n}\n\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */\nexport const isValidPrivate = function (privateKey: Buffer): boolean {\n  return privateKeyVerify(privateKey)\n}\n\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexport const isValidPublic = function (publicKey: Buffer, sanitize: boolean = false): boolean {\n  assertIsBuffer(publicKey)\n  if (publicKey.length === 64) {\n    // Convert to SEC1 for secp256k1\n    return publicKeyVerify(Buffer.concat([Buffer.from([4]), publicKey]))\n  }\n\n  if (!sanitize) {\n    return false\n  }\n\n  return publicKeyVerify(publicKey)\n}\n\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */\nexport const pubToAddress = function (pubKey: Buffer, sanitize: boolean = false): Buffer {\n  assertIsBuffer(pubKey)\n  if (sanitize && pubKey.length !== 64) {\n    pubKey = Buffer.from(publicKeyConvert(pubKey, false).slice(1))\n  }\n  if (pubKey.length !== 64) {\n    throw new Error('Expected pubKey to be of length 64')\n  }\n  // Only take the lower 160bits of the hash\n  return Buffer.from(keccak256(pubKey)).slice(-20)\n}\nexport const publicToAddress = pubToAddress\n\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexport const privateToPublic = function (privateKey: Buffer): Buffer {\n  assertIsBuffer(privateKey)\n  // skip the type flag and use the X, Y points\n  return Buffer.from(publicKeyCreate(privateKey, false)).slice(1)\n}\n\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */\nexport const privateToAddress = function (privateKey: Buffer): Buffer {\n  return publicToAddress(privateToPublic(privateKey))\n}\n\n/**\n * Converts a public key to the Ethereum format.\n */\nexport const importPublic = function (publicKey: Buffer): Buffer {\n  assertIsBuffer(publicKey)\n  if (publicKey.length !== 64) {\n    publicKey = Buffer.from(publicKeyConvert(publicKey, false).slice(1))\n  }\n  return publicKey\n}\n\n/**\n * Returns the zero address.\n */\nexport const zeroAddress = function (): string {\n  const addressLength = 20\n  const addr = zeros(addressLength)\n  return bufferToHex(addr)\n}\n\n/**\n * Checks if a given address is the zero address.\n */\nexport const isZeroAddress = function (hexAddress: string): boolean {\n  try {\n    assertIsString(hexAddress)\n  } catch (e: any) {\n    return false\n  }\n\n  const zeroAddr = zeroAddress()\n  return zeroAddr === hexAddress\n}\n\nexport function accountBodyFromSlim(body: AccountBodyBuffer) {\n  const [nonce, balance, storageRoot, codeHash] = body\n  return [\n    nonce,\n    balance,\n    arrToBufArr(storageRoot).length === 0 ? KECCAK256_RLP : storageRoot,\n    arrToBufArr(codeHash).length === 0 ? KECCAK256_NULL : codeHash,\n  ]\n}\n\nconst emptyUint8Arr = new Uint8Array(0)\nexport function accountBodyToSlim(body: AccountBodyBuffer) {\n  const [nonce, balance, storageRoot, codeHash] = body\n  return [\n    nonce,\n    balance,\n    arrToBufArr(storageRoot).equals(KECCAK256_RLP) ? emptyUint8Arr : storageRoot,\n    arrToBufArr(codeHash).equals(KECCAK256_NULL) ? emptyUint8Arr : codeHash,\n  ]\n}\n\n/**\n * Converts a slim account RLP to a normal account RLP\n */\nexport function accountBodyToRLP(body: AccountBodyBuffer, couldBeSlim = true) {\n  const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body\n  return arrToBufArr(RLP.encode(accountBody))\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}