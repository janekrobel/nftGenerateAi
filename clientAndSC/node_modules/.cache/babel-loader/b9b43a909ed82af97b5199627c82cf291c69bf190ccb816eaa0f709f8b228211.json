{"ast":null,"code":"/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { consoleSandbox, getGlobalObject } from './misc';\n// TODO: Implement different loggers for different environments\nvar global = getGlobalObject();\n/** Prefix for logging strings */\nvar PREFIX = 'Sentry Logger ';\n/** JSDoc */\nvar Logger = /** @class */function () {\n  /** JSDoc */\n  function Logger() {\n    this._enabled = false;\n  }\n  /** JSDoc */\n  Logger.prototype.disable = function () {\n    this._enabled = false;\n  };\n  /** JSDoc */\n  Logger.prototype.enable = function () {\n    this._enabled = true;\n  };\n  /** JSDoc */\n  Logger.prototype.log = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(function () {\n      global.console.log(PREFIX + \"[Log]: \" + args.join(' '));\n    });\n  };\n  /** JSDoc */\n  Logger.prototype.warn = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(function () {\n      global.console.warn(PREFIX + \"[Warn]: \" + args.join(' '));\n    });\n  };\n  /** JSDoc */\n  Logger.prototype.error = function () {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(function () {\n      global.console.error(PREFIX + \"[Error]: \" + args.join(' '));\n    });\n  };\n  return Logger;\n}();\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nvar logger = global.__SENTRY__.logger || (global.__SENTRY__.logger = new Logger());\nexport { logger };","map":{"version":3,"mappings":"AAAA;AACA,SAASA,cAAc,EAAEC,eAAe,QAAQ,QAAQ;AAExD;AACA,IAAMC,MAAM,GAAGD,eAAe,EAA0B;AAExD;AACA,IAAME,MAAM,GAAG,gBAAgB;AAE/B;AACA;EAIE;EACA;IACE,IAAI,CAACC,QAAQ,GAAG,KAAK;EACvB;EAEA;EACOC,wBAAO,GAAd;IACE,IAAI,CAACD,QAAQ,GAAG,KAAK;EACvB,CAAC;EAED;EACOC,uBAAM,GAAb;IACE,IAAI,CAACD,QAAQ,GAAG,IAAI;EACtB,CAAC;EAED;EACOC,oBAAG,GAAV;IAAW;SAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;MAAdC;;IACT,IAAI,CAAC,IAAI,CAACH,QAAQ,EAAE;MAClB;;IAEFJ,cAAc,CAAC;MACbE,MAAM,CAACM,OAAO,CAACC,GAAG,CAAIN,MAAM,eAAUI,IAAI,CAACG,IAAI,CAAC,GAAG,CAAG,CAAC;IACzD,CAAC,CAAC;EACJ,CAAC;EAED;EACOL,qBAAI,GAAX;IAAY;SAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;MAAdC;;IACV,IAAI,CAAC,IAAI,CAACH,QAAQ,EAAE;MAClB;;IAEFJ,cAAc,CAAC;MACbE,MAAM,CAACM,OAAO,CAACG,IAAI,CAAIR,MAAM,gBAAWI,IAAI,CAACG,IAAI,CAAC,GAAG,CAAG,CAAC;IAC3D,CAAC,CAAC;EACJ,CAAC;EAED;EACOL,sBAAK,GAAZ;IAAa;SAAA,UAAc,EAAdC,qBAAc,EAAdA,IAAc;MAAdC;;IACX,IAAI,CAAC,IAAI,CAACH,QAAQ,EAAE;MAClB;;IAEFJ,cAAc,CAAC;MACbE,MAAM,CAACM,OAAO,CAACI,KAAK,CAAIT,MAAM,iBAAYI,IAAI,CAACG,IAAI,CAAC,GAAG,CAAG,CAAC;IAC7D,CAAC,CAAC;EACJ,CAAC;EACH,aAAC;AAAD,CAAC,EAhDD;AAkDA;AACAR,MAAM,CAACW,UAAU,GAAGX,MAAM,CAACW,UAAU,IAAI,EAAE;AAC3C,IAAMC,MAAM,GAAIZ,MAAM,CAACW,UAAU,CAACC,MAAiB,KAAKZ,MAAM,CAACW,UAAU,CAACC,MAAM,GAAG,IAAIT,MAAM,EAAE,CAAC;AAEhG,SAASS,MAAM","names":["consoleSandbox","getGlobalObject","global","PREFIX","_enabled","Logger","_i","args","console","log","join","warn","error","__SENTRY__","logger"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@sentry/utils/src/logger.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { consoleSandbox, getGlobalObject } from './misc';\n\n// TODO: Implement different loggers for different environments\nconst global = getGlobalObject<Window | NodeJS.Global>();\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** JSDoc */\nclass Logger {\n  /** JSDoc */\n  private _enabled: boolean;\n\n  /** JSDoc */\n  public constructor() {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public disable(): void {\n    this._enabled = false;\n  }\n\n  /** JSDoc */\n  public enable(): void {\n    this._enabled = true;\n  }\n\n  /** JSDoc */\n  public log(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.log(`${PREFIX}[Log]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public warn(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.warn(`${PREFIX}[Warn]: ${args.join(' ')}`);\n    });\n  }\n\n  /** JSDoc */\n  public error(...args: any[]): void {\n    if (!this._enabled) {\n      return;\n    }\n    consoleSandbox(() => {\n      global.console.error(`${PREFIX}[Error]: ${args.join(' ')}`);\n    });\n  }\n}\n\n// Ensure we only have a single logger instance, even if multiple versions of @sentry/utils are being used\nglobal.__SENTRY__ = global.__SENTRY__ || {};\nconst logger = (global.__SENTRY__.logger as Logger) || (global.__SENTRY__.logger = new Logger());\n\nexport { logger };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}