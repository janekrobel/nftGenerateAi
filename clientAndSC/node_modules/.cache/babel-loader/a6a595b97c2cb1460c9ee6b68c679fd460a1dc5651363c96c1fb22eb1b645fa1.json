{"ast":null,"code":"import { getCurrentHub } from '@sentry/hub';\nexport var TRACEPARENT_REGEXP = new RegExp('^[ \\\\t]*' +\n// whitespace\n'([0-9a-f]{32})?' +\n// trace_id\n'-?([0-9a-f]{16})?' +\n// span_id\n'-?([01])?' +\n// sampled\n'[ \\\\t]*$');\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nexport function hasTracingEnabled(options) {\n  return 'tracesSampleRate' in options || 'tracesSampler' in options;\n}\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent) {\n  var matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (matches) {\n    var parentSampled = void 0;\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n    return {\n      traceId: matches[1],\n      parentSampled: parentSampled,\n      parentSpanId: matches[2]\n    };\n  }\n  return undefined;\n}\n/** Grabs active transaction off scope, if any */\nexport function getActiveTransaction(hub) {\n  if (hub === void 0) {\n    hub = getCurrentHub();\n  }\n  var _a, _b;\n  return (_b = (_a = hub) === null || _a === void 0 ? void 0 : _a.getScope()) === null || _b === void 0 ? void 0 : _b.getTransaction();\n}\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nexport function msToSec(time) {\n  return time / 1000;\n}\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\nexport function secToMs(time) {\n  return time * 1000;\n}\n// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\nexport { stripUrlQueryAndFragment } from '@sentry/utils';","map":{"version":3,"mappings":"AAAA,SAASA,aAAa,QAAa,aAAa;AAGhD,OAAO,IAAMC,kBAAkB,GAAG,IAAIC,MAAM,CAC1C,UAAU;AAAG;AACb,iBAAiB;AAAG;AACpB,mBAAmB;AAAG;AACtB,WAAW;AAAG;AACZ,UAAU,CACb;AAED;;;;;AAKA,OAAM,SAAUC,iBAAiB,CAACC,OAAgB;EAChD,OAAO,kBAAkB,IAAIA,OAAO,IAAI,eAAe,IAAIA,OAAO;AACpE;AAEA;;;;;;;AAOA,OAAM,SAAUC,sBAAsB,CAACC,WAAmB;EACxD,IAAMC,OAAO,GAAGD,WAAW,CAACE,KAAK,CAACP,kBAAkB,CAAC;EACrD,IAAIM,OAAO,EAAE;IACX,IAAIE,aAAa,SAAqB;IACtC,IAAIF,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MACtBE,aAAa,GAAG,IAAI;KACrB,MAAM,IAAIF,OAAO,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;MAC7BE,aAAa,GAAG,KAAK;;IAEvB,OAAO;MACLC,OAAO,EAAEH,OAAO,CAAC,CAAC,CAAC;MACnBE,aAAa;MACbE,YAAY,EAAEJ,OAAO,CAAC,CAAC;KACxB;;EAEH,OAAOK,SAAS;AAClB;AAEA;AACA,OAAM,SAAUC,oBAAoB,CAAwBC,GAA0B;EAA1B;IAAAA,MAAWd,aAAa,EAAE;EAAA;;EACpF,OAAO,eAAG,0CAAEe,QAAQ,4CAAIC,cAAc,EAAmB;AAC3D;AAEA;;;;AAIA,OAAM,SAAUC,OAAO,CAACC,IAAY;EAClC,OAAOA,IAAI,GAAG,IAAI;AACpB;AAEA;;;;AAIA,OAAM,SAAUC,OAAO,CAACD,IAAY;EAClC,OAAOA,IAAI,GAAG,IAAI;AACpB;AAEA;AACA,SAASE,wBAAwB,QAAQ,eAAe","names":["getCurrentHub","TRACEPARENT_REGEXP","RegExp","hasTracingEnabled","options","extractTraceparentData","traceparent","matches","match","parentSampled","traceId","parentSpanId","undefined","getActiveTransaction","hub","getScope","getTransaction","msToSec","time","secToMs","stripUrlQueryAndFragment"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@sentry/tracing/src/utils.ts"],"sourcesContent":["import { getCurrentHub, Hub } from '@sentry/hub';\nimport { Options, TraceparentData, Transaction } from '@sentry/types';\n\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n  '([0-9a-f]{32})?' + // trace_id\n  '-?([0-9a-f]{16})?' + // span_id\n  '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Determines if tracing is currently enabled.\n *\n * Tracing is enabled when at least one of `tracesSampleRate` and `tracesSampler` is defined in the SDK config.\n */\nexport function hasTracingEnabled(options: Options): boolean {\n  return 'tracesSampleRate' in options || 'tracesSampler' in options;\n}\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent: string): TraceparentData | undefined {\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (matches) {\n    let parentSampled: boolean | undefined;\n    if (matches[3] === '1') {\n      parentSampled = true;\n    } else if (matches[3] === '0') {\n      parentSampled = false;\n    }\n    return {\n      traceId: matches[1],\n      parentSampled,\n      parentSpanId: matches[2],\n    };\n  }\n  return undefined;\n}\n\n/** Grabs active transaction off scope, if any */\nexport function getActiveTransaction<T extends Transaction>(hub: Hub = getCurrentHub()): T | undefined {\n  return hub?.getScope()?.getTransaction() as T | undefined;\n}\n\n/**\n * Converts from milliseconds to seconds\n * @param time time in ms\n */\nexport function msToSec(time: number): number {\n  return time / 1000;\n}\n\n/**\n * Converts from seconds to milliseconds\n * @param time time in seconds\n */\nexport function secToMs(time: number): number {\n  return time * 1000;\n}\n\n// so it can be used in manual instrumentation without necessitating a hard dependency on @sentry/utils\nexport { stripUrlQueryAndFragment } from '@sentry/utils';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}