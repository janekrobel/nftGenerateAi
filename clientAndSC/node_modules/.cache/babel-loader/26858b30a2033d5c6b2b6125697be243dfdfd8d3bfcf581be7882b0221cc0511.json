{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHardhatVersion = exports.getPackageJson = exports.getPackageName = exports.findClosestPackageJson = exports.getPackageRoot = exports.getPackageJsonPath = void 0;\nconst find_up_1 = __importDefault(require(\"find-up\"));\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst errors_1 = require(\"../core/errors\");\nfunction getPackageJsonPath() {\n  return findClosestPackageJson(__filename);\n}\nexports.getPackageJsonPath = getPackageJsonPath;\nfunction getPackageRoot() {\n  const packageJsonPath = getPackageJsonPath();\n  return path_1.default.dirname(packageJsonPath);\n}\nexports.getPackageRoot = getPackageRoot;\nfunction findClosestPackageJson(file) {\n  return find_up_1.default.sync(\"package.json\", {\n    cwd: path_1.default.dirname(file)\n  });\n}\nexports.findClosestPackageJson = findClosestPackageJson;\nasync function getPackageName(file) {\n  const packageJsonPath = findClosestPackageJson(file);\n  if (packageJsonPath !== null && packageJsonPath !== \"\") {\n    const packageJson = await fs_extra_1.default.readJSON(packageJsonPath);\n    return packageJson.name;\n  }\n  return \"\";\n}\nexports.getPackageName = getPackageName;\nasync function getPackageJson() {\n  const root = getPackageRoot();\n  return fs_extra_1.default.readJSON(path_1.default.join(root, \"package.json\"));\n}\nexports.getPackageJson = getPackageJson;\nfunction getHardhatVersion() {\n  const packageJsonPath = findClosestPackageJson(__filename);\n  (0, errors_1.assertHardhatInvariant)(packageJsonPath !== null, \"There should be a package.json in hardhat-core's root directory\");\n  const packageJson = fs_extra_1.default.readJsonSync(packageJsonPath);\n  return packageJson.version;\n}\nexports.getHardhatVersion = getHardhatVersion;","map":{"version":3,"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AAEA;AAEA,SAAgBA,kBAAkB;EAChC,OAAOC,sBAAsB,CAACC,UAAU,CAAE;AAC5C;AAFAC;AAIA,SAAgBC,cAAc;EAC5B,MAAMC,eAAe,GAAGL,kBAAkB,EAAE;EAE5C,OAAOM,cAAI,CAACC,OAAO,CAACF,eAAe,CAAC;AACtC;AAJAF;AAcA,SAAgBF,sBAAsB,CAACO,IAAY;EACjD,OAAOC,iBAAM,CAACC,IAAI,CAAC,cAAc,EAAE;IAAEC,GAAG,EAAEL,cAAI,CAACC,OAAO,CAACC,IAAI;EAAC,CAAE,CAAC;AACjE;AAFAL;AAIO,eAAeS,cAAc,CAACJ,IAAY;EAC/C,MAAMH,eAAe,GAAGJ,sBAAsB,CAACO,IAAI,CAAC;EACpD,IAAIH,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAK,EAAE,EAAE;IACtD,MAAMQ,WAAW,GAAgB,MAAMC,kBAAO,CAACC,QAAQ,CAACV,eAAe,CAAC;IACxE,OAAOQ,WAAW,CAACG,IAAI;;EAEzB,OAAO,EAAE;AACX;AAPAb;AASO,eAAec,cAAc;EAClC,MAAMC,IAAI,GAAGd,cAAc,EAAE;EAC7B,OAAOU,kBAAO,CAACC,QAAQ,CAACT,cAAI,CAACa,IAAI,CAACD,IAAI,EAAE,cAAc,CAAC,CAAC;AAC1D;AAHAf;AAKA,SAAgBiB,iBAAiB;EAC/B,MAAMf,eAAe,GAAGJ,sBAAsB,CAACC,UAAU,CAAC;EAE1D,mCAAsB,EACpBG,eAAe,KAAK,IAAI,EACxB,iEAAiE,CAClE;EAED,MAAMQ,WAAW,GAAGC,kBAAO,CAACO,YAAY,CAAChB,eAAe,CAAC;EACzD,OAAOQ,WAAW,CAACS,OAAO;AAC5B;AAVAnB","names":["getPackageJsonPath","findClosestPackageJson","__filename","exports","getPackageRoot","packageJsonPath","path_1","dirname","file","find_up_1","sync","cwd","getPackageName","packageJson","fs_extra_1","readJSON","name","getPackageJson","root","join","getHardhatVersion","readJsonSync","version"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/hardhat/src/internal/util/packageInfo.ts"],"sourcesContent":["import findup from \"find-up\";\nimport fsExtra from \"fs-extra\";\nimport path from \"path\";\n\nimport { assertHardhatInvariant } from \"../core/errors\";\n\nexport function getPackageJsonPath(): string {\n  return findClosestPackageJson(__filename)!;\n}\n\nexport function getPackageRoot(): string {\n  const packageJsonPath = getPackageJsonPath();\n\n  return path.dirname(packageJsonPath);\n}\n\nexport interface PackageJson {\n  name: string;\n  version: string;\n  engines: {\n    node: string;\n  };\n}\n\nexport function findClosestPackageJson(file: string): string | null {\n  return findup.sync(\"package.json\", { cwd: path.dirname(file) });\n}\n\nexport async function getPackageName(file: string): Promise<string> {\n  const packageJsonPath = findClosestPackageJson(file);\n  if (packageJsonPath !== null && packageJsonPath !== \"\") {\n    const packageJson: PackageJson = await fsExtra.readJSON(packageJsonPath);\n    return packageJson.name;\n  }\n  return \"\";\n}\n\nexport async function getPackageJson(): Promise<PackageJson> {\n  const root = getPackageRoot();\n  return fsExtra.readJSON(path.join(root, \"package.json\"));\n}\n\nexport function getHardhatVersion(): string {\n  const packageJsonPath = findClosestPackageJson(__filename);\n\n  assertHardhatInvariant(\n    packageJsonPath !== null,\n    \"There should be a package.json in hardhat-core's root directory\"\n  );\n\n  const packageJson = fsExtra.readJsonSync(packageJsonPath);\n  return packageJson.version;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}