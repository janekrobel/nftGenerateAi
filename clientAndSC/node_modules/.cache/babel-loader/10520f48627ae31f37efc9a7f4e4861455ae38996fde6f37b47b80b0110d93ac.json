{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FetchResponse = exports.FetchRequest = exports.FetchCancelSignal = void 0;\n/**\n *  Explain fetching here...\n *\n *  @_section api/utils/fetching:Fetching Web Content  [about-fetch]\n */\nconst base64_js_1 = require(\"./base64.js\");\nconst data_js_1 = require(\"./data.js\");\nconst errors_js_1 = require(\"./errors.js\");\nconst properties_js_1 = require(\"./properties.js\");\nconst utf8_js_1 = require(\"./utf8.js\");\nconst geturl_js_1 = require(\"./geturl.js\");\nconst MAX_ATTEMPTS = 12;\nconst SLOT_INTERVAL = 250;\n// The global FetchGetUrlFunc implementation.\nlet getUrlFunc = geturl_js_1.getUrl;\nconst reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\nconst reIpfs = new RegExp(\"^ipfs:/\\/(ipfs/)?(.*)$\", \"i\");\n// If locked, new Gateways cannot be added\nlet locked = false;\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\nasync function dataGatewayFunc(url, signal) {\n  try {\n    const match = url.match(reData);\n    if (!match) {\n      throw new Error(\"invalid data\");\n    }\n    return new FetchResponse(200, \"OK\", {\n      \"content-type\": match[1] || \"text/plain\"\n    }, match[2] ? (0, base64_js_1.decodeBase64)(match[3]) : unpercent(match[3]));\n  } catch (error) {\n    return new FetchResponse(599, \"BAD REQUEST (invalid data: URI)\", {}, null, new FetchRequest(url));\n  }\n}\n/**\n *  Returns a [[FetchGatewayFunc]] for fetching content from a standard\n *  IPFS gateway hosted at %%baseUrl%%.\n */\nfunction getIpfsGatewayFunc(baseUrl) {\n  async function gatewayIpfs(url, signal) {\n    try {\n      const match = url.match(reIpfs);\n      if (!match) {\n        throw new Error(\"invalid link\");\n      }\n      return new FetchRequest(`${baseUrl}${match[2]}`);\n    } catch (error) {\n      return new FetchResponse(599, \"BAD REQUEST (invalid IPFS URI)\", {}, null, new FetchRequest(url));\n    }\n  }\n  return gatewayIpfs;\n}\nconst Gateways = {\n  \"data\": dataGatewayFunc,\n  \"ipfs\": getIpfsGatewayFunc(\"https:/\\/gateway.ipfs.io/ipfs/\")\n};\nconst fetchSignals = new WeakMap();\n/**\n *  @_ignore\n */\nclass FetchCancelSignal {\n  #listeners;\n  #cancelled;\n  constructor(request) {\n    this.#listeners = [];\n    this.#cancelled = false;\n    fetchSignals.set(request, () => {\n      if (this.#cancelled) {\n        return;\n      }\n      this.#cancelled = true;\n      for (const listener of this.#listeners) {\n        setTimeout(() => {\n          listener();\n        }, 0);\n      }\n      this.#listeners = [];\n    });\n  }\n  addListener(listener) {\n    (0, errors_js_1.assert)(!this.#cancelled, \"singal already cancelled\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fetchCancelSignal.addCancelListener\"\n    });\n    this.#listeners.push(listener);\n  }\n  get cancelled() {\n    return this.#cancelled;\n  }\n  checkSignal() {\n    (0, errors_js_1.assert)(!this.cancelled, \"cancelled\", \"CANCELLED\", {});\n  }\n}\nexports.FetchCancelSignal = FetchCancelSignal;\n// Check the signal, throwing if it is cancelled\nfunction checkSignal(signal) {\n  if (signal == null) {\n    throw new Error(\"missing signal; should not happen\");\n  }\n  signal.checkSignal();\n  return signal;\n}\n/**\n *  Represents a request for a resource using a URI.\n *\n *  By default, the supported schemes are ``HTTP``, ``HTTPS``, ``data:``,\n *  and ``IPFS:``.\n *\n *  Additional schemes can be added globally using [[registerGateway]].\n *\n *  @example:\n *    req = new FetchRequest(\"https://www.ricmoo.com\")\n *    resp = await req.send()\n *    resp.body.length\n *    //_result:\n */\nclass FetchRequest {\n  #allowInsecure;\n  #gzip;\n  #headers;\n  #method;\n  #timeout;\n  #url;\n  #body;\n  #bodyType;\n  #creds;\n  // Hooks\n  #preflight;\n  #process;\n  #retry;\n  #signal;\n  #throttle;\n  /**\n   *  The fetch URI to requrest.\n   */\n  get url() {\n    return this.#url;\n  }\n  set url(url) {\n    this.#url = String(url);\n  }\n  /**\n   *  The fetch body, if any, to send as the request body. //(default: null)//\n   *\n   *  When setting a body, the intrinsic ``Content-Type`` is automatically\n   *  set and will be used if **not overridden** by setting a custom\n   *  header.\n   *\n   *  If %%body%% is null, the body is cleared (along with the\n   *  intrinsic ``Content-Type``) and the .\n   *\n   *  If %%body%% is a string, the intrincis ``Content-Type`` is set to\n   *  ``text/plain``.\n   *\n   *  If %%body%% is a Uint8Array, the intrincis ``Content-Type`` is set to\n   *  ``application/octet-stream``.\n   *\n   *  If %%body%% is any other object, the intrincis ``Content-Type`` is\n   *  set to ``application/json``.\n   */\n  get body() {\n    if (this.#body == null) {\n      return null;\n    }\n    return new Uint8Array(this.#body);\n  }\n  set body(body) {\n    if (body == null) {\n      this.#body = undefined;\n      this.#bodyType = undefined;\n    } else if (typeof body === \"string\") {\n      this.#body = (0, utf8_js_1.toUtf8Bytes)(body);\n      this.#bodyType = \"text/plain\";\n    } else if (body instanceof Uint8Array) {\n      this.#body = body;\n      this.#bodyType = \"application/octet-stream\";\n    } else if (typeof body === \"object\") {\n      this.#body = (0, utf8_js_1.toUtf8Bytes)(JSON.stringify(body));\n      this.#bodyType = \"application/json\";\n    } else {\n      throw new Error(\"invalid body\");\n    }\n  }\n  /**\n   *  Returns true if the request has a body.\n   */\n  hasBody() {\n    return this.#body != null;\n  }\n  /**\n   *  The HTTP method to use when requesting the URI. If no method\n   *  has been explicitly set, then ``GET`` is used if the body is\n   *  null and ``POST`` otherwise.\n   */\n  get method() {\n    if (this.#method) {\n      return this.#method;\n    }\n    if (this.hasBody()) {\n      return \"POST\";\n    }\n    return \"GET\";\n  }\n  set method(method) {\n    if (method == null) {\n      method = \"\";\n    }\n    this.#method = String(method).toUpperCase();\n  }\n  /**\n   *  The headers that will be used when requesting the URI. All\n   *  keys are lower-case.\n   *\n   *  This object is a copy, so any chnages will **NOT** be reflected\n   *  in the ``FetchRequest``.\n   *\n   *  To set a header entry, use the ``setHeader`` method.\n   */\n  get headers() {\n    const headers = Object.assign({}, this.#headers);\n    if (this.#creds) {\n      headers[\"authorization\"] = `Basic ${(0, base64_js_1.encodeBase64)((0, utf8_js_1.toUtf8Bytes)(this.#creds))}`;\n    }\n    ;\n    if (this.allowGzip) {\n      headers[\"accept-encoding\"] = \"gzip\";\n    }\n    if (headers[\"content-type\"] == null && this.#bodyType) {\n      headers[\"content-type\"] = this.#bodyType;\n    }\n    if (this.body) {\n      headers[\"content-length\"] = String(this.body.length);\n    }\n    return headers;\n  }\n  /**\n   *  Get the header for %%key%%, ignoring case.\n   */\n  getHeader(key) {\n    return this.headers[key.toLowerCase()];\n  }\n  /**\n   *  Set the header for %%key%% to %%value%%. All values are coerced\n   *  to a string.\n   */\n  setHeader(key, value) {\n    this.#headers[String(key).toLowerCase()] = String(value);\n  }\n  /**\n   *  Clear all headers, resetting all intrinsic headers.\n   */\n  clearHeaders() {\n    this.#headers = {};\n  }\n  [Symbol.iterator]() {\n    const headers = this.headers;\n    const keys = Object.keys(headers);\n    let index = 0;\n    return {\n      next: () => {\n        if (index < keys.length) {\n          const key = keys[index++];\n          return {\n            value: [key, headers[key]],\n            done: false\n          };\n        }\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  /**\n   *  The value that will be sent for the ``Authorization`` header.\n   *\n   *  To set the credentials, use the ``setCredentials`` method.\n   */\n  get credentials() {\n    return this.#creds || null;\n  }\n  /**\n   *  Sets an ``Authorization`` for %%username%% with %%password%%.\n   */\n  setCredentials(username, password) {\n    (0, errors_js_1.assertArgument)(!username.match(/:/), \"invalid basic authentication username\", \"username\", \"[REDACTED]\");\n    this.#creds = `${username}:${password}`;\n  }\n  /**\n   *  Enable and request gzip-encoded responses. The response will\n   *  automatically be decompressed. //(default: true)//\n   */\n  get allowGzip() {\n    return this.#gzip;\n  }\n  set allowGzip(value) {\n    this.#gzip = !!value;\n  }\n  /**\n   *  Allow ``Authentication`` credentials to be sent over insecure\n   *  channels. //(default: false)//\n   */\n  get allowInsecureAuthentication() {\n    return !!this.#allowInsecure;\n  }\n  set allowInsecureAuthentication(value) {\n    this.#allowInsecure = !!value;\n  }\n  /**\n   *  The timeout (in milliseconds) to wait for a complere response.\n   *  //(default: 5 minutes)//\n   */\n  get timeout() {\n    return this.#timeout;\n  }\n  set timeout(timeout) {\n    (0, errors_js_1.assertArgument)(timeout >= 0, \"timeout must be non-zero\", \"timeout\", timeout);\n    this.#timeout = timeout;\n  }\n  /**\n   *  This function is called prior to each request, for example\n   *  during a redirection or retry in case of server throttling.\n   *\n   *  This offers an opportunity to populate headers or update\n   *  content before sending a request.\n   */\n  get preflightFunc() {\n    return this.#preflight || null;\n  }\n  set preflightFunc(preflight) {\n    this.#preflight = preflight;\n  }\n  /**\n   *  This function is called after each response, offering an\n   *  opportunity to provide client-level throttling or updating\n   *  response data.\n   *\n   *  Any error thrown in this causes the ``send()`` to throw.\n   *\n   *  To schedule a retry attempt (assuming the maximum retry limit\n   *  has not been reached), use [[response.throwThrottleError]].\n   */\n  get processFunc() {\n    return this.#process || null;\n  }\n  set processFunc(process) {\n    this.#process = process;\n  }\n  /**\n   *  This function is called on each retry attempt.\n   */\n  get retryFunc() {\n    return this.#retry || null;\n  }\n  set retryFunc(retry) {\n    this.#retry = retry;\n  }\n  /**\n   *  Create a new FetchRequest instance with default values.\n   *\n   *  Once created, each property may be set before issuing a\n   *  ``.send()`` to make teh request.\n   */\n  constructor(url) {\n    this.#url = String(url);\n    this.#allowInsecure = false;\n    this.#gzip = true;\n    this.#headers = {};\n    this.#method = \"\";\n    this.#timeout = 300000;\n    this.#throttle = {\n      slotInterval: SLOT_INTERVAL,\n      maxAttempts: MAX_ATTEMPTS\n    };\n  }\n  toString() {\n    return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${this.#body ? (0, data_js_1.hexlify)(this.#body) : \"null\"}>`;\n  }\n  /**\n   *  Update the throttle parameters used to determine maximum\n   *  attempts and exponential-backoff properties.\n   */\n  setThrottleParams(params) {\n    if (params.slotInterval != null) {\n      this.#throttle.slotInterval = params.slotInterval;\n    }\n    if (params.maxAttempts != null) {\n      this.#throttle.maxAttempts = params.maxAttempts;\n    }\n  }\n  async #send(attempt, expires, delay, _request, _response) {\n    if (attempt >= this.#throttle.maxAttempts) {\n      return _response.makeServerError(\"exceeded maximum retry limit\");\n    }\n    (0, errors_js_1.assert)(getTime() <= expires, \"timeout\", \"TIMEOUT\", {\n      operation: \"request.send\",\n      reason: \"timeout\",\n      request: _request\n    });\n    if (delay > 0) {\n      await wait(delay);\n    }\n    let req = this.clone();\n    const scheme = (req.url.split(\":\")[0] || \"\").toLowerCase();\n    // Process any Gateways\n    if (scheme in Gateways) {\n      const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));\n      if (result instanceof FetchResponse) {\n        let response = result;\n        if (this.processFunc) {\n          checkSignal(_request.#signal);\n          try {\n            response = await this.processFunc(req, response);\n          } catch (error) {\n            // Something went wrong during processing; throw a 5xx server error\n            if (error.throttle == null || typeof error.stall !== \"number\") {\n              response.makeServerError(\"error in post-processing function\", error).assertOk();\n            }\n            // Ignore throttling\n          }\n        }\n\n        return response;\n      }\n      req = result;\n    }\n    // We have a preflight function; update the request\n    if (this.preflightFunc) {\n      req = await this.preflightFunc(req);\n    }\n    const resp = await getUrlFunc(req, checkSignal(_request.#signal));\n    let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);\n    if (response.statusCode === 301 || response.statusCode === 302) {\n      // Redirect\n      try {\n        const location = response.headers.location || \"\";\n        return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);\n      } catch (error) {}\n      // Things won't get any better on another attempt; abort\n      return response;\n    } else if (response.statusCode === 429) {\n      // Throttle\n      if (this.retryFunc == null || (await this.retryFunc(req, response, attempt))) {\n        const retryAfter = response.headers[\"retry-after\"];\n        let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n        if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n          delay = parseInt(retryAfter);\n        }\n        return req.clone().#send(attempt + 1, expires, delay, _request, response);\n      }\n    }\n    if (this.processFunc) {\n      checkSignal(_request.#signal);\n      try {\n        response = await this.processFunc(req, response);\n      } catch (error) {\n        // Something went wrong during processing; throw a 5xx server error\n        if (error.throttle == null || typeof error.stall !== \"number\") {\n          response.makeServerError(\"error in post-processing function\", error).assertOk();\n        }\n        // Throttle\n        let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n        ;\n        if (error.stall >= 0) {\n          delay = error.stall;\n        }\n        return req.clone().#send(attempt + 1, expires, delay, _request, response);\n      }\n    }\n    return response;\n  }\n  /**\n   *  Resolves to the response by sending the request.\n   */\n  send() {\n    (0, errors_js_1.assert)(this.#signal == null, \"request already sent\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fetchRequest.send\"\n    });\n    this.#signal = new FetchCancelSignal(this);\n    return this.#send(0, getTime() + this.timeout, 0, this, new FetchResponse(0, \"\", {}, null, this));\n  }\n  /**\n   *  Cancels the inflight response, causing a ``CANCELLED``\n   *  error to be rejected from the [[send]].\n   */\n  cancel() {\n    (0, errors_js_1.assert)(this.#signal != null, \"request has not been sent\", \"UNSUPPORTED_OPERATION\", {\n      operation: \"fetchRequest.cancel\"\n    });\n    const signal = fetchSignals.get(this);\n    if (!signal) {\n      throw new Error(\"missing signal; should not happen\");\n    }\n    signal();\n  }\n  /**\n   *  Returns a new [[FetchRequest]] that represents the redirection\n   *  to %%location%%.\n   */\n  redirect(location) {\n    // Redirection; for now we only support absolute locataions\n    const current = this.url.split(\":\")[0].toLowerCase();\n    const target = location.split(\":\")[0].toLowerCase();\n    // Don't allow redirecting:\n    // - non-GET requests\n    // - downgrading the security (e.g. https => http)\n    // - to non-HTTP (or non-HTTPS) protocols [this could be relaxed?]\n    (0, errors_js_1.assert)(this.method === \"GET\" && (current !== \"https\" || target !== \"http\") && location.match(/^https?:/), `unsupported redirect`, \"UNSUPPORTED_OPERATION\", {\n      operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`\n    });\n    // Create a copy of this request, with a new URL\n    const req = new FetchRequest(location);\n    req.method = \"GET\";\n    req.allowGzip = this.allowGzip;\n    req.timeout = this.timeout;\n    req.#headers = Object.assign({}, this.#headers);\n    if (this.#body) {\n      req.#body = new Uint8Array(this.#body);\n    }\n    req.#bodyType = this.#bodyType;\n    // Do not forward credentials unless on the same domain; only absolute\n    //req.allowInsecure = false;\n    // paths are currently supported; may want a way to specify to forward?\n    //setStore(req.#props, \"creds\", getStore(this.#pros, \"creds\"));\n    return req;\n  }\n  /**\n   *  Create a new copy of this request.\n   */\n  clone() {\n    const clone = new FetchRequest(this.url);\n    // Preserve \"default method\" (i.e. null)\n    clone.#method = this.#method;\n    // Preserve \"default body\" with type, copying the Uint8Array is present\n    if (this.#body) {\n      clone.#body = this.#body;\n    }\n    clone.#bodyType = this.#bodyType;\n    // Preserve \"default headers\"\n    clone.#headers = Object.assign({}, this.#headers);\n    // Credentials is readonly, so we copy internally\n    clone.#creds = this.#creds;\n    if (this.allowGzip) {\n      clone.allowGzip = true;\n    }\n    clone.timeout = this.timeout;\n    if (this.allowInsecureAuthentication) {\n      clone.allowInsecureAuthentication = true;\n    }\n    clone.#preflight = this.#preflight;\n    clone.#process = this.#process;\n    clone.#retry = this.#retry;\n    return clone;\n  }\n  /**\n   *  Locks all static configuration for gateways and FetchGetUrlFunc\n   *  registration.\n   */\n  static lockConfig() {\n    locked = true;\n  }\n  /**\n   *  Get the current Gateway function for %%scheme%%.\n   */\n  static getGateway(scheme) {\n    return Gateways[scheme.toLowerCase()] || null;\n  }\n  /**\n   *  Use the %%func%% when fetching URIs using %%scheme%%.\n   *\n   *  This method affects all requests globally.\n   *\n   *  If [[lockConfig]] has been called, no change is made and this\n   *  throws.\n   */\n  static registerGateway(scheme, func) {\n    scheme = scheme.toLowerCase();\n    if (scheme === \"http\" || scheme === \"https\") {\n      throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);\n    }\n    if (locked) {\n      throw new Error(\"gateways locked\");\n    }\n    Gateways[scheme] = func;\n  }\n  /**\n   *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.\n   *\n   *  This method affects all requests globally.\n   *\n   *  If [[lockConfig]] has been called, no change is made and this\n   *  throws.\n   */\n  static registerGetUrl(getUrl) {\n    if (locked) {\n      throw new Error(\"gateways locked\");\n    }\n    getUrlFunc = getUrl;\n  }\n  /**\n   *  Creates a function that can \"fetch\" data URIs.\n   *\n   *  Note that this is automatically done internally to support\n   *  data URIs, so it is not necessary to register it.\n   *\n   *  This is not generally something that is needed, but may\n   *  be useful in a wrapper to perfom custom data URI functionality.\n   */\n  static createDataGateway() {\n    return dataGatewayFunc;\n  }\n  /**\n   *  Creates a function that will fetch IPFS (unvalidated) from\n   *  a custom gateway baseUrl.\n   *\n   *  The default IPFS gateway used internally is\n   *  ``\"https:/\\/gateway.ipfs.io/ipfs/\"``.\n   */\n  static createIpfsGatewayFunc(baseUrl) {\n    return getIpfsGatewayFunc(baseUrl);\n  }\n}\nexports.FetchRequest = FetchRequest;\n;\n/**\n *  The response for a FetchREquest.\n */\nclass FetchResponse {\n  #statusCode;\n  #statusMessage;\n  #headers;\n  #body;\n  #request;\n  #error;\n  toString() {\n    return `<FetchResponse status=${this.statusCode} body=${this.#body ? (0, data_js_1.hexlify)(this.#body) : \"null\"}>`;\n  }\n  /**\n   *  The response status code.\n   */\n  get statusCode() {\n    return this.#statusCode;\n  }\n  /**\n   *  The response status message.\n   */\n  get statusMessage() {\n    return this.#statusMessage;\n  }\n  /**\n   *  The response headers. All keys are lower-case.\n   */\n  get headers() {\n    return Object.assign({}, this.#headers);\n  }\n  /**\n   *  The response body, or ``null`` if there was no body.\n   */\n  get body() {\n    return this.#body == null ? null : new Uint8Array(this.#body);\n  }\n  /**\n   *  The response body as a UTF-8 encoded string, or the empty\n   *  string (i.e. ``\"\"``) if there was no body.\n   *\n   *  An error is thrown if the body is invalid UTF-8 data.\n   */\n  get bodyText() {\n    try {\n      return this.#body == null ? \"\" : (0, utf8_js_1.toUtf8String)(this.#body);\n    } catch (error) {\n      (0, errors_js_1.assert)(false, \"response body is not valid UTF-8 data\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"bodyText\",\n        info: {\n          response: this\n        }\n      });\n    }\n  }\n  /**\n   *  The response body, decoded as JSON.\n   *\n   *  An error is thrown if the body is invalid JSON-encoded data\n   *  or if there was no body.\n   */\n  get bodyJson() {\n    try {\n      return JSON.parse(this.bodyText);\n    } catch (error) {\n      (0, errors_js_1.assert)(false, \"response body is not valid JSON\", \"UNSUPPORTED_OPERATION\", {\n        operation: \"bodyJson\",\n        info: {\n          response: this\n        }\n      });\n    }\n  }\n  [Symbol.iterator]() {\n    const headers = this.headers;\n    const keys = Object.keys(headers);\n    let index = 0;\n    return {\n      next: () => {\n        if (index < keys.length) {\n          const key = keys[index++];\n          return {\n            value: [key, headers[key]],\n            done: false\n          };\n        }\n        return {\n          value: undefined,\n          done: true\n        };\n      }\n    };\n  }\n  constructor(statusCode, statusMessage, headers, body, request) {\n    this.#statusCode = statusCode;\n    this.#statusMessage = statusMessage;\n    this.#headers = Object.keys(headers).reduce((accum, k) => {\n      accum[k.toLowerCase()] = String(headers[k]);\n      return accum;\n    }, {});\n    this.#body = body == null ? null : new Uint8Array(body);\n    this.#request = request || null;\n    this.#error = {\n      message: \"\"\n    };\n  }\n  /**\n   *  Return a Response with matching headers and body, but with\n   *  an error status code (i.e. 599) and %%message%% with an\n   *  optional %%error%%.\n   */\n  makeServerError(message, error) {\n    let statusMessage;\n    if (!message) {\n      message = `${this.statusCode} ${this.statusMessage}`;\n      statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;\n    } else {\n      statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;\n    }\n    const response = new FetchResponse(599, statusMessage, this.headers, this.body, this.#request || undefined);\n    response.#error = {\n      message,\n      error\n    };\n    return response;\n  }\n  /**\n   *  If called within a [request.processFunc](FetchRequest-processFunc)\n   *  call, causes the request to retry as if throttled for %%stall%%\n   *  milliseconds.\n   */\n  throwThrottleError(message, stall) {\n    if (stall == null) {\n      stall = -1;\n    } else {\n      (0, errors_js_1.assertArgument)(Number.isInteger(stall) && stall >= 0, \"invalid stall timeout\", \"stall\", stall);\n    }\n    const error = new Error(message || \"throttling requests\");\n    (0, properties_js_1.defineProperties)(error, {\n      stall,\n      throttle: true\n    });\n    throw error;\n  }\n  /**\n   *  Get the header value for %%key%%, ignoring case.\n   */\n  getHeader(key) {\n    return this.headers[key.toLowerCase()];\n  }\n  /**\n   *  Returns true of the response has a body.\n   */\n  hasBody() {\n    return this.#body != null;\n  }\n  /**\n   *  The request made for this response.\n   */\n  get request() {\n    return this.#request;\n  }\n  /**\n   *  Returns true if this response was a success statusCode.\n   */\n  ok() {\n    return this.#error.message === \"\" && this.statusCode >= 200 && this.statusCode < 300;\n  }\n  /**\n   *  Throws a ``SERVER_ERROR`` if this response is not ok.\n   */\n  assertOk() {\n    if (this.ok()) {\n      return;\n    }\n    let {\n      message,\n      error\n    } = this.#error;\n    if (message === \"\") {\n      message = `server response ${this.statusCode} ${this.statusMessage}`;\n    }\n    (0, errors_js_1.assert)(false, message, \"SERVER_ERROR\", {\n      request: this.request || \"unknown request\",\n      response: this,\n      error\n    });\n  }\n}\nexports.FetchResponse = FetchResponse;\nfunction getTime() {\n  return new Date().getTime();\n}\nfunction unpercent(value) {\n  return (0, utf8_js_1.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n    return String.fromCharCode(parseInt(code, 16));\n  }));\n}\nfunction wait(delay) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}","map":{"version":3,"mappings":"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","names":["MAX_ATTEMPTS","SLOT_INTERVAL","getUrlFunc","geturl_js_1","reData","RegExp","reIpfs","locked","dataGatewayFunc","url","signal","match","Error","FetchResponse","unpercent","error","FetchRequest","getIpfsGatewayFunc","baseUrl","gatewayIpfs","Gateways","fetchSignals","WeakMap","FetchCancelSignal","constructor","request","set","listener","setTimeout","addListener","operation","push","cancelled","checkSignal","exports","String","body","Uint8Array","undefined","JSON","stringify","hasBody","method","toUpperCase","headers","Object","assign","allowGzip","length","getHeader","key","toLowerCase","setHeader","value","clearHeaders","Symbol","iterator","keys","index","next","done","credentials","setCredentials","username","password","allowInsecureAuthentication","timeout","preflightFunc","preflight","processFunc","process","retryFunc","retry","slotInterval","maxAttempts","toString","setThrottleParams","params","attempt","expires","delay","_request","_response","makeServerError","getTime","reason","wait","req","clone","scheme","split","result","response","throttle","stall","assertOk","resp","statusCode","statusMessage","location","redirect","retryAfter","Math","trunc","random","pow","parseInt","send","cancel","get","current","target","lockConfig","getGateway","registerGateway","func","registerGetUrl","getUrl","createDataGateway","createIpfsGatewayFunc","bodyText","info","bodyJson","parse","reduce","accum","k","message","throwThrottleError","Number","isInteger","ok","Date","replace","all","code","fromCharCode","Promise","resolve"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/utils/fetch.ts"],"sourcesContent":["/**\n *  Explain fetching here...\n *\n *  @_section api/utils/fetching:Fetching Web Content  [about-fetch]\n */\nimport { decodeBase64, encodeBase64 } from \"./base64.js\";\nimport { hexlify } from \"./data.js\";\nimport { assert, assertArgument } from \"./errors.js\";\nimport { defineProperties } from \"./properties.js\";\nimport { toUtf8Bytes, toUtf8String } from \"./utf8.js\"\n\nimport { getUrl } from \"./geturl.js\";\n\n\nexport type GetUrlResponse = {\n    statusCode: number,\n    statusMessage: string,\n    headers: Record<string, string>,\n    body: null | Uint8Array\n};\n\nexport type FetchThrottleParams = {\n    maxAttempts?: number;\n    slotInterval?: number;\n};\n/**\n *  Called before any network request, allowing updated headers (e.g. Bearer tokens), etc.\n */\nexport type FetchPreflightFunc = (req: FetchRequest) => Promise<FetchRequest>;\n\n/**\n *  Called on the response, allowing client-based throttling logic or post-processing.\n */\nexport type FetchProcessFunc = (req: FetchRequest, resp: FetchResponse) => Promise<FetchResponse>;\n\n/**\n *  Called prior to each retry; return true to retry, false to abort.\n */\nexport type FetchRetryFunc = (req: FetchRequest, resp: FetchResponse, attempt: number) => Promise<boolean>;\n\n/**\n *  Called on Gateway URLs.\n */\nexport type FetchGatewayFunc = (url: string, signal?: FetchCancelSignal) => Promise<FetchRequest | FetchResponse>;\n\n/**\n *  Used to perform a fetch; use this to override the underlying network\n *  fetch layer. In NodeJS, the default uses the \"http\" and \"https\" libraries\n *  and in the browser ``fetch`` is used. If you wish to use Axios, this is\n *  how you would register it.\n */\nexport type FetchGetUrlFunc = (req: FetchRequest, signal?: FetchCancelSignal) => Promise<GetUrlResponse>;\n\n\nconst MAX_ATTEMPTS = 12;\nconst SLOT_INTERVAL = 250;\n\n// The global FetchGetUrlFunc implementation.\nlet getUrlFunc: FetchGetUrlFunc = getUrl;\n\nconst reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\nconst reIpfs = new RegExp(\"^ipfs:/\\/(ipfs/)?(.*)$\", \"i\");\n\n// If locked, new Gateways cannot be added\nlet locked = false;\n\n// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs\nasync function dataGatewayFunc(url: string, signal?: FetchCancelSignal): Promise<FetchResponse> {\n    try {\n        const match = url.match(reData);\n        if (!match) { throw new Error(\"invalid data\"); }\n        return new FetchResponse(200, \"OK\", {\n            \"content-type\": (match[1] || \"text/plain\"),\n        }, (match[2] ? decodeBase64(match[3]): unpercent(match[3])));\n    } catch (error) {\n        return new FetchResponse(599, \"BAD REQUEST (invalid data: URI)\", { }, null, new FetchRequest(url));\n    }\n}\n\n/**\n *  Returns a [[FetchGatewayFunc]] for fetching content from a standard\n *  IPFS gateway hosted at %%baseUrl%%.\n */\nfunction getIpfsGatewayFunc(baseUrl: string): FetchGatewayFunc {\n    async function gatewayIpfs(url: string, signal?: FetchCancelSignal): Promise<FetchRequest | FetchResponse> {\n        try {\n            const match = url.match(reIpfs);\n            if (!match) { throw new Error(\"invalid link\"); }\n            return new FetchRequest(`${ baseUrl }${ match[2] }`);\n        } catch (error) {\n            return new FetchResponse(599, \"BAD REQUEST (invalid IPFS URI)\", { }, null, new FetchRequest(url));\n        }\n    }\n\n    return gatewayIpfs;\n}\n\nconst Gateways: Record<string, FetchGatewayFunc> = {\n    \"data\": dataGatewayFunc,\n    \"ipfs\": getIpfsGatewayFunc(\"https:/\\/gateway.ipfs.io/ipfs/\")\n};\n\nconst fetchSignals: WeakMap<FetchRequest, () => void> = new WeakMap();\n\n/**\n *  @_ignore\n */\nexport class FetchCancelSignal {\n    #listeners: Array<() => void>;\n    #cancelled: boolean;\n\n    constructor(request: FetchRequest) {\n        this.#listeners = [ ];\n        this.#cancelled = false;\n\n        fetchSignals.set(request, () => {\n            if (this.#cancelled) { return; }\n            this.#cancelled = true;\n\n            for (const listener of this.#listeners) {\n                setTimeout(() => { listener(); }, 0);\n            }\n            this.#listeners = [ ];\n        });\n    }\n\n    addListener(listener: () => void): void {\n        assert(!this.#cancelled, \"singal already cancelled\", \"UNSUPPORTED_OPERATION\", {\n            operation: \"fetchCancelSignal.addCancelListener\"\n        });\n        this.#listeners.push(listener);\n    }\n\n    get cancelled(): boolean { return this.#cancelled; }\n\n    checkSignal(): void {\n        assert(!this.cancelled, \"cancelled\", \"CANCELLED\", { });\n    }\n}\n\n// Check the signal, throwing if it is cancelled\nfunction checkSignal(signal?: FetchCancelSignal): FetchCancelSignal {\n    if (signal == null) { throw new Error(\"missing signal; should not happen\"); }\n    signal.checkSignal();\n    return signal;\n}\n\n/**\n *  Represents a request for a resource using a URI.\n *\n *  By default, the supported schemes are ``HTTP``, ``HTTPS``, ``data:``,\n *  and ``IPFS:``.\n *\n *  Additional schemes can be added globally using [[registerGateway]].\n *\n *  @example:\n *    req = new FetchRequest(\"https://www.ricmoo.com\")\n *    resp = await req.send()\n *    resp.body.length\n *    //_result:\n */\nexport class FetchRequest implements Iterable<[ key: string, value: string ]> {\n    #allowInsecure: boolean;\n    #gzip: boolean;\n    #headers: Record<string, string>;\n    #method: string;\n    #timeout: number;\n    #url: string;\n\n    #body?: Uint8Array;\n    #bodyType?: string;\n    #creds?: string;\n\n    // Hooks\n    #preflight?: null | FetchPreflightFunc;\n    #process?: null | FetchProcessFunc;\n    #retry?: null | FetchRetryFunc;\n\n    #signal?: FetchCancelSignal;\n\n    #throttle: Required<FetchThrottleParams>;\n\n    /**\n     *  The fetch URI to requrest.\n     */\n    get url(): string { return this.#url; }\n    set url(url: string) {\n        this.#url = String(url);\n    }\n\n    /**\n     *  The fetch body, if any, to send as the request body. //(default: null)//\n     *\n     *  When setting a body, the intrinsic ``Content-Type`` is automatically\n     *  set and will be used if **not overridden** by setting a custom\n     *  header.\n     *\n     *  If %%body%% is null, the body is cleared (along with the\n     *  intrinsic ``Content-Type``) and the .\n     *\n     *  If %%body%% is a string, the intrincis ``Content-Type`` is set to\n     *  ``text/plain``.\n     *\n     *  If %%body%% is a Uint8Array, the intrincis ``Content-Type`` is set to\n     *  ``application/octet-stream``.\n     *\n     *  If %%body%% is any other object, the intrincis ``Content-Type`` is\n     *  set to ``application/json``.\n     */\n    get body(): null | Uint8Array {\n        if (this.#body == null) { return null; }\n        return new Uint8Array(this.#body);\n    }\n    set body(body: null | string | Readonly<object> | Readonly<Uint8Array>) {\n        if (body == null) {\n            this.#body = undefined;\n            this.#bodyType = undefined;\n        } else if (typeof(body) === \"string\") {\n            this.#body = toUtf8Bytes(body);\n            this.#bodyType = \"text/plain\";\n        } else if (body instanceof Uint8Array) {\n            this.#body = body;\n            this.#bodyType = \"application/octet-stream\";\n        } else if (typeof(body) === \"object\") {\n            this.#body = toUtf8Bytes(JSON.stringify(body));\n            this.#bodyType = \"application/json\";\n        } else {\n            throw new Error(\"invalid body\");\n        }\n    }\n\n    /**\n     *  Returns true if the request has a body.\n     */\n    hasBody(): this is (FetchRequest & { body: Uint8Array }) {\n        return (this.#body != null);\n    }\n\n    /**\n     *  The HTTP method to use when requesting the URI. If no method\n     *  has been explicitly set, then ``GET`` is used if the body is\n     *  null and ``POST`` otherwise.\n     */\n    get method(): string {\n        if (this.#method) { return this.#method; }\n        if (this.hasBody()) { return \"POST\"; }\n        return \"GET\";\n    }\n    set method(method: null | string) {\n        if (method == null) { method = \"\"; }\n        this.#method = String(method).toUpperCase();\n    }\n\n    /**\n     *  The headers that will be used when requesting the URI. All\n     *  keys are lower-case.\n     *\n     *  This object is a copy, so any chnages will **NOT** be reflected\n     *  in the ``FetchRequest``.\n     *\n     *  To set a header entry, use the ``setHeader`` method.\n     */\n    get headers(): Record<string, string> {\n        const headers = Object.assign({ }, this.#headers);\n\n        if (this.#creds) {\n            headers[\"authorization\"] = `Basic ${ encodeBase64(toUtf8Bytes(this.#creds)) }`;\n        };\n\n        if (this.allowGzip) {\n            headers[\"accept-encoding\"] = \"gzip\";\n        }\n\n        if (headers[\"content-type\"] == null && this.#bodyType) {\n            headers[\"content-type\"] = this.#bodyType;\n        }\n        if (this.body) { headers[\"content-length\"] = String(this.body.length); }\n\n        return headers;\n    }\n\n    /**\n     *  Get the header for %%key%%, ignoring case.\n     */\n    getHeader(key: string): string {\n        return this.headers[key.toLowerCase()];\n    }\n\n    /**\n     *  Set the header for %%key%% to %%value%%. All values are coerced\n     *  to a string.\n     */\n    setHeader(key: string, value: string | number): void {\n        this.#headers[String(key).toLowerCase()] = String(value);\n    }\n\n    /**\n     *  Clear all headers, resetting all intrinsic headers.\n     */\n    clearHeaders(): void {\n        this.#headers = { };\n    }\n\n    [Symbol.iterator](): Iterator<[ key: string, value: string ]> {\n        const headers = this.headers;\n        const keys = Object.keys(headers);\n        let index = 0;\n        return {\n            next: () => {\n                if (index < keys.length) {\n                    const key = keys[index++];\n                    return {\n                        value: [ key, headers[key] ], done: false\n                    }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    /**\n     *  The value that will be sent for the ``Authorization`` header.\n     *\n     *  To set the credentials, use the ``setCredentials`` method.\n     */\n    get credentials(): null | string {\n        return this.#creds || null;\n    }\n\n    /**\n     *  Sets an ``Authorization`` for %%username%% with %%password%%.\n     */\n    setCredentials(username: string, password: string): void {\n        assertArgument(!username.match(/:/), \"invalid basic authentication username\", \"username\", \"[REDACTED]\");\n        this.#creds = `${ username }:${ password }`;\n    }\n\n    /**\n     *  Enable and request gzip-encoded responses. The response will\n     *  automatically be decompressed. //(default: true)//\n     */\n    get allowGzip(): boolean {\n        return this.#gzip;\n    }\n    set allowGzip(value: boolean) {\n        this.#gzip = !!value;\n    }\n\n    /**\n     *  Allow ``Authentication`` credentials to be sent over insecure\n     *  channels. //(default: false)//\n     */\n    get allowInsecureAuthentication(): boolean {\n        return !!this.#allowInsecure;\n    }\n    set allowInsecureAuthentication(value: boolean) {\n        this.#allowInsecure = !!value;\n    }\n\n    /**\n     *  The timeout (in milliseconds) to wait for a complere response.\n     *  //(default: 5 minutes)//\n     */\n    get timeout(): number { return this.#timeout; }\n    set timeout(timeout: number) {\n        assertArgument(timeout >= 0, \"timeout must be non-zero\", \"timeout\", timeout);\n        this.#timeout = timeout;\n    }\n\n    /**\n     *  This function is called prior to each request, for example\n     *  during a redirection or retry in case of server throttling.\n     *\n     *  This offers an opportunity to populate headers or update\n     *  content before sending a request.\n     */\n    get preflightFunc(): null | FetchPreflightFunc {\n        return this.#preflight || null;\n    }\n    set preflightFunc(preflight: null | FetchPreflightFunc) {\n        this.#preflight = preflight;\n    }\n\n    /**\n     *  This function is called after each response, offering an\n     *  opportunity to provide client-level throttling or updating\n     *  response data.\n     *\n     *  Any error thrown in this causes the ``send()`` to throw.\n     *\n     *  To schedule a retry attempt (assuming the maximum retry limit\n     *  has not been reached), use [[response.throwThrottleError]].\n     */\n    get processFunc(): null | FetchProcessFunc {\n        return this.#process || null;\n    }\n    set processFunc(process: null | FetchProcessFunc) {\n        this.#process = process;\n    }\n\n    /**\n     *  This function is called on each retry attempt.\n     */\n    get retryFunc(): null | FetchRetryFunc {\n        return this.#retry || null;\n    }\n    set retryFunc(retry: null | FetchRetryFunc) {\n        this.#retry = retry;\n    }\n\n    /**\n     *  Create a new FetchRequest instance with default values.\n     *\n     *  Once created, each property may be set before issuing a\n     *  ``.send()`` to make teh request.\n     */\n    constructor(url: string) {\n        this.#url = String(url);\n\n        this.#allowInsecure = false;\n        this.#gzip = true;\n        this.#headers = { };\n        this.#method = \"\";\n        this.#timeout = 300000;\n\n        this.#throttle = {\n            slotInterval: SLOT_INTERVAL,\n            maxAttempts: MAX_ATTEMPTS\n        };\n    }\n\n    toString(): string {\n        return `<FetchRequest method=${ JSON.stringify(this.method) } url=${ JSON.stringify(this.url) } headers=${ JSON.stringify(this.headers) } body=${ this.#body ? hexlify(this.#body): \"null\" }>`;\n    }\n\n    /**\n     *  Update the throttle parameters used to determine maximum\n     *  attempts and exponential-backoff properties.\n     */\n    setThrottleParams(params: FetchThrottleParams): void {\n        if (params.slotInterval != null) {\n            this.#throttle.slotInterval = params.slotInterval;\n        }\n        if (params.maxAttempts != null) {\n            this.#throttle.maxAttempts = params.maxAttempts;\n        }\n    }\n\n    async #send(attempt: number, expires: number, delay: number, _request: FetchRequest, _response: FetchResponse): Promise<FetchResponse> {\n        if (attempt >= this.#throttle.maxAttempts) {\n            return _response.makeServerError(\"exceeded maximum retry limit\");\n        }\n\n        assert(getTime() <= expires, \"timeout\", \"TIMEOUT\", {\n            operation: \"request.send\", reason: \"timeout\", request: _request\n        });\n\n        if (delay > 0) { await wait(delay); }\n\n        let req = this.clone();\n        const scheme = (req.url.split(\":\")[0] || \"\").toLowerCase();\n\n        // Process any Gateways\n        if (scheme in Gateways) {\n            const result = await Gateways[scheme](req.url, checkSignal(_request.#signal));\n            if (result instanceof FetchResponse) {\n                let response = result;\n\n                if (this.processFunc) {\n                    checkSignal(_request.#signal);\n                    try {\n                        response = await this.processFunc(req, response);\n                    } catch (error: any) {\n\n                        // Something went wrong during processing; throw a 5xx server error\n                        if (error.throttle == null || typeof(error.stall) !== \"number\") {\n                            response.makeServerError(\"error in post-processing function\", error).assertOk();\n                        }\n\n                        // Ignore throttling\n                    }\n                }\n\n                return response;\n            }\n            req = result;\n        }\n\n        // We have a preflight function; update the request\n        if (this.preflightFunc) { req = await this.preflightFunc(req); }\n\n        const resp = await getUrlFunc(req, checkSignal(_request.#signal));\n        let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request);\n\n        if (response.statusCode === 301 || response.statusCode === 302) {\n\n            // Redirect\n            try {\n                const location = response.headers.location || \"\";\n                return req.redirect(location).#send(attempt + 1, expires, 0, _request, response);\n            } catch (error) { }\n\n            // Things won't get any better on another attempt; abort\n            return response;\n\n        } else if (response.statusCode === 429) {\n\n            // Throttle\n            if (this.retryFunc == null || (await this.retryFunc(req, response, attempt))) {\n                const retryAfter = response.headers[\"retry-after\"];\n                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));\n                if (typeof(retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                    delay = parseInt(retryAfter);\n                }\n                return req.clone().#send(attempt + 1, expires, delay, _request, response);\n            }\n        }\n\n        if (this.processFunc) {\n            checkSignal(_request.#signal);\n            try {\n                response = await this.processFunc(req, response);\n            } catch (error: any) {\n\n                // Something went wrong during processing; throw a 5xx server error\n                if (error.throttle == null || typeof(error.stall) !== \"number\") {\n                    response.makeServerError(\"error in post-processing function\", error).assertOk();\n                }\n\n                // Throttle\n                let delay = this.#throttle.slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));;\n                if (error.stall >= 0) { delay = error.stall; }\n\n                return req.clone().#send(attempt + 1, expires, delay, _request, response);\n            }\n        }\n\n        return response;\n    }\n\n    /**\n     *  Resolves to the response by sending the request.\n     */\n    send(): Promise<FetchResponse> {\n        assert(this.#signal == null, \"request already sent\", \"UNSUPPORTED_OPERATION\", { operation: \"fetchRequest.send\" });\n        this.#signal = new FetchCancelSignal(this);\n        return this.#send(0, getTime() + this.timeout, 0, this, new FetchResponse(0, \"\", { }, null, this));\n    }\n\n    /**\n     *  Cancels the inflight response, causing a ``CANCELLED``\n     *  error to be rejected from the [[send]].\n     */\n    cancel(): void {\n        assert(this.#signal != null, \"request has not been sent\", \"UNSUPPORTED_OPERATION\", { operation: \"fetchRequest.cancel\" });\n        const signal = fetchSignals.get(this);\n        if (!signal) { throw new Error(\"missing signal; should not happen\"); }\n        signal();\n    }\n\n    /**\n     *  Returns a new [[FetchRequest]] that represents the redirection\n     *  to %%location%%.\n     */\n    redirect(location: string): FetchRequest {\n        // Redirection; for now we only support absolute locataions\n        const current = this.url.split(\":\")[0].toLowerCase();\n        const target = location.split(\":\")[0].toLowerCase();\n\n        // Don't allow redirecting:\n        // - non-GET requests\n        // - downgrading the security (e.g. https => http)\n        // - to non-HTTP (or non-HTTPS) protocols [this could be relaxed?]\n        assert(this.method === \"GET\" && (current !== \"https\" || target !== \"http\") && location.match(/^https?:/), `unsupported redirect`, \"UNSUPPORTED_OPERATION\", {\n            operation: `redirect(${ this.method } ${ JSON.stringify(this.url) } => ${ JSON.stringify(location) })`\n        });\n\n        // Create a copy of this request, with a new URL\n        const req = new FetchRequest(location);\n        req.method = \"GET\";\n        req.allowGzip = this.allowGzip;\n        req.timeout = this.timeout;\n        req.#headers = Object.assign({ }, this.#headers);\n        if (this.#body) { req.#body = new Uint8Array(this.#body); }\n        req.#bodyType = this.#bodyType;\n\n        // Do not forward credentials unless on the same domain; only absolute\n        //req.allowInsecure = false;\n        // paths are currently supported; may want a way to specify to forward?\n        //setStore(req.#props, \"creds\", getStore(this.#pros, \"creds\"));\n\n        return req;\n    }\n\n    /**\n     *  Create a new copy of this request.\n     */\n    clone(): FetchRequest {\n        const clone = new FetchRequest(this.url);\n\n        // Preserve \"default method\" (i.e. null)\n        clone.#method = this.#method;\n\n        // Preserve \"default body\" with type, copying the Uint8Array is present\n        if (this.#body) { clone.#body = this.#body; }\n        clone.#bodyType = this.#bodyType;\n\n        // Preserve \"default headers\"\n        clone.#headers = Object.assign({ }, this.#headers);\n\n        // Credentials is readonly, so we copy internally\n        clone.#creds = this.#creds;\n\n        if (this.allowGzip) { clone.allowGzip = true; }\n\n        clone.timeout = this.timeout;\n        if (this.allowInsecureAuthentication) { clone.allowInsecureAuthentication = true; }\n\n        clone.#preflight = this.#preflight;\n        clone.#process = this.#process;\n        clone.#retry = this.#retry;\n\n        return clone;\n    }\n\n    /**\n     *  Locks all static configuration for gateways and FetchGetUrlFunc\n     *  registration.\n     */\n    static lockConfig(): void {\n        locked = true;\n    }\n\n    /**\n     *  Get the current Gateway function for %%scheme%%.\n     */\n    static getGateway(scheme: string): null | FetchGatewayFunc {\n        return Gateways[scheme.toLowerCase()] || null;\n    }\n\n    /**\n     *  Use the %%func%% when fetching URIs using %%scheme%%.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */\n    static registerGateway(scheme: string, func: FetchGatewayFunc): void {\n        scheme = scheme.toLowerCase();\n        if (scheme === \"http\" || scheme === \"https\") {\n            throw new Error(`cannot intercept ${ scheme }; use registerGetUrl`);\n        }\n        if (locked) { throw new Error(\"gateways locked\"); }\n        Gateways[scheme] = func;\n    }\n\n    /**\n     *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.\n     *\n     *  This method affects all requests globally.\n     *\n     *  If [[lockConfig]] has been called, no change is made and this\n     *  throws.\n     */\n    static registerGetUrl(getUrl: FetchGetUrlFunc): void {\n        if (locked) { throw new Error(\"gateways locked\"); }\n        getUrlFunc = getUrl;\n    }\n\n    /**\n     *  Creates a function that can \"fetch\" data URIs.\n     *\n     *  Note that this is automatically done internally to support\n     *  data URIs, so it is not necessary to register it.\n     *\n     *  This is not generally something that is needed, but may\n     *  be useful in a wrapper to perfom custom data URI functionality.\n     */\n    static createDataGateway(): FetchGatewayFunc {\n        return dataGatewayFunc;\n    }\n\n    /**\n     *  Creates a function that will fetch IPFS (unvalidated) from\n     *  a custom gateway baseUrl.\n     *\n     *  The default IPFS gateway used internally is\n     *  ``\"https:/\\/gateway.ipfs.io/ipfs/\"``.\n     */\n    static createIpfsGatewayFunc(baseUrl: string): FetchGatewayFunc {\n        return getIpfsGatewayFunc(baseUrl);\n    }\n}\n\n\ninterface ThrottleError extends Error {\n    stall: number;\n    throttle: true;\n};\n\n/**\n *  The response for a FetchREquest.\n */\nexport class FetchResponse implements Iterable<[ key: string, value: string ]> {\n    #statusCode: number;\n    #statusMessage: string;\n    #headers: Record<string, string>;\n    #body: null | Readonly<Uint8Array>;\n    #request: null | FetchRequest;\n\n    #error: { error?: Error, message: string };\n\n    toString(): string {\n        return `<FetchResponse status=${ this.statusCode } body=${ this.#body ? hexlify(this.#body): \"null\" }>`;\n    }\n\n    /**\n     *  The response status code.\n     */\n    get statusCode(): number { return this.#statusCode; }\n\n    /**\n     *  The response status message.\n     */\n    get statusMessage(): string { return this.#statusMessage; }\n\n    /**\n     *  The response headers. All keys are lower-case.\n     */\n    get headers(): Record<string, string> { return Object.assign({ }, this.#headers); }\n\n    /**\n     *  The response body, or ``null`` if there was no body.\n     */\n    get body(): null | Readonly<Uint8Array> {\n        return (this.#body == null) ? null: new Uint8Array(this.#body);\n    }\n\n    /**\n     *  The response body as a UTF-8 encoded string, or the empty\n     *  string (i.e. ``\"\"``) if there was no body.\n     *\n     *  An error is thrown if the body is invalid UTF-8 data.\n     */\n    get bodyText(): string {\n        try {\n            return (this.#body == null) ? \"\": toUtf8String(this.#body);\n        } catch (error) {\n            assert(false, \"response body is not valid UTF-8 data\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"bodyText\", info: { response: this }\n            });\n        }\n    }\n\n    /**\n     *  The response body, decoded as JSON.\n     *\n     *  An error is thrown if the body is invalid JSON-encoded data\n     *  or if there was no body.\n     */\n    get bodyJson(): any {\n        try {\n            return JSON.parse(this.bodyText);\n        } catch (error) {\n            assert(false, \"response body is not valid JSON\", \"UNSUPPORTED_OPERATION\", {\n                operation: \"bodyJson\", info: { response: this }\n            });\n        }\n    }\n\n    [Symbol.iterator](): Iterator<[ key: string, value: string ]> {\n        const headers = this.headers;\n        const keys = Object.keys(headers);\n        let index = 0;\n        return {\n            next: () => {\n                if (index < keys.length) {\n                    const key = keys[index++];\n                    return {\n                        value: [ key, headers[key] ], done: false\n                    }\n                }\n                return { value: undefined, done: true };\n            }\n        };\n    }\n\n    constructor(statusCode: number, statusMessage: string, headers: Readonly<Record<string, string>>, body: null | Uint8Array, request?: FetchRequest) {\n        this.#statusCode = statusCode;\n        this.#statusMessage = statusMessage;\n        this.#headers = Object.keys(headers).reduce((accum, k) => {\n            accum[k.toLowerCase()] = String(headers[k]);\n            return accum;\n        }, <Record<string, string>>{ });\n        this.#body = ((body == null) ? null: new Uint8Array(body));\n        this.#request = (request || null);\n\n        this.#error = { message: \"\" };\n    }\n\n    /**\n     *  Return a Response with matching headers and body, but with\n     *  an error status code (i.e. 599) and %%message%% with an\n     *  optional %%error%%.\n     */\n    makeServerError(message?: string, error?: Error): FetchResponse {\n        let statusMessage: string;\n        if (!message) {\n            message = `${ this.statusCode } ${ this.statusMessage }`;\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${ message })`;\n        } else {\n            statusMessage = `CLIENT ESCALATED SERVER ERROR (${ this.statusCode } ${ this.statusMessage }; ${ message })`;\n        }\n        const response = new FetchResponse(599, statusMessage, this.headers,\n            this.body, this.#request || undefined);\n        response.#error = { message, error };\n        return response;\n    }\n\n    /**\n     *  If called within a [request.processFunc](FetchRequest-processFunc)\n     *  call, causes the request to retry as if throttled for %%stall%%\n     *  milliseconds.\n     */\n    throwThrottleError(message?: string, stall?: number): never {\n        if (stall == null) {\n            stall = -1;\n        } else {\n            assertArgument(Number.isInteger(stall) && stall >= 0, \"invalid stall timeout\", \"stall\", stall);\n        }\n\n        const error = new Error(message || \"throttling requests\");\n\n        defineProperties(<ThrottleError>error, { stall, throttle: true });\n\n        throw error;\n    }\n\n    /**\n     *  Get the header value for %%key%%, ignoring case.\n     */\n    getHeader(key: string): string {\n        return this.headers[key.toLowerCase()];\n    }\n\n    /**\n     *  Returns true of the response has a body.\n     */\n    hasBody(): this is (FetchResponse & { body: Uint8Array }) {\n        return (this.#body != null);\n    }\n\n    /**\n     *  The request made for this response.\n     */\n    get request(): null | FetchRequest { return this.#request; }\n\n    /**\n     *  Returns true if this response was a success statusCode.\n     */\n    ok(): boolean {\n        return (this.#error.message === \"\" && this.statusCode >= 200 && this.statusCode < 300);\n    }\n\n    /**\n     *  Throws a ``SERVER_ERROR`` if this response is not ok.\n     */\n    assertOk(): void {\n        if (this.ok()) { return; }\n        let { message, error } = this.#error;\n        if (message === \"\") {\n            message = `server response ${ this.statusCode } ${ this.statusMessage }`;\n        }\n        assert(false, message, \"SERVER_ERROR\", {\n            request: (this.request || \"unknown request\"), response: this, error\n        });\n    }\n}\n\n\nfunction getTime(): number { return (new Date()).getTime(); }\n\nfunction unpercent(value: string): Uint8Array {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n\nfunction wait(delay: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, delay));\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}