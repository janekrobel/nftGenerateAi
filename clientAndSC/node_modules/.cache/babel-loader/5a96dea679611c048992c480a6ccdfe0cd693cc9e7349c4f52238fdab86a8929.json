{"ast":null,"code":"import { __assign, __read, __spread } from \"tslib\";\nimport { dateTimestampInSeconds, getGlobalObject, isPlainObject, isThenable, SyncPromise } from '@sentry/utils';\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nvar Scope = /** @class */function () {\n  function Scope() {\n    /** Flag if notifiying is happening. */\n    this._notifyingListeners = false;\n    /** Callback for client to receive scope changes. */\n    this._scopeListeners = [];\n    /** Callback list that will be called after {@link applyToEvent}. */\n    this._eventProcessors = [];\n    /** Array of breadcrumbs. */\n    this._breadcrumbs = [];\n    /** User */\n    this._user = {};\n    /** Tags */\n    this._tags = {};\n    /** Extra */\n    this._extra = {};\n    /** Contexts */\n    this._contexts = {};\n  }\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  Scope.clone = function (scope) {\n    var newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = __spread(scope._breadcrumbs);\n      newScope._tags = __assign({}, scope._tags);\n      newScope._extra = __assign({}, scope._extra);\n      newScope._contexts = __assign({}, scope._contexts);\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = __spread(scope._eventProcessors);\n    }\n    return newScope;\n  };\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  Scope.prototype.addScopeListener = function (callback) {\n    this._scopeListeners.push(callback);\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.addEventProcessor = function (callback) {\n    this._eventProcessors.push(callback);\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setUser = function (user) {\n    this._user = user || {};\n    if (this._session) {\n      this._session.update({\n        user: user\n      });\n    }\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.getUser = function () {\n    return this._user;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setTags = function (tags) {\n    this._tags = __assign(__assign({}, this._tags), tags);\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setTag = function (key, value) {\n    var _a;\n    this._tags = __assign(__assign({}, this._tags), (_a = {}, _a[key] = value, _a));\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setExtras = function (extras) {\n    this._extra = __assign(__assign({}, this._extra), extras);\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setExtra = function (key, extra) {\n    var _a;\n    this._extra = __assign(__assign({}, this._extra), (_a = {}, _a[key] = extra, _a));\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setFingerprint = function (fingerprint) {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setLevel = function (level) {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setTransactionName = function (name) {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n  Scope.prototype.setTransaction = function (name) {\n    return this.setTransactionName(name);\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setContext = function (key, context) {\n    var _a;\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = __assign(__assign({}, this._contexts), (_a = {}, _a[key] = context, _a));\n    }\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setSpan = function (span) {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.getSpan = function () {\n    return this._span;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.getTransaction = function () {\n    var _a, _b, _c, _d;\n    // often, this span will be a transaction, but it's not guaranteed to be\n    var span = this.getSpan();\n    // try it the new way first\n    if ((_a = span) === null || _a === void 0 ? void 0 : _a.transaction) {\n      return (_b = span) === null || _b === void 0 ? void 0 : _b.transaction;\n    }\n    // fallback to the old way (known bug: this only finds transactions with sampled = true)\n    if ((_d = (_c = span) === null || _c === void 0 ? void 0 : _c.spanRecorder) === null || _d === void 0 ? void 0 : _d.spans[0]) {\n      return span.spanRecorder.spans[0];\n    }\n    // neither way found a transaction\n    return undefined;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.setSession = function (session) {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.getSession = function () {\n    return this._session;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.update = function (captureContext) {\n    if (!captureContext) {\n      return this;\n    }\n    if (typeof captureContext === 'function') {\n      var updatedScope = captureContext(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n    if (captureContext instanceof Scope) {\n      this._tags = __assign(__assign({}, this._tags), captureContext._tags);\n      this._extra = __assign(__assign({}, this._extra), captureContext._extra);\n      this._contexts = __assign(__assign({}, this._contexts), captureContext._contexts);\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext;\n      this._tags = __assign(__assign({}, this._tags), captureContext.tags);\n      this._extra = __assign(__assign({}, this._extra), captureContext.extra);\n      this._contexts = __assign(__assign({}, this._contexts), captureContext.contexts);\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n    }\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.clear = function () {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.addBreadcrumb = function (breadcrumb, maxBreadcrumbs) {\n    var mergedBreadcrumb = __assign({\n      timestamp: dateTimestampInSeconds()\n    }, breadcrumb);\n    this._breadcrumbs = maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0 ? __spread(this._breadcrumbs, [mergedBreadcrumb]).slice(-maxBreadcrumbs) : __spread(this._breadcrumbs, [mergedBreadcrumb]);\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * @inheritDoc\n   */\n  Scope.prototype.clearBreadcrumbs = function () {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  };\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n  Scope.prototype.applyToEvent = function (event, hint) {\n    var _a;\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = __assign(__assign({}, this._extra), event.extra);\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = __assign(__assign({}, this._tags), event.tags);\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = __assign(__assign({}, this._user), event.user);\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = __assign(__assign({}, this._contexts), event.contexts);\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relys on that.\n    if (this._span) {\n      event.contexts = __assign({\n        trace: this._span.getTraceContext()\n      }, event.contexts);\n      var transactionName = (_a = this._span.transaction) === null || _a === void 0 ? void 0 : _a.name;\n      if (transactionName) {\n        event.tags = __assign({\n          transaction: transactionName\n        }, event.tags);\n      }\n    }\n    this._applyFingerprint(event);\n    event.breadcrumbs = __spread(event.breadcrumbs || [], this._breadcrumbs);\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n    return this._notifyEventProcessors(__spread(getGlobalEventProcessors(), this._eventProcessors), event, hint);\n  };\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  Scope.prototype._notifyEventProcessors = function (processors, event, hint, index) {\n    var _this = this;\n    if (index === void 0) {\n      index = 0;\n    }\n    return new SyncPromise(function (resolve, reject) {\n      var processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        var result = processor(__assign({}, event), hint);\n        if (isThenable(result)) {\n          result.then(function (final) {\n            return _this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve);\n          }).then(null, reject);\n        } else {\n          _this._notifyEventProcessors(processors, result, hint, index + 1).then(resolve).then(null, reject);\n        }\n      }\n    });\n  };\n  /**\n   * This will be called on every set call.\n   */\n  Scope.prototype._notifyScopeListeners = function () {\n    var _this = this;\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(function (callback) {\n        callback(_this);\n      });\n      this._notifyingListeners = false;\n    }\n  };\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  Scope.prototype._applyFingerprint = function (event) {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint ? Array.isArray(event.fingerprint) ? event.fingerprint : [event.fingerprint] : [];\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  };\n  return Scope;\n}();\nexport { Scope };\n/**\n * Retruns the global event processors.\n */\nfunction getGlobalEventProcessors() {\n  /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */\n  var global = getGlobalObject();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n  /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n}\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback) {\n  getGlobalEventProcessors().push(callback);\n}","map":{"version":3,"mappings":"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","names":["dateTimestampInSeconds","getGlobalObject","isPlainObject","isThenable","SyncPromise","Scope","scope","newScope","_breadcrumbs","_tags","_extra","_contexts","_user","_level","_span","_session","_transactionName","_fingerprint","_eventProcessors","callback","_scopeListeners","push","user","update","_notifyScopeListeners","tags","key","value","extras","extra","fingerprint","level","name","setTransactionName","context","span","getSpan","transaction","spanRecorder","spans","undefined","session","captureContext","updatedScope","Object","keys","length","contexts","breadcrumb","maxBreadcrumbs","mergedBreadcrumb","timestamp","__spread","slice","event","hint","trace","getTraceContext","transactionName","_applyFingerprint","breadcrumbs","_notifyEventProcessors","getGlobalEventProcessors","processors","index","resolve","reject","processor","result","then","final","_this","_notifyingListeners","forEach","Array","isArray","concat","global","__SENTRY__","globalEventProcessors","addGlobalEventProcessor"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@sentry/hub/src/scope.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport {\n  Breadcrumb,\n  CaptureContext,\n  Context,\n  Contexts,\n  Event,\n  EventHint,\n  EventProcessor,\n  Extra,\n  Extras,\n  Primitive,\n  Scope as ScopeInterface,\n  ScopeContext,\n  Severity,\n  Span,\n  Transaction,\n  User,\n} from '@sentry/types';\nimport { dateTimestampInSeconds, getGlobalObject, isPlainObject, isThenable, SyncPromise } from '@sentry/utils';\n\nimport { Session } from './session';\n\n/**\n * Holds additional event information. {@link Scope.applyToEvent} will be\n * called by the client before an event will be sent.\n */\nexport class Scope implements ScopeInterface {\n  /** Flag if notifiying is happening. */\n  protected _notifyingListeners: boolean = false;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void> = [];\n\n  /** Callback list that will be called after {@link applyToEvent}. */\n  protected _eventProcessors: EventProcessor[] = [];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[] = [];\n\n  /** User */\n  protected _user: User = {};\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive } = {};\n\n  /** Extra */\n  protected _extra: Extras = {};\n\n  /** Contexts */\n  protected _contexts: Contexts = {};\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: Severity;\n\n  /** Transaction Name */\n  protected _transactionName?: string;\n\n  /** Span */\n  protected _span?: Span;\n\n  /** Session */\n  protected _session?: Session;\n\n  /**\n   * Inherit values from the parent scope.\n   * @param scope to clone.\n   */\n  public static clone(scope?: Scope): Scope {\n    const newScope = new Scope();\n    if (scope) {\n      newScope._breadcrumbs = [...scope._breadcrumbs];\n      newScope._tags = { ...scope._tags };\n      newScope._extra = { ...scope._extra };\n      newScope._contexts = { ...scope._contexts };\n      newScope._user = scope._user;\n      newScope._level = scope._level;\n      newScope._span = scope._span;\n      newScope._session = scope._session;\n      newScope._transactionName = scope._transactionName;\n      newScope._fingerprint = scope._fingerprint;\n      newScope._eventProcessors = [...scope._eventProcessors];\n    }\n    return newScope;\n  }\n\n  /**\n   * Add internal on change listener. Used for sub SDKs that need to store the scope.\n   * @hidden\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setUser(user: User | null): this {\n    this._user = user || {};\n    if (this._session) {\n      this._session.update({ user });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setLevel(level: Severity): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Can be removed in major version.\n   * @deprecated in favor of {@link this.setTransactionName}\n   */\n  public setTransaction(name?: string): this {\n    return this.setTransactionName(name);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts = { ...this._contexts, [key]: context };\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSpan(span?: Span): this {\n    this._span = span;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSpan(): Span | undefined {\n    return this._span;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getTransaction(): Transaction | undefined {\n    // often, this span will be a transaction, but it's not guaranteed to be\n    const span = this.getSpan() as undefined | (Span & { spanRecorder: { spans: Span[] } });\n\n    // try it the new way first\n    if (span?.transaction) {\n      return span?.transaction;\n    }\n\n    // fallback to the old way (known bug: this only finds transactions with sampled = true)\n    if (span?.spanRecorder?.spans[0]) {\n      return span.spanRecorder.spans[0] as Transaction;\n    }\n\n    // neither way found a transaction\n    return undefined;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    if (typeof captureContext === 'function') {\n      const updatedScope = (captureContext as <T>(scope: T) => T)(this);\n      return updatedScope instanceof Scope ? updatedScope : this;\n    }\n\n    if (captureContext instanceof Scope) {\n      this._tags = { ...this._tags, ...captureContext._tags };\n      this._extra = { ...this._extra, ...captureContext._extra };\n      this._contexts = { ...this._contexts, ...captureContext._contexts };\n      if (captureContext._user && Object.keys(captureContext._user).length) {\n        this._user = captureContext._user;\n      }\n      if (captureContext._level) {\n        this._level = captureContext._level;\n      }\n      if (captureContext._fingerprint) {\n        this._fingerprint = captureContext._fingerprint;\n      }\n    } else if (isPlainObject(captureContext)) {\n      // eslint-disable-next-line no-param-reassign\n      captureContext = captureContext as ScopeContext;\n      this._tags = { ...this._tags, ...captureContext.tags };\n      this._extra = { ...this._extra, ...captureContext.extra };\n      this._contexts = { ...this._contexts, ...captureContext.contexts };\n      if (captureContext.user) {\n        this._user = captureContext.user;\n      }\n      if (captureContext.level) {\n        this._level = captureContext.level;\n      }\n      if (captureContext.fingerprint) {\n        this._fingerprint = captureContext.fingerprint;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clear(): this {\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._span = undefined;\n    this._session = undefined;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n    };\n\n    this._breadcrumbs =\n      maxBreadcrumbs !== undefined && maxBreadcrumbs >= 0\n        ? [...this._breadcrumbs, mergedBreadcrumb].slice(-maxBreadcrumbs)\n        : [...this._breadcrumbs, mergedBreadcrumb];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Applies the current context and fingerprint to the event.\n   * Note that breadcrumbs will be added by the client.\n   * Also if the event has already breadcrumbs on it, we do not merge them.\n   * @param event Event\n   * @param hint May contain additional informartion about the original exception.\n   * @hidden\n   */\n  public applyToEvent(event: Event, hint?: EventHint): PromiseLike<Event | null> {\n    if (this._extra && Object.keys(this._extra).length) {\n      event.extra = { ...this._extra, ...event.extra };\n    }\n    if (this._tags && Object.keys(this._tags).length) {\n      event.tags = { ...this._tags, ...event.tags };\n    }\n    if (this._user && Object.keys(this._user).length) {\n      event.user = { ...this._user, ...event.user };\n    }\n    if (this._contexts && Object.keys(this._contexts).length) {\n      event.contexts = { ...this._contexts, ...event.contexts };\n    }\n    if (this._level) {\n      event.level = this._level;\n    }\n    if (this._transactionName) {\n      event.transaction = this._transactionName;\n    }\n    // We want to set the trace context for normal events only if there isn't already\n    // a trace context on the event. There is a product feature in place where we link\n    // errors with transaction and it relys on that.\n    if (this._span) {\n      event.contexts = { trace: this._span.getTraceContext(), ...event.contexts };\n      const transactionName = this._span.transaction?.name;\n      if (transactionName) {\n        event.tags = { transaction: transactionName, ...event.tags };\n      }\n    }\n\n    this._applyFingerprint(event);\n\n    event.breadcrumbs = [...(event.breadcrumbs || []), ...this._breadcrumbs];\n    event.breadcrumbs = event.breadcrumbs.length > 0 ? event.breadcrumbs : undefined;\n\n    return this._notifyEventProcessors([...getGlobalEventProcessors(), ...this._eventProcessors], event, hint);\n  }\n\n  /**\n   * This will be called after {@link applyToEvent} is finished.\n   */\n  protected _notifyEventProcessors(\n    processors: EventProcessor[],\n    event: Event | null,\n    hint?: EventHint,\n    index: number = 0,\n  ): PromiseLike<Event | null> {\n    return new SyncPromise<Event | null>((resolve, reject) => {\n      const processor = processors[index];\n      if (event === null || typeof processor !== 'function') {\n        resolve(event);\n      } else {\n        const result = processor({ ...event }, hint) as Event | null;\n        if (isThenable(result)) {\n          (result as PromiseLike<Event | null>)\n            .then(final => this._notifyEventProcessors(processors, final, hint, index + 1).then(resolve))\n            .then(null, reject);\n        } else {\n          this._notifyEventProcessors(processors, result, hint, index + 1)\n            .then(resolve)\n            .then(null, reject);\n        }\n      }\n    });\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n\n  /**\n   * Applies fingerprint from the scope to the event if there's one,\n   * uses message if there's one instead or get rid of empty fingerprint\n   */\n  private _applyFingerprint(event: Event): void {\n    // Make sure it's an array first and we actually have something in place\n    event.fingerprint = event.fingerprint\n      ? Array.isArray(event.fingerprint)\n        ? event.fingerprint\n        : [event.fingerprint]\n      : [];\n\n    // If we have something on the scope, then merge it with event\n    if (this._fingerprint) {\n      event.fingerprint = event.fingerprint.concat(this._fingerprint);\n    }\n\n    // If we have no data at all, remove empty array default\n    if (event.fingerprint && !event.fingerprint.length) {\n      delete event.fingerprint;\n    }\n  }\n}\n\n/**\n * Retruns the global event processors.\n */\nfunction getGlobalEventProcessors(): EventProcessor[] {\n  /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access  */\n  const global = getGlobalObject<any>();\n  global.__SENTRY__ = global.__SENTRY__ || {};\n  global.__SENTRY__.globalEventProcessors = global.__SENTRY__.globalEventProcessors || [];\n  return global.__SENTRY__.globalEventProcessors;\n  /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n}\n\n/**\n * Add a EventProcessor to be kept globally.\n * @param callback EventProcessor to add\n */\nexport function addGlobalEventProcessor(callback: EventProcessor): void {\n  getGlobalEventProcessors().push(callback);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}