{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeOwlA = void 0;\nconst index_js_1 = require(\"../utils/index.js\");\nconst bit_reader_js_1 = require(\"./bit-reader.js\");\nconst decode_owl_js_1 = require(\"./decode-owl.js\");\n/**\n *  @_ignore\n */\nfunction decodeOwlA(data, accents) {\n  let words = (0, decode_owl_js_1.decodeOwl)(data).join(\",\");\n  // Inject the accents\n  accents.split(/,/g).forEach(accent => {\n    const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);\n    (0, index_js_1.assertArgument)(match !== null, \"internal error parsing accents\", \"accents\", accents);\n    let posOffset = 0;\n    const positions = (0, bit_reader_js_1.decodeBits)(parseInt(match[3]), match[4]);\n    const charCode = parseInt(match[2]);\n    const regex = new RegExp(`([${match[1]}])`, \"g\");\n    words = words.replace(regex, (all, letter) => {\n      const rem = --positions[posOffset];\n      if (rem === 0) {\n        letter = String.fromCharCode(letter.charCodeAt(0), charCode);\n        posOffset++;\n      }\n      return letter;\n    });\n  });\n  return words.split(\",\");\n}\nexports.decodeOwlA = decodeOwlA;","map":{"version":3,"mappings":";;;;;;AAAA;AAEA;AACA;AAEA;;;AAGA,SAAgBA,UAAU,CAACC,IAAY,EAAEC,OAAe;EACpD,IAAIC,KAAK,GAAG,6BAAS,EAACF,IAAI,CAAC,CAACG,IAAI,CAAC,GAAG,CAAC;EAErC;EACAF,OAAO,CAACG,KAAK,CAAC,IAAI,CAAC,CAACC,OAAO,CAAEC,MAAM,IAAI;IAEnC,MAAMC,KAAK,GAAGD,MAAM,CAACC,KAAK,CAAC,+BAA+B,CAAC;IAC3D,6BAAc,EAACA,KAAK,KAAK,IAAI,EAAE,gCAAgC,EAAE,SAAS,EAAEN,OAAO,CAAC;IAEpF,IAAIO,SAAS,GAAG,CAAC;IACjB,MAAMC,SAAS,GAAG,8BAAU,EAACC,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC,EAAEA,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1D,MAAMI,QAAQ,GAAGD,QAAQ,CAACH,KAAK,CAAC,CAAC,CAAC,CAAC;IACnC,MAAMK,KAAK,GAAG,IAAIC,MAAM,CAAC,KAAMN,KAAK,CAAC,CAAC,CAAE,IAAI,EAAE,GAAG,CAAC;IAClDL,KAAK,GAAGA,KAAK,CAACY,OAAO,CAACF,KAAK,EAAE,CAACG,GAAG,EAAEC,MAAM,KAAI;MACzC,MAAMC,GAAG,GAAG,EAAER,SAAS,CAACD,SAAS,CAAC;MAClC,IAAIS,GAAG,KAAK,CAAC,EAAE;QACXD,MAAM,GAAGE,MAAM,CAACC,YAAY,CAACH,MAAM,CAACI,UAAU,CAAC,CAAC,CAAC,EAAET,QAAQ,CAAC;QAC5DH,SAAS,EAAE;;MAEf,OAAOQ,MAAM;IACjB,CAAC,CAAC;EACN,CAAC,CAAC;EAEF,OAAOd,KAAK,CAACE,KAAK,CAAC,GAAG,CAAC;AAC3B;AAxBAiB","names":["decodeOwlA","data","accents","words","join","split","forEach","accent","match","posOffset","positions","parseInt","charCode","regex","RegExp","replace","all","letter","rem","String","fromCharCode","charCodeAt","exports"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/wordlists/decode-owla.ts"],"sourcesContent":["import { assertArgument } from \"../utils/index.js\";\n\nimport { decodeBits } from \"./bit-reader.js\";\nimport { decodeOwl } from \"./decode-owl.js\";\n\n/**\n *  @_ignore\n */\nexport function decodeOwlA(data: string, accents: string): Array<string> {\n    let words = decodeOwl(data).join(\",\");\n\n    // Inject the accents\n    accents.split(/,/g).forEach((accent) => {\n\n        const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);\n        assertArgument(match !== null, \"internal error parsing accents\", \"accents\", accents);\n\n        let posOffset = 0;\n        const positions = decodeBits(parseInt(match[3]), match[4]);\n        const charCode = parseInt(match[2]);\n        const regex = new RegExp(`([${ match[1] }])`, \"g\");\n        words = words.replace(regex, (all, letter) => {\n            const rem = --positions[posOffset];\n            if (rem === 0) {\n                letter = String.fromCharCode(letter.charCodeAt(0), charCode);\n                posOffset++;\n            }\n            return letter;\n        });\n    });\n\n    return words.split(\",\");\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}