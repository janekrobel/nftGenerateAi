{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AnkrProvider = void 0;\n/**\n *  [[link-ankr]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]\n */\nconst index_js_1 = require(\"../utils/index.js\");\nconst community_js_1 = require(\"./community.js\");\nconst network_js_1 = require(\"./network.js\");\nconst provider_jsonrpc_js_1 = require(\"./provider-jsonrpc.js\");\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\nfunction getHost(name) {\n  switch (name) {\n    case \"mainnet\":\n      return \"rpc.ankr.com/eth\";\n    case \"goerli\":\n      return \"rpc.ankr.com/eth_goerli\";\n    case \"matic\":\n      return \"rpc.ankr.com/polygon\";\n    case \"arbitrum\":\n      return \"rpc.ankr.com/arbitrum\";\n  }\n  (0, index_js_1.assertArgument)(false, \"unsupported network\", \"network\", name);\n}\n/**\n *  The **AnkrProvider** connects to the [[link-ankr]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-ankr-signup).\n */\nclass AnkrProvider extends provider_jsonrpc_js_1.JsonRpcProvider {\n  /**\n   *  The API key for the Ankr connection.\n   */\n  apiKey;\n  /**\n   *  Create a new **AnkrProvider**.\n   *\n   *  By default connecting to ``mainnet`` with a highly throttled\n   *  API key.\n   */\n  constructor(_network, apiKey) {\n    if (_network == null) {\n      _network = \"mainnet\";\n    }\n    const network = network_js_1.Network.from(_network);\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    // Ankr does not support filterId, so we force polling\n    const options = {\n      polling: true,\n      staticNetwork: network\n    };\n    const request = AnkrProvider.getRequest(network, apiKey);\n    super(request, network, options);\n    (0, index_js_1.defineProperties)(this, {\n      apiKey\n    });\n  }\n  _getProvider(chainId) {\n    try {\n      return new AnkrProvider(chainId, this.apiKey);\n    } catch (error) {}\n    return super._getProvider(chainId);\n  }\n  /**\n   *  Returns a prepared request for connecting to %%network%% with\n   *  %%apiKey%%.\n   */\n  static getRequest(network, apiKey) {\n    if (apiKey == null) {\n      apiKey = defaultApiKey;\n    }\n    const request = new index_js_1.FetchRequest(`https:/\\/${getHost(network.name)}/${apiKey}`);\n    request.allowGzip = true;\n    if (apiKey === defaultApiKey) {\n      request.retryFunc = async (request, response, attempt) => {\n        (0, community_js_1.showThrottleMessage)(\"AnkrProvider\");\n        return true;\n      };\n    }\n    return request;\n  }\n  getRpcError(payload, error) {\n    if (payload.method === \"eth_sendRawTransaction\") {\n      if (error && error.error && error.error.message === \"INTERNAL_ERROR: could not replace existing tx\") {\n        error.error.message = \"replacement transaction underpriced\";\n      }\n    }\n    return super.getRpcError(payload, error);\n  }\n  isCommunityResource() {\n    return this.apiKey === defaultApiKey;\n  }\n}\nexports.AnkrProvider = AnkrProvider;","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;;;;;;AAaA;AAKA;AACA;AACA;AAOA,MAAMA,aAAa,GAAG,kEAAkE;AAExF,SAASC,OAAO,CAACC,IAAY;EACzB,QAAQA,IAAI;IACR,KAAK,SAAS;MACV,OAAO,kBAAkB;IAC7B,KAAK,QAAQ;MACT,OAAO,yBAAyB;IACpC,KAAK,OAAO;MACR,OAAO,sBAAsB;IACjC,KAAK,UAAU;MACX,OAAO,uBAAuB;EAAC;EAGvC,6BAAc,EAAC,KAAK,EAAE,qBAAqB,EAAE,SAAS,EAAEA,IAAI,CAAC;AACjE;AAGA;;;;;;;;;AASA,MAAaC,YAAa,SAAQC,qCAAe;EAE7C;;;EAGSC,MAAM;EAEf;;;;;;EAMAC,YAAYC,QAAqB,EAAEF,MAAsB;IACrD,IAAIE,QAAQ,IAAI,IAAI,EAAE;MAAEA,QAAQ,GAAG,SAAS;;IAC5C,MAAMC,OAAO,GAAGC,oBAAO,CAACC,IAAI,CAACH,QAAQ,CAAC;IACtC,IAAIF,MAAM,IAAI,IAAI,EAAE;MAAEA,MAAM,GAAGL,aAAa;;IAE5C;IACA,MAAMW,OAAO,GAAG;MAAEC,OAAO,EAAE,IAAI;MAAEC,aAAa,EAAEL;IAAO,CAAE;IAEzD,MAAMM,OAAO,GAAGX,YAAY,CAACY,UAAU,CAACP,OAAO,EAAEH,MAAM,CAAC;IACxD,KAAK,CAACS,OAAO,EAAEN,OAAO,EAAEG,OAAO,CAAC;IAEhC,+BAAgB,EAAe,IAAI,EAAE;MAAEN;IAAM,CAAE,CAAC;EACpD;EAEAW,YAAY,CAACC,OAAe;IACxB,IAAI;MACA,OAAO,IAAId,YAAY,CAACc,OAAO,EAAE,IAAI,CAACZ,MAAM,CAAC;KAChD,CAAC,OAAOa,KAAK,EAAE;IAChB,OAAO,KAAK,CAACF,YAAY,CAACC,OAAO,CAAC;EACtC;EAEA;;;;EAIA,OAAOF,UAAU,CAACP,OAAgB,EAAEH,MAAsB;IACtD,IAAIA,MAAM,IAAI,IAAI,EAAE;MAAEA,MAAM,GAAGL,aAAa;;IAE5C,MAAMc,OAAO,GAAG,IAAIK,uBAAY,CAAC,YAAalB,OAAO,CAACO,OAAO,CAACN,IAAI,CAAE,IAAKG,MAAO,EAAE,CAAC;IACnFS,OAAO,CAACM,SAAS,GAAG,IAAI;IAExB,IAAIf,MAAM,KAAKL,aAAa,EAAE;MAC1Bc,OAAO,CAACO,SAAS,GAAG,OAAOP,OAAO,EAAEQ,QAAQ,EAAEC,OAAO,KAAI;QACrD,sCAAmB,EAAC,cAAc,CAAC;QACnC,OAAO,IAAI;MACf,CAAC;;IAGL,OAAOT,OAAO;EAClB;EAEAU,WAAW,CAACC,OAAuB,EAAEP,KAAmB;IACpD,IAAIO,OAAO,CAACC,MAAM,KAAK,wBAAwB,EAAE;MAC7C,IAAIR,KAAK,IAAIA,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACS,OAAO,KAAK,+CAA+C,EAAE;QACjGT,KAAK,CAACA,KAAK,CAACS,OAAO,GAAG,qCAAqC;;;IAInE,OAAO,KAAK,CAACH,WAAW,CAACC,OAAO,EAAEP,KAAK,CAAC;EAC5C;EAEAU,mBAAmB;IACf,OAAQ,IAAI,CAACvB,MAAM,KAAKL,aAAa;EACzC;;AAlEJ6B","names":["defaultApiKey","getHost","name","AnkrProvider","provider_jsonrpc_js_1","apiKey","constructor","_network","network","network_js_1","from","options","polling","staticNetwork","request","getRequest","_getProvider","chainId","error","index_js_1","allowGzip","retryFunc","response","attempt","getRpcError","payload","method","message","isCommunityResource","exports"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/providers/provider-ankr.ts"],"sourcesContent":["/**\n *  [[link-ankr]] provides a third-party service for connecting to\n *  various blockchains over JSON-RPC.\n *\n *  **Supported Networks**\n *\n *  - Ethereum Mainnet (``mainnet``)\n *  - Goerli Testnet (``goerli``)\n *  - Polygon (``matic``)\n *  - Arbitrum (``arbitrum``)\n *\n *  @_subsection: api/providers/thirdparty:Ankr  [providers-ankr]\n */\nimport {\n    defineProperties, FetchRequest, assertArgument\n} from \"../utils/index.js\";\n\nimport { AbstractProvider } from \"./abstract-provider.js\";\nimport { showThrottleMessage } from \"./community.js\";\nimport { Network } from \"./network.js\";\nimport { JsonRpcProvider } from \"./provider-jsonrpc.js\";\n\nimport type { CommunityResourcable } from \"./community.js\";\nimport type { Networkish } from \"./network.js\";\nimport type { JsonRpcError, JsonRpcPayload } from \"./provider-jsonrpc.js\";\n\n\nconst defaultApiKey = \"9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972\";\n\nfunction getHost(name: string): string {\n    switch (name) {\n        case \"mainnet\":\n            return \"rpc.ankr.com/eth\";\n        case \"goerli\":\n            return \"rpc.ankr.com/eth_goerli\";\n        case \"matic\":\n            return \"rpc.ankr.com/polygon\";\n        case \"arbitrum\":\n            return \"rpc.ankr.com/arbitrum\";\n    }\n\n    assertArgument(false, \"unsupported network\", \"network\", name);\n}\n\n\n/**\n *  The **AnkrProvider** connects to the [[link-ankr]]\n *  JSON-RPC end-points.\n *\n *  By default, a highly-throttled API key is used, which is\n *  appropriate for quick prototypes and simple scripts. To\n *  gain access to an increased rate-limit, it is highly\n *  recommended to [sign up here](link-ankr-signup).\n */\nexport class AnkrProvider extends JsonRpcProvider implements CommunityResourcable {\n\n    /**\n     *  The API key for the Ankr connection.\n     */\n    readonly apiKey!: string;\n\n    /**\n     *  Create a new **AnkrProvider**.\n     *\n     *  By default connecting to ``mainnet`` with a highly throttled\n     *  API key.\n     */\n    constructor(_network?: Networkish, apiKey?: null | string) {\n        if (_network == null) { _network = \"mainnet\"; }\n        const network = Network.from(_network);\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        // Ankr does not support filterId, so we force polling\n        const options = { polling: true, staticNetwork: network };\n\n        const request = AnkrProvider.getRequest(network, apiKey);\n        super(request, network, options);\n\n        defineProperties<AnkrProvider>(this, { apiKey });\n    }\n\n    _getProvider(chainId: number): AbstractProvider {\n        try {\n            return new AnkrProvider(chainId, this.apiKey);\n        } catch (error) { }\n        return super._getProvider(chainId);\n    }\n\n    /**\n     *  Returns a prepared request for connecting to %%network%% with\n     *  %%apiKey%%.\n     */\n    static getRequest(network: Network, apiKey?: null | string): FetchRequest {\n        if (apiKey == null) { apiKey = defaultApiKey; }\n\n        const request = new FetchRequest(`https:/\\/${ getHost(network.name) }/${ apiKey }`);\n        request.allowGzip = true;\n\n        if (apiKey === defaultApiKey) {\n            request.retryFunc = async (request, response, attempt) => {\n                showThrottleMessage(\"AnkrProvider\");\n                return true;\n            };\n        }\n\n        return request;\n    }\n\n    getRpcError(payload: JsonRpcPayload, error: JsonRpcError): Error {\n        if (payload.method === \"eth_sendRawTransaction\") {\n            if (error && error.error && error.error.message === \"INTERNAL_ERROR: could not replace existing tx\") {\n                error.error.message = \"replacement transaction underpriced\";\n            }\n        }\n\n        return super.getRpcError(payload, error);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}