{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HelpPrinter = void 0;\nconst errors_1 = require(\"../core/errors\");\nconst errors_list_1 = require(\"../core/errors-list\");\nconst ArgumentsParser_1 = require(\"./ArgumentsParser\");\nclass HelpPrinter {\n  constructor(_programName, _executableName, _version, _hardhatParamDefinitions, _tasks) {\n    this._programName = _programName;\n    this._executableName = _executableName;\n    this._version = _version;\n    this._hardhatParamDefinitions = _hardhatParamDefinitions;\n    this._tasks = _tasks;\n  }\n  printGlobalHelp() {\n    let includeSubtasks = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    console.log(`${this._programName} version ${this._version}\\n`);\n    console.log(`Usage: ${this._executableName} [GLOBAL OPTIONS] <TASK> [TASK OPTIONS]\\n`);\n    console.log(\"GLOBAL OPTIONS:\\n\");\n    this._printParamDetails(this._hardhatParamDefinitions);\n    console.log(\"\\n\\nAVAILABLE TASKS:\\n\");\n    const tasksToShow = {};\n    for (const [taskName, taskDefinition] of Object.entries(this._tasks)) {\n      if (includeSubtasks || !taskDefinition.isSubtask) {\n        tasksToShow[taskName] = taskDefinition;\n      }\n    }\n    const nameLength = Object.keys(tasksToShow).map(n => n.length).reduce((a, b) => Math.max(a, b), 0);\n    for (const name of Object.keys(tasksToShow).sort()) {\n      const {\n        description = \"\"\n      } = this._tasks[name];\n      console.log(`  ${name.padEnd(nameLength)}\\t${description}`);\n    }\n    console.log(\"\");\n    console.log(`To get help for a specific task run: npx ${this._executableName} help [task]\\n`);\n  }\n  printTaskHelp(taskName) {\n    const taskDefinition = this._tasks[taskName];\n    if (taskDefinition === undefined) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.ARGUMENTS.UNRECOGNIZED_TASK, {\n        task: taskName\n      });\n    }\n    const {\n      description = \"\",\n      name,\n      paramDefinitions,\n      positionalParamDefinitions\n    } = taskDefinition;\n    console.log(`${this._programName} version ${this._version}\\n`);\n    const paramsList = this._getParamsList(paramDefinitions);\n    const positionalParamsList = this._getPositionalParamsList(positionalParamDefinitions);\n    console.log(`Usage: ${this._executableName} [GLOBAL OPTIONS] ${name}${paramsList}${positionalParamsList}\\n`);\n    if (Object.keys(paramDefinitions).length > 0) {\n      console.log(\"OPTIONS:\\n\");\n      this._printParamDetails(paramDefinitions);\n      console.log(\"\");\n    }\n    if (positionalParamDefinitions.length > 0) {\n      console.log(\"POSITIONAL ARGUMENTS:\\n\");\n      this._printPositionalParamDetails(positionalParamDefinitions);\n      console.log(\"\");\n    }\n    console.log(`${name}: ${description}\\n`);\n    console.log(`For global options help run: ${this._executableName} help\\n`);\n  }\n  _getParamValueDescription(paramDefinition) {\n    return `<${paramDefinition.type.name.toUpperCase()}>`;\n  }\n  _getParamsList(paramDefinitions) {\n    let paramsList = \"\";\n    for (const name of Object.keys(paramDefinitions).sort()) {\n      const definition = paramDefinitions[name];\n      const {\n        isFlag,\n        isOptional\n      } = definition;\n      paramsList += \" \";\n      if (isOptional) {\n        paramsList += \"[\";\n      }\n      paramsList += `${ArgumentsParser_1.ArgumentsParser.paramNameToCLA(name)}`;\n      if (!isFlag) {\n        paramsList += ` ${this._getParamValueDescription(definition)}`;\n      }\n      if (isOptional) {\n        paramsList += \"]\";\n      }\n    }\n    return paramsList;\n  }\n  _getPositionalParamsList(positionalParamDefinitions) {\n    let paramsList = \"\";\n    for (const definition of positionalParamDefinitions) {\n      const {\n        isOptional,\n        isVariadic,\n        name\n      } = definition;\n      paramsList += \" \";\n      if (isOptional) {\n        paramsList += \"[\";\n      }\n      if (isVariadic) {\n        paramsList += \"...\";\n      }\n      paramsList += name;\n      if (isOptional) {\n        paramsList += \"]\";\n      }\n    }\n    return paramsList;\n  }\n  _printParamDetails(paramDefinitions) {\n    const paramsNameLength = Object.keys(paramDefinitions).map(n => ArgumentsParser_1.ArgumentsParser.paramNameToCLA(n).length).reduce((a, b) => Math.max(a, b), 0);\n    for (const name of Object.keys(paramDefinitions).sort()) {\n      const {\n        description,\n        defaultValue,\n        isOptional,\n        isFlag\n      } = paramDefinitions[name];\n      let msg = `  ${ArgumentsParser_1.ArgumentsParser.paramNameToCLA(name).padEnd(paramsNameLength)}\\t`;\n      if (description !== undefined) {\n        msg += `${description} `;\n      }\n      if (isOptional && defaultValue !== undefined && !isFlag) {\n        msg += `(default: ${JSON.stringify(defaultValue)})`;\n      }\n      console.log(msg);\n    }\n  }\n  _printPositionalParamDetails(positionalParamDefinitions) {\n    const paramsNameLength = positionalParamDefinitions.map(d => d.name.length).reduce((a, b) => Math.max(a, b), 0);\n    for (const definition of positionalParamDefinitions) {\n      const {\n        name,\n        description,\n        isOptional,\n        defaultValue\n      } = definition;\n      let msg = `  ${name.padEnd(paramsNameLength)}\\t`;\n      if (description !== undefined) {\n        msg += `${description} `;\n      }\n      if (isOptional && defaultValue !== undefined) {\n        msg += `(default: ${JSON.stringify(defaultValue)})`;\n      }\n      console.log(msg);\n    }\n  }\n}\nexports.HelpPrinter = HelpPrinter;","map":{"version":3,"mappings":"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","names":["HelpPrinter","constructor","_programName","_executableName","_version","_hardhatParamDefinitions","_tasks","printGlobalHelp","includeSubtasks","console","log","_printParamDetails","tasksToShow","taskName","taskDefinition","Object","entries","isSubtask","nameLength","keys","map","n","length","reduce","a","b","Math","max","name","sort","description","padEnd","printTaskHelp","undefined","errors_1","errors_list_1","ARGUMENTS","UNRECOGNIZED_TASK","task","paramDefinitions","positionalParamDefinitions","paramsList","_getParamsList","positionalParamsList","_getPositionalParamsList","_printPositionalParamDetails","_getParamValueDescription","paramDefinition","type","toUpperCase","definition","isFlag","isOptional","ArgumentsParser_1","paramNameToCLA","isVariadic","paramsNameLength","defaultValue","msg","JSON","stringify","d","exports"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/hardhat/src/internal/cli/HelpPrinter.ts"],"sourcesContent":["import {\n  HardhatParamDefinitions,\n  ParamDefinition,\n  ParamDefinitionsMap,\n  TasksMap,\n} from \"../../types\";\nimport { HardhatError } from \"../core/errors\";\nimport { ERRORS } from \"../core/errors-list\";\n\nimport { ArgumentsParser } from \"./ArgumentsParser\";\n\nexport class HelpPrinter {\n  constructor(\n    private readonly _programName: string,\n    private readonly _executableName: string,\n    private readonly _version: string,\n    private readonly _hardhatParamDefinitions: HardhatParamDefinitions,\n    private readonly _tasks: TasksMap\n  ) {}\n\n  public printGlobalHelp(includeSubtasks = false) {\n    console.log(`${this._programName} version ${this._version}\\n`);\n\n    console.log(\n      `Usage: ${this._executableName} [GLOBAL OPTIONS] <TASK> [TASK OPTIONS]\\n`\n    );\n\n    console.log(\"GLOBAL OPTIONS:\\n\");\n\n    this._printParamDetails(this._hardhatParamDefinitions);\n\n    console.log(\"\\n\\nAVAILABLE TASKS:\\n\");\n\n    const tasksToShow: TasksMap = {};\n    for (const [taskName, taskDefinition] of Object.entries(this._tasks)) {\n      if (includeSubtasks || !taskDefinition.isSubtask) {\n        tasksToShow[taskName] = taskDefinition;\n      }\n    }\n\n    const nameLength = Object.keys(tasksToShow)\n      .map((n) => n.length)\n      .reduce((a, b) => Math.max(a, b), 0);\n\n    for (const name of Object.keys(tasksToShow).sort()) {\n      const { description = \"\" } = this._tasks[name];\n\n      console.log(`  ${name.padEnd(nameLength)}\\t${description}`);\n    }\n\n    console.log(\"\");\n\n    console.log(\n      `To get help for a specific task run: npx ${this._executableName} help [task]\\n`\n    );\n  }\n\n  public printTaskHelp(taskName: string) {\n    const taskDefinition = this._tasks[taskName];\n\n    if (taskDefinition === undefined) {\n      throw new HardhatError(ERRORS.ARGUMENTS.UNRECOGNIZED_TASK, {\n        task: taskName,\n      });\n    }\n\n    const {\n      description = \"\",\n      name,\n      paramDefinitions,\n      positionalParamDefinitions,\n    } = taskDefinition;\n\n    console.log(`${this._programName} version ${this._version}\\n`);\n\n    const paramsList = this._getParamsList(paramDefinitions);\n    const positionalParamsList = this._getPositionalParamsList(\n      positionalParamDefinitions\n    );\n\n    console.log(\n      `Usage: ${this._executableName} [GLOBAL OPTIONS] ${name}${paramsList}${positionalParamsList}\\n`\n    );\n\n    if (Object.keys(paramDefinitions).length > 0) {\n      console.log(\"OPTIONS:\\n\");\n\n      this._printParamDetails(paramDefinitions);\n\n      console.log(\"\");\n    }\n\n    if (positionalParamDefinitions.length > 0) {\n      console.log(\"POSITIONAL ARGUMENTS:\\n\");\n\n      this._printPositionalParamDetails(positionalParamDefinitions);\n\n      console.log(\"\");\n    }\n\n    console.log(`${name}: ${description}\\n`);\n\n    console.log(`For global options help run: ${this._executableName} help\\n`);\n  }\n\n  private _getParamValueDescription<T>(paramDefinition: ParamDefinition<T>) {\n    return `<${paramDefinition.type.name.toUpperCase()}>`;\n  }\n\n  private _getParamsList(paramDefinitions: ParamDefinitionsMap) {\n    let paramsList = \"\";\n\n    for (const name of Object.keys(paramDefinitions).sort()) {\n      const definition = paramDefinitions[name];\n      const { isFlag, isOptional } = definition;\n\n      paramsList += \" \";\n\n      if (isOptional) {\n        paramsList += \"[\";\n      }\n\n      paramsList += `${ArgumentsParser.paramNameToCLA(name)}`;\n\n      if (!isFlag) {\n        paramsList += ` ${this._getParamValueDescription(definition)}`;\n      }\n\n      if (isOptional) {\n        paramsList += \"]\";\n      }\n    }\n\n    return paramsList;\n  }\n\n  private _getPositionalParamsList(\n    positionalParamDefinitions: Array<ParamDefinition<any>>\n  ) {\n    let paramsList = \"\";\n\n    for (const definition of positionalParamDefinitions) {\n      const { isOptional, isVariadic, name } = definition;\n\n      paramsList += \" \";\n\n      if (isOptional) {\n        paramsList += \"[\";\n      }\n\n      if (isVariadic) {\n        paramsList += \"...\";\n      }\n\n      paramsList += name;\n\n      if (isOptional) {\n        paramsList += \"]\";\n      }\n    }\n\n    return paramsList;\n  }\n\n  private _printParamDetails(paramDefinitions: ParamDefinitionsMap) {\n    const paramsNameLength = Object.keys(paramDefinitions)\n      .map((n) => ArgumentsParser.paramNameToCLA(n).length)\n      .reduce((a, b) => Math.max(a, b), 0);\n\n    for (const name of Object.keys(paramDefinitions).sort()) {\n      const { description, defaultValue, isOptional, isFlag } =\n        paramDefinitions[name];\n\n      let msg = `  ${ArgumentsParser.paramNameToCLA(name).padEnd(\n        paramsNameLength\n      )}\\t`;\n\n      if (description !== undefined) {\n        msg += `${description} `;\n      }\n\n      if (isOptional && defaultValue !== undefined && !isFlag) {\n        msg += `(default: ${JSON.stringify(defaultValue)})`;\n      }\n\n      console.log(msg);\n    }\n  }\n\n  private _printPositionalParamDetails(\n    positionalParamDefinitions: Array<ParamDefinition<any>>\n  ) {\n    const paramsNameLength = positionalParamDefinitions\n      .map((d) => d.name.length)\n      .reduce((a, b) => Math.max(a, b), 0);\n\n    for (const definition of positionalParamDefinitions) {\n      const { name, description, isOptional, defaultValue } = definition;\n\n      let msg = `  ${name.padEnd(paramsNameLength)}\\t`;\n\n      if (description !== undefined) {\n        msg += `${description} `;\n      }\n\n      if (isOptional && defaultValue !== undefined) {\n        msg += `(default: ${JSON.stringify(defaultValue)})`;\n      }\n\n      console.log(msg);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}