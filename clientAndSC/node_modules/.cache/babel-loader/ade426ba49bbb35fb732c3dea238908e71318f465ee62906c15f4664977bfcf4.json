{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NativeCompiler = exports.Compiler = void 0;\nconst child_process_1 = require(\"child_process\");\nconst fs = __importStar(require(\"fs\"));\nconst errors_1 = require(\"../../core/errors\");\nconst errors_list_1 = require(\"../../core/errors-list\");\nclass Compiler {\n  constructor(_pathToSolcJs) {\n    this._pathToSolcJs = _pathToSolcJs;\n  }\n  async compile(input) {\n    const solc = await this.getSolc();\n    const jsonOutput = solc.compile(JSON.stringify(input));\n    return JSON.parse(jsonOutput);\n  }\n  async getSolc() {\n    if (this._loadedSolc !== undefined) {\n      return this._loadedSolc;\n    }\n    const {\n      default: solcWrapper\n    } = await Promise.resolve().then(() => __importStar(require(\"solc/wrapper\")));\n    this._loadedSolc = solcWrapper(this._loadCompilerSources(this._pathToSolcJs));\n    return this._loadedSolc;\n  }\n  /**\n   * This function loads the compiler sources bypassing any require hook.\n   *\n   * The compiler is a huge asm.js file, and using a simple require may trigger\n   * babel/register and hang the process.\n   */\n  _loadCompilerSources(compilerPath) {\n    const Module = module.constructor;\n    // if Hardhat is bundled (for example, in the vscode extension), then\n    // Module._extenions might be undefined. In that case, we just use a plain\n    // require.\n    if (Module._extensions === undefined) {\n      return require(compilerPath);\n    }\n    const previousHook = Module._extensions[\".js\"];\n    Module._extensions[\".js\"] = function (module, filename) {\n      const content = fs.readFileSync(filename, \"utf8\");\n      Object.getPrototypeOf(module)._compile.call(module, content, filename);\n    };\n    const loadedSolc = require(compilerPath);\n    Module._extensions[\".js\"] = previousHook;\n    return loadedSolc;\n  }\n}\nexports.Compiler = Compiler;\nclass NativeCompiler {\n  constructor(_pathToSolc) {\n    this._pathToSolc = _pathToSolc;\n  }\n  async compile(input) {\n    const output = await new Promise((resolve, reject) => {\n      try {\n        const process = (0, child_process_1.execFile)(this._pathToSolc, [`--standard-json`], {\n          maxBuffer: 1024 * 1024 * 500\n        }, (err, stdout) => {\n          if (err !== null) {\n            return reject(err);\n          }\n          resolve(stdout);\n        });\n        process.stdin.write(JSON.stringify(input));\n        process.stdin.end();\n      } catch (e) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.SOLC.CANT_RUN_NATIVE_COMPILER, {}, e);\n      }\n    });\n    return JSON.parse(output);\n  }\n}\nexports.NativeCompiler = NativeCompiler;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AAMA,MAAaA,QAAQ;EAGnBC,YAAoBC,aAAqB;IAArB,kBAAa,GAAbA,aAAa;EAAW;EAErC,MAAMC,OAAO,CAACC,KAAoB;IACvC,MAAMC,IAAI,GAAG,MAAM,IAAI,CAACC,OAAO,EAAE;IAEjC,MAAMC,UAAU,GAAGF,IAAI,CAACF,OAAO,CAACK,IAAI,CAACC,SAAS,CAACL,KAAK,CAAC,CAAC;IACtD,OAAOI,IAAI,CAACE,KAAK,CAACH,UAAU,CAAC;EAC/B;EAEO,MAAMD,OAAO;IAClB,IAAI,IAAI,CAACK,WAAW,KAAKC,SAAS,EAAE;MAClC,OAAO,IAAI,CAACD,WAAW;;IAGzB,MAAM;MAAEE,OAAO,EAAEC;IAAW,CAAE,GAAG,wDAAa,cAAc,GAAC;IAC7D,IAAI,CAACH,WAAW,GAAGG,WAAW,CAC5B,IAAI,CAACC,oBAAoB,CAAC,IAAI,CAACb,aAAa,CAAC,CAC9C;IAED,OAAO,IAAI,CAACS,WAAW;EACzB;EAEA;;;;;;EAMQI,oBAAoB,CAACC,YAAoB;IAC/C,MAAMC,MAAM,GAAGC,MAAM,CAACjB,WAAkB;IAExC;IACA;IACA;IACA,IAAIgB,MAAM,CAACE,WAAW,KAAKP,SAAS,EAAE;MACpC,OAAOQ,OAAO,CAACJ,YAAY,CAAC;;IAG9B,MAAMK,YAAY,GAAGJ,MAAM,CAACE,WAAW,CAAC,KAAK,CAAC;IAE9CF,MAAM,CAACE,WAAW,CAAC,KAAK,CAAC,GAAG,UAC1BD,MAAqB,EACrBI,QAAgB;MAEhB,MAAMC,OAAO,GAAGC,EAAE,CAACC,YAAY,CAACH,QAAQ,EAAE,MAAM,CAAC;MACjDI,MAAM,CAACC,cAAc,CAACT,MAAM,CAAC,CAACU,QAAQ,CAACC,IAAI,CAACX,MAAM,EAAEK,OAAO,EAAED,QAAQ,CAAC;IACxE,CAAC;IAED,MAAMQ,UAAU,GAAGV,OAAO,CAACJ,YAAY,CAAC;IAExCC,MAAM,CAACE,WAAW,CAAC,KAAK,CAAC,GAAGE,YAAY;IAExC,OAAOS,UAAU;EACnB;;AAxDFC;AA2DA,MAAaC,cAAc;EACzB/B,YAAoBgC,WAAmB;IAAnB,gBAAW,GAAXA,WAAW;EAAW;EAEnC,MAAM9B,OAAO,CAACC,KAAoB;IACvC,MAAM8B,MAAM,GAAW,MAAM,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MAC3D,IAAI;QACF,MAAMC,OAAO,GAAG,4BAAQ,EACtB,IAAI,CAACL,WAAW,EAChB,CAAC,iBAAiB,CAAC,EACnB;UACEM,SAAS,EAAE,IAAI,GAAG,IAAI,GAAG;SAC1B,EACD,CAACC,GAAG,EAAEC,MAAM,KAAI;UACd,IAAID,GAAG,KAAK,IAAI,EAAE;YAChB,OAAOH,MAAM,CAACG,GAAG,CAAC;;UAEpBJ,OAAO,CAACK,MAAM,CAAC;QACjB,CAAC,CACF;QAEDH,OAAO,CAACI,KAAM,CAACC,KAAK,CAACnC,IAAI,CAACC,SAAS,CAACL,KAAK,CAAC,CAAC;QAC3CkC,OAAO,CAACI,KAAM,CAACE,GAAG,EAAE;OACrB,CAAC,OAAOC,CAAM,EAAE;QACf,MAAM,IAAIC,qBAAY,CAACC,oBAAM,CAACC,IAAI,CAACC,wBAAwB,EAAE,EAAE,EAAEJ,CAAC,CAAC;;IAEvE,CAAC,CAAC;IAEF,OAAOrC,IAAI,CAACE,KAAK,CAACwB,MAAM,CAAC;EAC3B;;AA5BFH","names":["Compiler","constructor","_pathToSolcJs","compile","input","solc","getSolc","jsonOutput","JSON","stringify","parse","_loadedSolc","undefined","default","solcWrapper","_loadCompilerSources","compilerPath","Module","module","_extensions","require","previousHook","filename","content","fs","readFileSync","Object","getPrototypeOf","_compile","call","loadedSolc","exports","NativeCompiler","_pathToSolc","output","Promise","resolve","reject","process","maxBuffer","err","stdout","stdin","write","end","e","errors_1","errors_list_1","SOLC","CANT_RUN_NATIVE_COMPILER"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/hardhat/src/internal/solidity/compiler/index.ts"],"sourcesContent":["import { execFile } from \"child_process\";\nimport * as fs from \"fs\";\nimport { CompilerInput, CompilerOutput } from \"../../../types\";\nimport { HardhatError } from \"../../core/errors\";\nimport { ERRORS } from \"../../core/errors-list\";\n\nexport interface ICompiler {\n  compile(input: CompilerInput): Promise<CompilerOutput>;\n}\n\nexport class Compiler implements ICompiler {\n  private _loadedSolc?: any;\n\n  constructor(private _pathToSolcJs: string) {}\n\n  public async compile(input: CompilerInput) {\n    const solc = await this.getSolc();\n\n    const jsonOutput = solc.compile(JSON.stringify(input));\n    return JSON.parse(jsonOutput);\n  }\n\n  public async getSolc() {\n    if (this._loadedSolc !== undefined) {\n      return this._loadedSolc;\n    }\n\n    const { default: solcWrapper } = await import(\"solc/wrapper\");\n    this._loadedSolc = solcWrapper(\n      this._loadCompilerSources(this._pathToSolcJs)\n    );\n\n    return this._loadedSolc;\n  }\n\n  /**\n   * This function loads the compiler sources bypassing any require hook.\n   *\n   * The compiler is a huge asm.js file, and using a simple require may trigger\n   * babel/register and hang the process.\n   */\n  private _loadCompilerSources(compilerPath: string) {\n    const Module = module.constructor as any;\n\n    // if Hardhat is bundled (for example, in the vscode extension), then\n    // Module._extenions might be undefined. In that case, we just use a plain\n    // require.\n    if (Module._extensions === undefined) {\n      return require(compilerPath);\n    }\n\n    const previousHook = Module._extensions[\".js\"];\n\n    Module._extensions[\".js\"] = function (\n      module: NodeJS.Module,\n      filename: string\n    ) {\n      const content = fs.readFileSync(filename, \"utf8\");\n      Object.getPrototypeOf(module)._compile.call(module, content, filename);\n    };\n\n    const loadedSolc = require(compilerPath);\n\n    Module._extensions[\".js\"] = previousHook;\n\n    return loadedSolc;\n  }\n}\n\nexport class NativeCompiler implements ICompiler {\n  constructor(private _pathToSolc: string) {}\n\n  public async compile(input: CompilerInput) {\n    const output: string = await new Promise((resolve, reject) => {\n      try {\n        const process = execFile(\n          this._pathToSolc,\n          [`--standard-json`],\n          {\n            maxBuffer: 1024 * 1024 * 500,\n          },\n          (err, stdout) => {\n            if (err !== null) {\n              return reject(err);\n            }\n            resolve(stdout);\n          }\n        );\n\n        process.stdin!.write(JSON.stringify(input));\n        process.stdin!.end();\n      } catch (e: any) {\n        throw new HardhatError(ERRORS.SOLC.CANT_RUN_NATIVE_COMPILER, {}, e);\n      }\n    });\n\n    return JSON.parse(output);\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}