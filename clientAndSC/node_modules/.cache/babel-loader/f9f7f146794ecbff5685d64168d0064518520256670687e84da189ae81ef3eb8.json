{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isEvmStep = exports.isDecodedCallTrace = exports.isCallTrace = exports.isDecodedCreateTrace = exports.isCreateTrace = exports.isPrecompileTrace = void 0;\nfunction isPrecompileTrace(trace) {\n  return \"precompile\" in trace;\n}\nexports.isPrecompileTrace = isPrecompileTrace;\nfunction isCreateTrace(trace) {\n  return \"code\" in trace && !isCallTrace(trace);\n}\nexports.isCreateTrace = isCreateTrace;\nfunction isDecodedCreateTrace(trace) {\n  return isCreateTrace(trace) && trace.bytecode !== undefined;\n}\nexports.isDecodedCreateTrace = isDecodedCreateTrace;\nfunction isCallTrace(trace) {\n  return \"code\" in trace && \"calldata\" in trace;\n}\nexports.isCallTrace = isCallTrace;\nfunction isDecodedCallTrace(trace) {\n  return isCallTrace(trace) && trace.bytecode !== undefined;\n}\nexports.isDecodedCallTrace = isDecodedCallTrace;\nfunction isEvmStep(step) {\n  return \"pc\" in step && step.pc !== undefined;\n}\nexports.isEvmStep = isEvmStep;","map":{"version":3,"mappings":";;;;;;AA0DA,SAAgBA,iBAAiB,CAC/BC,KAAmB;EAEnB,OAAO,YAAY,IAAIA,KAAK;AAC9B;AAJAC;AAMA,SAAgBC,aAAa,CAC3BF,KAAmB;EAEnB,OAAO,MAAM,IAAIA,KAAK,IAAI,CAACG,WAAW,CAACH,KAAK,CAAC;AAC/C;AAJAC;AAMA,SAAgBG,oBAAoB,CAClCJ,KAAmB;EAEnB,OAAOE,aAAa,CAACF,KAAK,CAAC,IAAIA,KAAK,CAACK,QAAQ,KAAKC,SAAS;AAC7D;AAJAL;AAMA,SAAgBE,WAAW,CAACH,KAAmB;EAC7C,OAAO,MAAM,IAAIA,KAAK,IAAI,UAAU,IAAIA,KAAK;AAC/C;AAFAC;AAIA,SAAgBM,kBAAkB,CAChCP,KAAmB;EAEnB,OAAOG,WAAW,CAACH,KAAK,CAAC,IAAIA,KAAK,CAACK,QAAQ,KAAKC,SAAS;AAC3D;AAJAL;AAMA,SAAgBO,SAAS,CAACC,IAAsB;EAC9C,OAAO,IAAI,IAAIA,IAAI,IAAIA,IAAI,CAACC,EAAE,KAAKJ,SAAS;AAC9C;AAFAL","names":["isPrecompileTrace","trace","exports","isCreateTrace","isCallTrace","isDecodedCreateTrace","bytecode","undefined","isDecodedCallTrace","isEvmStep","step","pc"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/hardhat/src/internal/hardhat-network/stack-traces/message-trace.ts"],"sourcesContent":["import type { EvmError } from \"@nomicfoundation/ethereumjs-evm\";\n\nimport type { Bytecode } from \"./model\";\n\nexport type MessageTrace =\n  | CreateMessageTrace\n  | CallMessageTrace\n  | PrecompileMessageTrace;\n\nexport type EvmMessageTrace = CreateMessageTrace | CallMessageTrace;\n\nexport type DecodedEvmMessageTrace =\n  | DecodedCreateMessageTrace\n  | DecodedCallMessageTrace;\n\nexport interface BaseMessageTrace {\n  value: bigint;\n  returnData: Buffer;\n  error?: EvmError;\n  gasUsed: bigint;\n  depth: number;\n}\n\nexport interface PrecompileMessageTrace extends BaseMessageTrace {\n  precompile: number;\n  calldata: Buffer;\n}\n\nexport interface BaseEvmMessageTrace extends BaseMessageTrace {\n  code: Buffer;\n  value: bigint;\n  returnData: Buffer;\n  error?: EvmError;\n  steps: MessageTraceStep[];\n  bytecode?: Bytecode;\n  // The following is just an optimization: When processing this traces it's useful to know ahead of\n  // time how many subtraces there are.\n  numberOfSubtraces: number;\n}\n\nexport interface CreateMessageTrace extends BaseEvmMessageTrace {\n  deployedContract: Buffer | undefined;\n}\n\nexport interface CallMessageTrace extends BaseEvmMessageTrace {\n  calldata: Buffer;\n  address: Buffer;\n  codeAddress: Buffer;\n}\n\nexport interface DecodedCreateMessageTrace extends CreateMessageTrace {\n  bytecode: Bytecode;\n}\n\nexport interface DecodedCallMessageTrace extends CallMessageTrace {\n  bytecode: Bytecode;\n}\n\nexport function isPrecompileTrace(\n  trace: MessageTrace\n): trace is PrecompileMessageTrace {\n  return \"precompile\" in trace;\n}\n\nexport function isCreateTrace(\n  trace: MessageTrace\n): trace is CreateMessageTrace {\n  return \"code\" in trace && !isCallTrace(trace);\n}\n\nexport function isDecodedCreateTrace(\n  trace: MessageTrace\n): trace is DecodedCreateMessageTrace {\n  return isCreateTrace(trace) && trace.bytecode !== undefined;\n}\n\nexport function isCallTrace(trace: MessageTrace): trace is CallMessageTrace {\n  return \"code\" in trace && \"calldata\" in trace;\n}\n\nexport function isDecodedCallTrace(\n  trace: MessageTrace\n): trace is DecodedCallMessageTrace {\n  return isCallTrace(trace) && trace.bytecode !== undefined;\n}\n\nexport function isEvmStep(step: MessageTraceStep): step is EvmStep {\n  return \"pc\" in step && step.pc !== undefined;\n}\n\nexport type MessageTraceStep = MessageTrace | EvmStep;\n\nexport interface EvmStep {\n  pc: number;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}