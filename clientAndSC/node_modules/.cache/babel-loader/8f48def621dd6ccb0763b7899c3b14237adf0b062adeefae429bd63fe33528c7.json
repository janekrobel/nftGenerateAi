{"ast":null,"code":"import { __read, __spread } from \"tslib\";\nimport { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { logger } from '@sentry/utils';\nexport var installedIntegrations = [];\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options) {\n  var defaultIntegrations = options.defaultIntegrations && __spread(options.defaultIntegrations) || [];\n  var userIntegrations = options.integrations;\n  var integrations = [];\n  if (Array.isArray(userIntegrations)) {\n    var userIntegrationsNames_1 = userIntegrations.map(function (i) {\n      return i.name;\n    });\n    var pickedIntegrationsNames_1 = [];\n    // Leave only unique default integrations, that were not overridden with provided user integrations\n    defaultIntegrations.forEach(function (defaultIntegration) {\n      if (userIntegrationsNames_1.indexOf(defaultIntegration.name) === -1 && pickedIntegrationsNames_1.indexOf(defaultIntegration.name) === -1) {\n        integrations.push(defaultIntegration);\n        pickedIntegrationsNames_1.push(defaultIntegration.name);\n      }\n    });\n    // Don't add same user integration twice\n    userIntegrations.forEach(function (userIntegration) {\n      if (pickedIntegrationsNames_1.indexOf(userIntegration.name) === -1) {\n        integrations.push(userIntegration);\n        pickedIntegrationsNames_1.push(userIntegration.name);\n      }\n    });\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  } else {\n    integrations = __spread(defaultIntegrations);\n  }\n  // Make sure that if present, `Debug` integration will always run last\n  var integrationsNames = integrations.map(function (i) {\n    return i.name;\n  });\n  var alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push.apply(integrations, __spread(integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1)));\n  }\n  return integrations;\n}\n/** Setup given integration */\nexport function setupIntegration(integration) {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  logger.log(\"Integration installed: \" + integration.name);\n}\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations(options) {\n  var integrations = {};\n  getIntegrationsToSetup(options).forEach(function (integration) {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  return integrations;\n}","map":{"version":3,"mappings":"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","names":["addGlobalEventProcessor","getCurrentHub","logger","installedIntegrations","getIntegrationsToSetup","options","defaultIntegrations","userIntegrations","integrations","Array","isArray","userIntegrationsNames_1","map","name","pickedIntegrationsNames_1","forEach","indexOf","defaultIntegration","push","userIntegration","integrationsNames","alwaysLastToRun","splice","setupIntegration","integration","setupOnce","log","setupIntegrations"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@sentry/core/src/integration.ts"],"sourcesContent":["import { addGlobalEventProcessor, getCurrentHub } from '@sentry/hub';\nimport { Integration, Options } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nexport const installedIntegrations: string[] = [];\n\n/** Map of integrations assigned to a client */\nexport interface IntegrationIndex {\n  [key: string]: Integration;\n}\n\n/** Gets integration to install */\nexport function getIntegrationsToSetup(options: Options): Integration[] {\n  const defaultIntegrations = (options.defaultIntegrations && [...options.defaultIntegrations]) || [];\n  const userIntegrations = options.integrations;\n  let integrations: Integration[] = [];\n  if (Array.isArray(userIntegrations)) {\n    const userIntegrationsNames = userIntegrations.map(i => i.name);\n    const pickedIntegrationsNames: string[] = [];\n\n    // Leave only unique default integrations, that were not overridden with provided user integrations\n    defaultIntegrations.forEach(defaultIntegration => {\n      if (\n        userIntegrationsNames.indexOf(defaultIntegration.name) === -1 &&\n        pickedIntegrationsNames.indexOf(defaultIntegration.name) === -1\n      ) {\n        integrations.push(defaultIntegration);\n        pickedIntegrationsNames.push(defaultIntegration.name);\n      }\n    });\n\n    // Don't add same user integration twice\n    userIntegrations.forEach(userIntegration => {\n      if (pickedIntegrationsNames.indexOf(userIntegration.name) === -1) {\n        integrations.push(userIntegration);\n        pickedIntegrationsNames.push(userIntegration.name);\n      }\n    });\n  } else if (typeof userIntegrations === 'function') {\n    integrations = userIntegrations(defaultIntegrations);\n    integrations = Array.isArray(integrations) ? integrations : [integrations];\n  } else {\n    integrations = [...defaultIntegrations];\n  }\n\n  // Make sure that if present, `Debug` integration will always run last\n  const integrationsNames = integrations.map(i => i.name);\n  const alwaysLastToRun = 'Debug';\n  if (integrationsNames.indexOf(alwaysLastToRun) !== -1) {\n    integrations.push(...integrations.splice(integrationsNames.indexOf(alwaysLastToRun), 1));\n  }\n\n  return integrations;\n}\n\n/** Setup given integration */\nexport function setupIntegration(integration: Integration): void {\n  if (installedIntegrations.indexOf(integration.name) !== -1) {\n    return;\n  }\n  integration.setupOnce(addGlobalEventProcessor, getCurrentHub);\n  installedIntegrations.push(integration.name);\n  logger.log(`Integration installed: ${integration.name}`);\n}\n\n/**\n * Given a list of integration instances this installs them all. When `withDefaults` is set to `true` then all default\n * integrations are added unless they were already provided before.\n * @param integrations array of integration instances\n * @param withDefault should enable default integrations\n */\nexport function setupIntegrations<O extends Options>(options: O): IntegrationIndex {\n  const integrations: IntegrationIndex = {};\n  getIntegrationsToSetup(options).forEach(integration => {\n    integrations[integration.name] = integration;\n    setupIntegration(integration);\n  });\n  return integrations;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}