{"ast":null,"code":"// copied from https://github.com/nodejs/node/blob/v15.3.0/lib/internal/modules/package_json_reader.js\n'use strict';\n\nconst {\n  SafeMap\n} = require('./node-primordials');\nconst {\n  internalModuleReadJSON\n} = require('./node-internalBinding-fs');\nconst {\n  pathToFileURL\n} = require('url');\nconst {\n  toNamespacedPath\n} = require('path');\n// const { getOptionValue } = require('./node-options');\n\nconst cache = new SafeMap();\nlet manifest;\n\n/**\n * @param {string} jsonPath\n * @return {{string: string, containsKeys: boolean}}\n */\nfunction read(jsonPath) {\n  if (cache.has(jsonPath)) {\n    return cache.get(jsonPath);\n  }\n  const [string, containsKeys] = internalModuleReadJSON(toNamespacedPath(jsonPath));\n  const result = {\n    string,\n    containsKeys\n  };\n  if (string !== undefined) {\n    if (manifest === undefined) {\n      // manifest = getOptionValue('--experimental-policy') ?\n      //   require('internal/process/policy').manifest :\n      //   null;\n      // disabled for now.  I am not sure if/how we should support this\n      manifest = null;\n    }\n    if (manifest !== null) {\n      const jsonURL = pathToFileURL(jsonPath);\n      manifest.assertIntegrity(jsonURL, string);\n    }\n  }\n  cache.set(jsonPath, result);\n  return result;\n}\nmodule.exports = {\n  read\n};","map":{"version":3,"names":["SafeMap","require","internalModuleReadJSON","pathToFileURL","toNamespacedPath","cache","manifest","read","jsonPath","has","get","string","containsKeys","result","undefined","jsonURL","assertIntegrity","set","module","exports"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ts-node/dist-raw/node-internal-modules-package_json_reader.js"],"sourcesContent":["// copied from https://github.com/nodejs/node/blob/v15.3.0/lib/internal/modules/package_json_reader.js\n'use strict';\n\nconst { SafeMap } = require('./node-primordials');\nconst { internalModuleReadJSON } = require('./node-internalBinding-fs');\nconst { pathToFileURL } = require('url');\nconst { toNamespacedPath } = require('path');\n// const { getOptionValue } = require('./node-options');\n\nconst cache = new SafeMap();\n\nlet manifest;\n\n/**\n * @param {string} jsonPath\n * @return {{string: string, containsKeys: boolean}}\n */\nfunction read(jsonPath) {\n  if (cache.has(jsonPath)) {\n    return cache.get(jsonPath);\n  }\n\n  const [string, containsKeys] = internalModuleReadJSON(\n    toNamespacedPath(jsonPath)\n  );\n  const result = { string, containsKeys };\n  if (string !== undefined) {\n    if (manifest === undefined) {\n      // manifest = getOptionValue('--experimental-policy') ?\n      //   require('internal/process/policy').manifest :\n      //   null;\n      // disabled for now.  I am not sure if/how we should support this\n      manifest = null;\n    }\n    if (manifest !== null) {\n      const jsonURL = pathToFileURL(jsonPath);\n      manifest.assertIntegrity(jsonURL, string);\n    }\n  }\n  cache.set(jsonPath, result);\n  return result;\n}\n\nmodule.exports = { read };\n"],"mappings":"AAAA;AACA,YAAY;;AAEZ,MAAM;EAAEA;AAAQ,CAAC,GAAGC,OAAO,CAAC,oBAAoB,CAAC;AACjD,MAAM;EAAEC;AAAuB,CAAC,GAAGD,OAAO,CAAC,2BAA2B,CAAC;AACvE,MAAM;EAAEE;AAAc,CAAC,GAAGF,OAAO,CAAC,KAAK,CAAC;AACxC,MAAM;EAAEG;AAAiB,CAAC,GAAGH,OAAO,CAAC,MAAM,CAAC;AAC5C;;AAEA,MAAMI,KAAK,GAAG,IAAIL,OAAO,EAAE;AAE3B,IAAIM,QAAQ;;AAEZ;AACA;AACA;AACA;AACA,SAASC,IAAI,CAACC,QAAQ,EAAE;EACtB,IAAIH,KAAK,CAACI,GAAG,CAACD,QAAQ,CAAC,EAAE;IACvB,OAAOH,KAAK,CAACK,GAAG,CAACF,QAAQ,CAAC;EAC5B;EAEA,MAAM,CAACG,MAAM,EAAEC,YAAY,CAAC,GAAGV,sBAAsB,CACnDE,gBAAgB,CAACI,QAAQ,CAAC,CAC3B;EACD,MAAMK,MAAM,GAAG;IAAEF,MAAM;IAAEC;EAAa,CAAC;EACvC,IAAID,MAAM,KAAKG,SAAS,EAAE;IACxB,IAAIR,QAAQ,KAAKQ,SAAS,EAAE;MAC1B;MACA;MACA;MACA;MACAR,QAAQ,GAAG,IAAI;IACjB;IACA,IAAIA,QAAQ,KAAK,IAAI,EAAE;MACrB,MAAMS,OAAO,GAAGZ,aAAa,CAACK,QAAQ,CAAC;MACvCF,QAAQ,CAACU,eAAe,CAACD,OAAO,EAAEJ,MAAM,CAAC;IAC3C;EACF;EACAN,KAAK,CAACY,GAAG,CAACT,QAAQ,EAAEK,MAAM,CAAC;EAC3B,OAAOA,MAAM;AACf;AAEAK,MAAM,CAACC,OAAO,GAAG;EAAEZ;AAAK,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}