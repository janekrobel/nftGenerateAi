{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadTsNode = exports.isTypescriptSupported = exports.isRunningWithTypescript = exports.willRunWithTypescript = void 0;\nconst config_loading_1 = require(\"./config/config-loading\");\nconst errors_1 = require(\"./errors\");\nconst errors_list_1 = require(\"./errors-list\");\nconst execution_mode_1 = require(\"./execution-mode\");\nlet cachedIsTypescriptSupported;\n/**\n * Returns true if Hardhat will run in using typescript mode.\n * @param configPath The config path if provider by the user.\n */\nfunction willRunWithTypescript(configPath) {\n  const config = (0, config_loading_1.resolveConfigPath)(configPath);\n  return isTypescriptFile(config);\n}\nexports.willRunWithTypescript = willRunWithTypescript;\n/**\n * Returns true if an Hardhat is already running with typescript.\n */\nfunction isRunningWithTypescript(config) {\n  return isTypescriptFile(config.paths.configFile);\n}\nexports.isRunningWithTypescript = isRunningWithTypescript;\nfunction isTypescriptSupported() {\n  if (cachedIsTypescriptSupported === undefined) {\n    try {\n      // We resolve these from Hardhat's installation.\n      require.resolve(\"typescript\");\n      require.resolve(\"ts-node\");\n      cachedIsTypescriptSupported = true;\n    } catch {\n      cachedIsTypescriptSupported = false;\n    }\n  }\n  return cachedIsTypescriptSupported;\n}\nexports.isTypescriptSupported = isTypescriptSupported;\nfunction loadTsNode(tsConfigPath) {\n  let shouldTypecheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  try {\n    require.resolve(\"typescript\");\n  } catch {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.TYPESCRIPT_NOT_INSTALLED);\n  }\n  try {\n    require.resolve(\"ts-node\");\n  } catch {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.TS_NODE_NOT_INSTALLED);\n  }\n  // If we are running tests we just want to transpile\n  if ((0, execution_mode_1.isRunningHardhatCoreTests)()) {\n    // eslint-disable-next-line import/no-extraneous-dependencies\n    require(\"ts-node/register/transpile-only\");\n    return;\n  }\n  if (tsConfigPath !== undefined) {\n    process.env.TS_NODE_PROJECT = tsConfigPath;\n  }\n  // See: https://github.com/nomiclabs/hardhat/issues/265\n  if (process.env.TS_NODE_FILES === undefined) {\n    process.env.TS_NODE_FILES = \"true\";\n  }\n  let tsNodeRequirement = \"ts-node/register\";\n  if (!shouldTypecheck) {\n    tsNodeRequirement += \"/transpile-only\";\n  }\n  // eslint-disable-next-line import/no-extraneous-dependencies\n  require(tsNodeRequirement);\n}\nexports.loadTsNode = loadTsNode;\nfunction isTypescriptFile(path) {\n  return path.endsWith(\".ts\");\n}","map":{"version":3,"mappings":";;;;;;AAEA;AACA;AACA;AACA;AAEA,IAAIA,2BAAgD;AAEpD;;;;AAIA,SAAgBC,qBAAqB,CAACC,UAAmB;EACvD,MAAMC,MAAM,GAAG,sCAAiB,EAACD,UAAU,CAAC;EAC5C,OAAOE,gBAAgB,CAACD,MAAM,CAAC;AACjC;AAHAE;AAKA;;;AAGA,SAAgBC,uBAAuB,CAACH,MAAqB;EAC3D,OAAOC,gBAAgB,CAACD,MAAM,CAACI,KAAK,CAACC,UAAU,CAAC;AAClD;AAFAH;AAIA,SAAgBI,qBAAqB;EACnC,IAAIT,2BAA2B,KAAKU,SAAS,EAAE;IAC7C,IAAI;MACF;MACAC,OAAO,CAACC,OAAO,CAAC,YAAY,CAAC;MAC7BD,OAAO,CAACC,OAAO,CAAC,SAAS,CAAC;MAC1BZ,2BAA2B,GAAG,IAAI;KACnC,CAAC,MAAM;MACNA,2BAA2B,GAAG,KAAK;;;EAIvC,OAAOA,2BAA2B;AACpC;AAbAK;AAeA,SAAgBQ,UAAU,CACxBC,YAAqB,EACW;EAAA,IAAhCC,sFAA2B,KAAK;EAEhC,IAAI;IACFJ,OAAO,CAACC,OAAO,CAAC,YAAY,CAAC;GAC9B,CAAC,MAAM;IACN,MAAM,IAAII,qBAAY,CAACC,oBAAM,CAACC,OAAO,CAACC,wBAAwB,CAAC;;EAGjE,IAAI;IACFR,OAAO,CAACC,OAAO,CAAC,SAAS,CAAC;GAC3B,CAAC,MAAM;IACN,MAAM,IAAII,qBAAY,CAACC,oBAAM,CAACC,OAAO,CAACE,qBAAqB,CAAC;;EAG9D;EACA,IAAI,8CAAyB,GAAE,EAAE;IAC/B;IACAT,OAAO,CAAC,iCAAiC,CAAC;IAC1C;;EAGF,IAAIG,YAAY,KAAKJ,SAAS,EAAE;IAC9BW,OAAO,CAACC,GAAG,CAACC,eAAe,GAAGT,YAAY;;EAG5C;EACA,IAAIO,OAAO,CAACC,GAAG,CAACE,aAAa,KAAKd,SAAS,EAAE;IAC3CW,OAAO,CAACC,GAAG,CAACE,aAAa,GAAG,MAAM;;EAGpC,IAAIC,iBAAiB,GAAG,kBAAkB;EAE1C,IAAI,CAACV,eAAe,EAAE;IACpBU,iBAAiB,IAAI,iBAAiB;;EAGxC;EACAd,OAAO,CAACc,iBAAiB,CAAC;AAC5B;AAxCApB;AA0CA,SAASD,gBAAgB,CAACsB,IAAY;EACpC,OAAOA,IAAI,CAACC,QAAQ,CAAC,KAAK,CAAC;AAC7B","names":["cachedIsTypescriptSupported","willRunWithTypescript","configPath","config","isTypescriptFile","exports","isRunningWithTypescript","paths","configFile","isTypescriptSupported","undefined","require","resolve","loadTsNode","tsConfigPath","shouldTypecheck","errors_1","errors_list_1","GENERAL","TYPESCRIPT_NOT_INSTALLED","TS_NODE_NOT_INSTALLED","process","env","TS_NODE_PROJECT","TS_NODE_FILES","tsNodeRequirement","path","endsWith"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/hardhat/src/internal/core/typescript-support.ts"],"sourcesContent":["import { HardhatConfig } from \"../../types\";\n\nimport { resolveConfigPath } from \"./config/config-loading\";\nimport { HardhatError } from \"./errors\";\nimport { ERRORS } from \"./errors-list\";\nimport { isRunningHardhatCoreTests } from \"./execution-mode\";\n\nlet cachedIsTypescriptSupported: boolean | undefined;\n\n/**\n * Returns true if Hardhat will run in using typescript mode.\n * @param configPath The config path if provider by the user.\n */\nexport function willRunWithTypescript(configPath?: string): boolean {\n  const config = resolveConfigPath(configPath);\n  return isTypescriptFile(config);\n}\n\n/**\n * Returns true if an Hardhat is already running with typescript.\n */\nexport function isRunningWithTypescript(config: HardhatConfig): boolean {\n  return isTypescriptFile(config.paths.configFile);\n}\n\nexport function isTypescriptSupported() {\n  if (cachedIsTypescriptSupported === undefined) {\n    try {\n      // We resolve these from Hardhat's installation.\n      require.resolve(\"typescript\");\n      require.resolve(\"ts-node\");\n      cachedIsTypescriptSupported = true;\n    } catch {\n      cachedIsTypescriptSupported = false;\n    }\n  }\n\n  return cachedIsTypescriptSupported;\n}\n\nexport function loadTsNode(\n  tsConfigPath?: string,\n  shouldTypecheck: boolean = false\n) {\n  try {\n    require.resolve(\"typescript\");\n  } catch {\n    throw new HardhatError(ERRORS.GENERAL.TYPESCRIPT_NOT_INSTALLED);\n  }\n\n  try {\n    require.resolve(\"ts-node\");\n  } catch {\n    throw new HardhatError(ERRORS.GENERAL.TS_NODE_NOT_INSTALLED);\n  }\n\n  // If we are running tests we just want to transpile\n  if (isRunningHardhatCoreTests()) {\n    // eslint-disable-next-line import/no-extraneous-dependencies\n    require(\"ts-node/register/transpile-only\");\n    return;\n  }\n\n  if (tsConfigPath !== undefined) {\n    process.env.TS_NODE_PROJECT = tsConfigPath;\n  }\n\n  // See: https://github.com/nomiclabs/hardhat/issues/265\n  if (process.env.TS_NODE_FILES === undefined) {\n    process.env.TS_NODE_FILES = \"true\";\n  }\n\n  let tsNodeRequirement = \"ts-node/register\";\n\n  if (!shouldTypecheck) {\n    tsNodeRequirement += \"/transpile-only\";\n  }\n\n  // eslint-disable-next-line import/no-extraneous-dependencies\n  require(tsNodeRequirement);\n}\n\nfunction isTypescriptFile(path: string): boolean {\n  return path.endsWith(\".ts\");\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}