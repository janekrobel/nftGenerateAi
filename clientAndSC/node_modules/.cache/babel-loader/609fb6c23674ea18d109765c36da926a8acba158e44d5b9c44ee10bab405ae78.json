{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.experimentalAddHardhatNetworkMessageTraceHook = exports.extendConfig = exports.extendEnvironment = exports.types = exports.internalTask = exports.subtask = exports.task = void 0;\nconst context_1 = require(\"../../context\");\nconst argumentTypes = __importStar(require(\"../params/argumentTypes\"));\nfunction task(name, descriptionOrAction, action) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  const dsl = ctx.tasksDSL;\n  if (descriptionOrAction === undefined) {\n    return dsl.task(name);\n  }\n  if (typeof descriptionOrAction !== \"string\") {\n    return dsl.task(name, descriptionOrAction);\n  }\n  return dsl.task(name, descriptionOrAction, action);\n}\nexports.task = task;\nfunction subtask(name, descriptionOrAction, action) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  const dsl = ctx.tasksDSL;\n  if (descriptionOrAction === undefined) {\n    return dsl.subtask(name);\n  }\n  if (typeof descriptionOrAction !== \"string\") {\n    return dsl.subtask(name, descriptionOrAction);\n  }\n  return dsl.subtask(name, descriptionOrAction, action);\n}\nexports.subtask = subtask;\n// Backwards compatibility alias\nexports.internalTask = subtask;\nexports.types = argumentTypes;\n/**\n * Register an environment extender what will be run after the\n * Hardhat Runtime Environment is initialized.\n *\n * @param extender A function that receives the Hardhat Runtime\n * Environment.\n */\nfunction extendEnvironment(extender) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  const extenderManager = ctx.extendersManager;\n  extenderManager.add(extender);\n}\nexports.extendEnvironment = extendEnvironment;\nfunction extendConfig(extender) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  ctx.configExtenders.push(extender);\n}\nexports.extendConfig = extendConfig;\n// NOTE: This is experimental and will be removed. Please contact our team\n// if you are planning to use it.\nfunction experimentalAddHardhatNetworkMessageTraceHook(hook) {\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  ctx.experimentalHardhatNetworkMessageTraceHooks.push(hook);\n}\nexports.experimentalAddHardhatNetworkMessageTraceHook = experimentalAddHardhatNetworkMessageTraceHook;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAQA;AACA;AAkCA,SAAgBA,IAAI,CAClBC,IAAY,EACZC,mBAAgD,EAChDC,MAA0B;EAE1B,MAAMC,GAAG,GAAGC,wBAAc,CAACC,iBAAiB,EAAE;EAC9C,MAAMC,GAAG,GAAGH,GAAG,CAACI,QAAQ;EAExB,IAAIN,mBAAmB,KAAKO,SAAS,EAAE;IACrC,OAAOF,GAAG,CAACP,IAAI,CAACC,IAAI,CAAC;;EAGvB,IAAI,OAAOC,mBAAmB,KAAK,QAAQ,EAAE;IAC3C,OAAOK,GAAG,CAACP,IAAI,CAACC,IAAI,EAAEC,mBAAmB,CAAC;;EAG5C,OAAOK,GAAG,CAACP,IAAI,CAACC,IAAI,EAAEC,mBAAmB,EAAEC,MAAM,CAAC;AACpD;AAjBAO;AAoDA,SAAgBC,OAAO,CACrBV,IAAY,EACZC,mBAAgD,EAChDC,MAA0B;EAE1B,MAAMC,GAAG,GAAGC,wBAAc,CAACC,iBAAiB,EAAE;EAC9C,MAAMC,GAAG,GAAGH,GAAG,CAACI,QAAQ;EAExB,IAAIN,mBAAmB,KAAKO,SAAS,EAAE;IACrC,OAAOF,GAAG,CAACI,OAAO,CAACV,IAAI,CAAC;;EAG1B,IAAI,OAAOC,mBAAmB,KAAK,QAAQ,EAAE;IAC3C,OAAOK,GAAG,CAACI,OAAO,CAACV,IAAI,EAAEC,mBAAmB,CAAC;;EAG/C,OAAOK,GAAG,CAACI,OAAO,CAACV,IAAI,EAAEC,mBAAmB,EAAEC,MAAM,CAAC;AACvD;AAjBAO;AAmBA;AACaA,oBAAY,GAAGC,OAAO;AAEtBD,aAAK,GAAGE,aAAa;AAElC;;;;;;;AAOA,SAAgBC,iBAAiB,CAACC,QAA6B;EAC7D,MAAMV,GAAG,GAAGC,wBAAc,CAACC,iBAAiB,EAAE;EAC9C,MAAMS,eAAe,GAAGX,GAAG,CAACY,gBAAgB;EAC5CD,eAAe,CAACE,GAAG,CAACH,QAAQ,CAAC;AAC/B;AAJAJ;AAMA,SAAgBQ,YAAY,CAACJ,QAAwB;EACnD,MAAMV,GAAG,GAAGC,wBAAc,CAACC,iBAAiB,EAAE;EAC9CF,GAAG,CAACe,eAAe,CAACC,IAAI,CAACN,QAAQ,CAAC;AACpC;AAHAJ;AAKA;AACA;AACA,SAAgBW,6CAA6C,CAC3DC,IAAgD;EAEhD,MAAMlB,GAAG,GAAGC,wBAAc,CAACC,iBAAiB,EAAE;EAC9CF,GAAG,CAACmB,2CAA2C,CAACH,IAAI,CAACE,IAAI,CAAC;AAC5D;AALAZ","names":["task","name","descriptionOrAction","action","ctx","context_1","getHardhatContext","dsl","tasksDSL","undefined","exports","subtask","argumentTypes","extendEnvironment","extender","extenderManager","extendersManager","add","extendConfig","configExtenders","push","experimentalAddHardhatNetworkMessageTraceHook","hook","experimentalHardhatNetworkMessageTraceHooks"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/hardhat/src/internal/core/config/config-env.ts"],"sourcesContent":["import {\n  ActionType,\n  ConfigExtender,\n  ConfigurableTaskDefinition,\n  EnvironmentExtender,\n  ExperimentalHardhatNetworkMessageTraceHook,\n  TaskArguments,\n} from \"../../../types\";\nimport { HardhatContext } from \"../../context\";\nimport * as argumentTypes from \"../params/argumentTypes\";\n\n/**\n * Creates a task, overriding any previous task with the same name.\n *\n * @remarks The action must await every async call made within it.\n *\n * @param name The task's name.\n * @param description The task's description.\n * @param action The task's action.\n * @returns A task definition.\n */\nexport function task<ArgsT extends TaskArguments>(\n  name: string,\n  description?: string,\n  action?: ActionType<ArgsT>\n): ConfigurableTaskDefinition;\n\n/**\n * Creates a task without description, overriding any previous task\n * with the same name.\n *\n * @remarks The action must await every async call made within it.\n *\n * @param name The task's name.\n * @param action The task's action.\n *\n * @returns A task definition.\n */\nexport function task<ArgsT extends TaskArguments>(\n  name: string,\n  action: ActionType<ArgsT>\n): ConfigurableTaskDefinition;\n\nexport function task<ArgsT extends TaskArguments>(\n  name: string,\n  descriptionOrAction?: string | ActionType<ArgsT>,\n  action?: ActionType<ArgsT>\n): ConfigurableTaskDefinition {\n  const ctx = HardhatContext.getHardhatContext();\n  const dsl = ctx.tasksDSL;\n\n  if (descriptionOrAction === undefined) {\n    return dsl.task(name);\n  }\n\n  if (typeof descriptionOrAction !== \"string\") {\n    return dsl.task(name, descriptionOrAction);\n  }\n\n  return dsl.task(name, descriptionOrAction, action);\n}\n\n/**\n * Creates a subtask, overriding any previous task with the same name.\n *\n * @remarks The subtasks won't be displayed in the CLI help messages.\n * @remarks The action must await every async call made within it.\n *\n * @param name The task's name.\n * @param description The task's description.\n * @param action The task's action.\n * @returns A task definition.\n */\nexport function subtask<ArgsT extends TaskArguments>(\n  name: string,\n  description?: string,\n  action?: ActionType<ArgsT>\n): ConfigurableTaskDefinition;\n\n/**\n * Creates a subtask without description, overriding any previous\n * task with the same name.\n *\n * @remarks The subtasks won't be displayed in the CLI help messages.\n * @remarks The action must await every async call made within it.\n *\n * @param name The task's name.\n * @param action The task's action.\n * @returns A task definition.\n */\nexport function subtask<ArgsT extends TaskArguments>(\n  name: string,\n  action: ActionType<ArgsT>\n): ConfigurableTaskDefinition;\n\nexport function subtask<ArgsT extends TaskArguments>(\n  name: string,\n  descriptionOrAction?: string | ActionType<ArgsT>,\n  action?: ActionType<ArgsT>\n): ConfigurableTaskDefinition {\n  const ctx = HardhatContext.getHardhatContext();\n  const dsl = ctx.tasksDSL;\n\n  if (descriptionOrAction === undefined) {\n    return dsl.subtask(name);\n  }\n\n  if (typeof descriptionOrAction !== \"string\") {\n    return dsl.subtask(name, descriptionOrAction);\n  }\n\n  return dsl.subtask(name, descriptionOrAction, action);\n}\n\n// Backwards compatibility alias\nexport const internalTask = subtask;\n\nexport const types = argumentTypes;\n\n/**\n * Register an environment extender what will be run after the\n * Hardhat Runtime Environment is initialized.\n *\n * @param extender A function that receives the Hardhat Runtime\n * Environment.\n */\nexport function extendEnvironment(extender: EnvironmentExtender) {\n  const ctx = HardhatContext.getHardhatContext();\n  const extenderManager = ctx.extendersManager;\n  extenderManager.add(extender);\n}\n\nexport function extendConfig(extender: ConfigExtender) {\n  const ctx = HardhatContext.getHardhatContext();\n  ctx.configExtenders.push(extender);\n}\n\n// NOTE: This is experimental and will be removed. Please contact our team\n// if you are planning to use it.\nexport function experimentalAddHardhatNetworkMessageTraceHook(\n  hook: ExperimentalHardhatNetworkMessageTraceHook\n) {\n  const ctx = HardhatContext.getHardhatContext();\n  ctx.experimentalHardhatNetworkMessageTraceHooks.push(hook);\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}