{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDefaultTsconfigJsonForNodeVersion = void 0;\nconst nodeMajor = parseInt(process.versions.node.split('.')[0], 10);\n/**\n * return parsed JSON of the bundled @tsconfig/bases config appropriate for the\n * running version of nodejs\n * @internal\n */\nfunction getDefaultTsconfigJsonForNodeVersion(ts) {\n  const tsInternal = ts;\n  if (nodeMajor >= 16) {\n    const config = require('@tsconfig/node16/tsconfig.json');\n    if (configCompatible(config)) return config;\n  }\n  if (nodeMajor >= 14) {\n    const config = require('@tsconfig/node14/tsconfig.json');\n    if (configCompatible(config)) return config;\n  }\n  if (nodeMajor >= 12) {\n    const config = require('@tsconfig/node12/tsconfig.json');\n    if (configCompatible(config)) return config;\n  }\n  return require('@tsconfig/node10/tsconfig.json');\n  // Verify that tsconfig target and lib options are compatible with TypeScript compiler\n  function configCompatible(config) {\n    return typeof ts.ScriptTarget[config.compilerOptions.target.toUpperCase()] === 'number' && tsInternal.libs && config.compilerOptions.lib.every(lib => tsInternal.libs.includes(lib));\n  }\n}\nexports.getDefaultTsconfigJsonForNodeVersion = getDefaultTsconfigJsonForNodeVersion;","map":{"version":3,"mappings":";;;;;;AAEA,MAAMA,SAAS,GAAGC,QAAQ,CAACC,OAAO,CAACC,QAAQ,CAACC,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;AACnE;;;;;AAKA,SAAgBC,oCAAoC,CAACC,EAAY;EAC/D,MAAMC,UAAU,GAAGD,EAAuB;EAC1C,IAAIP,SAAS,IAAI,EAAE,EAAE;IACnB,MAAMS,MAAM,GAAGC,OAAO,CAAC,gCAAgC,CAAC;IACxD,IAAIC,gBAAgB,CAACF,MAAM,CAAC,EAAE,OAAOA,MAAM;;EAE7C,IAAIT,SAAS,IAAI,EAAE,EAAE;IACnB,MAAMS,MAAM,GAAGC,OAAO,CAAC,gCAAgC,CAAC;IACxD,IAAIC,gBAAgB,CAACF,MAAM,CAAC,EAAE,OAAOA,MAAM;;EAE7C,IAAIT,SAAS,IAAI,EAAE,EAAE;IACnB,MAAMS,MAAM,GAAGC,OAAO,CAAC,gCAAgC,CAAC;IACxD,IAAIC,gBAAgB,CAACF,MAAM,CAAC,EAAE,OAAOA,MAAM;;EAE7C,OAAOC,OAAO,CAAC,gCAAgC,CAAC;EAEhD;EACA,SAASC,gBAAgB,CAACF,MAKzB;IACC,OACE,OAAQF,EAAE,CAACK,YAAoB,CAC7BH,MAAM,CAACI,eAAe,CAACC,MAAM,CAACC,WAAW,EAAE,CAC5C,KAAK,QAAQ,IACdP,UAAU,CAACQ,IAAI,IACfP,MAAM,CAACI,eAAe,CAACI,GAAG,CAACC,KAAK,CAAED,GAAG,IAAKT,UAAU,CAACQ,IAAK,CAACG,QAAQ,CAACF,GAAG,CAAC,CAAC;EAE7E;AACF;AA/BAG","names":["nodeMajor","parseInt","process","versions","node","split","getDefaultTsconfigJsonForNodeVersion","ts","tsInternal","config","require","configCompatible","ScriptTarget","compilerOptions","target","toUpperCase","libs","lib","every","includes","exports"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ts-node/src/tsconfigs.ts"],"sourcesContent":["import type { TSCommon, TSInternal } from './ts-compiler-types';\n\nconst nodeMajor = parseInt(process.versions.node.split('.')[0], 10);\n/**\n * return parsed JSON of the bundled @tsconfig/bases config appropriate for the\n * running version of nodejs\n * @internal\n */\nexport function getDefaultTsconfigJsonForNodeVersion(ts: TSCommon): any {\n  const tsInternal = ts as any as TSInternal;\n  if (nodeMajor >= 16) {\n    const config = require('@tsconfig/node16/tsconfig.json');\n    if (configCompatible(config)) return config;\n  }\n  if (nodeMajor >= 14) {\n    const config = require('@tsconfig/node14/tsconfig.json');\n    if (configCompatible(config)) return config;\n  }\n  if (nodeMajor >= 12) {\n    const config = require('@tsconfig/node12/tsconfig.json');\n    if (configCompatible(config)) return config;\n  }\n  return require('@tsconfig/node10/tsconfig.json');\n\n  // Verify that tsconfig target and lib options are compatible with TypeScript compiler\n  function configCompatible(config: {\n    compilerOptions: {\n      lib: string[];\n      target: string;\n    };\n  }) {\n    return (\n      typeof (ts.ScriptTarget as any)[\n        config.compilerOptions.target.toUpperCase()\n      ] === 'number' &&\n      tsInternal.libs &&\n      config.compilerOptions.lib.every((lib) => tsInternal.libs!.includes(lib))\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}