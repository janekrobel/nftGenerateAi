{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { getCurrentHub } from '@sentry/core';\nimport { fill, logger, parseSemver } from '@sentry/utils';\nimport { cleanSpanDescription, extractUrl, isSentryRequest, normalizeRequestArgs } from './utils/http';\nvar NODE_VERSION = parseSemver(process.versions.node);\n/** http module integration */\nvar Http = /** @class */function () {\n  /**\n   * @inheritDoc\n   */\n  function Http(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    /**\n     * @inheritDoc\n     */\n    this.name = Http.id;\n    this._breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n    this._tracing = typeof options.tracing === 'undefined' ? false : options.tracing;\n  }\n  /**\n   * @inheritDoc\n   */\n  Http.prototype.setupOnce = function () {\n    // No need to instrument if we don't want to track anything\n    if (!this._breadcrumbs && !this._tracing) {\n      return;\n    }\n    var wrappedHandlerMaker = _createWrappedRequestMethodFactory(this._breadcrumbs, this._tracing);\n    var httpModule = require('http');\n    fill(httpModule, 'get', wrappedHandlerMaker);\n    fill(httpModule, 'request', wrappedHandlerMaker);\n    // NOTE: Prior to Node 9, `https` used internals of `http` module, thus we don't patch it.\n    // If we do, we'd get double breadcrumbs and double spans for `https` calls.\n    // It has been changed in Node 9, so for all versions equal and above, we patch `https` separately.\n    if (NODE_VERSION.major && NODE_VERSION.major > 8) {\n      var httpsModule = require('https');\n      fill(httpsModule, 'get', wrappedHandlerMaker);\n      fill(httpsModule, 'request', wrappedHandlerMaker);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  Http.id = 'Http';\n  return Http;\n}();\nexport { Http };\n/**\n * Function which creates a function which creates wrapped versions of internal `request` and `get` calls within `http`\n * and `https` modules. (NB: Not a typo - this is a creator^2!)\n *\n * @param breadcrumbsEnabled Whether or not to record outgoing requests as breadcrumbs\n * @param tracingEnabled Whether or not to record outgoing requests as tracing spans\n *\n * @returns A function which accepts the exiting handler and returns a wrapped handler\n */\nfunction _createWrappedRequestMethodFactory(breadcrumbsEnabled, tracingEnabled) {\n  return function wrappedRequestMethodFactory(originalRequestMethod) {\n    return function wrappedMethod() {\n      var args = [];\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      var httpModule = this;\n      var requestArgs = normalizeRequestArgs(args);\n      var requestOptions = requestArgs[0];\n      var requestUrl = extractUrl(requestOptions);\n      // we don't want to record requests to Sentry as either breadcrumbs or spans, so just use the original method\n      if (isSentryRequest(requestUrl)) {\n        return originalRequestMethod.apply(httpModule, requestArgs);\n      }\n      var span;\n      var parentSpan;\n      var scope = getCurrentHub().getScope();\n      if (scope && tracingEnabled) {\n        parentSpan = scope.getSpan();\n        if (parentSpan) {\n          span = parentSpan.startChild({\n            description: (requestOptions.method || 'GET') + \" \" + requestUrl,\n            op: 'request'\n          });\n          var sentryTraceHeader = span.toTraceparent();\n          logger.log(\"[Tracing] Adding sentry-trace header to outgoing request: \" + sentryTraceHeader);\n          requestOptions.headers = __assign(__assign({}, requestOptions.headers), {\n            'sentry-trace': sentryTraceHeader\n          });\n        }\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalRequestMethod.apply(httpModule, requestArgs).once('response', function (res) {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var req = this;\n        if (breadcrumbsEnabled) {\n          addRequestBreadcrumb('response', requestUrl, req, res);\n        }\n        if (tracingEnabled && span) {\n          if (res.statusCode) {\n            span.setHttpStatus(res.statusCode);\n          }\n          span.description = cleanSpanDescription(span.description, requestOptions, req);\n          span.finish();\n        }\n      }).once('error', function () {\n        // eslint-disable-next-line @typescript-eslint/no-this-alias\n        var req = this;\n        if (breadcrumbsEnabled) {\n          addRequestBreadcrumb('error', requestUrl, req);\n        }\n        if (tracingEnabled && span) {\n          span.setHttpStatus(500);\n          span.description = cleanSpanDescription(span.description, requestOptions, req);\n          span.finish();\n        }\n      });\n    };\n  };\n}\n/**\n * Captures Breadcrumb based on provided request/response pair\n */\nfunction addRequestBreadcrumb(event, url, req, res) {\n  if (!getCurrentHub().getIntegration(Http)) {\n    return;\n  }\n  getCurrentHub().addBreadcrumb({\n    category: 'http',\n    data: {\n      method: req.method,\n      status_code: res && res.statusCode,\n      url: url\n    },\n    type: 'http'\n  }, {\n    event: event,\n    request: req,\n    response: res\n  });\n}","map":{"version":3,"mappings":"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","names":["getCurrentHub","fill","logger","parseSemver","cleanSpanDescription","extractUrl","isSentryRequest","normalizeRequestArgs","NODE_VERSION","process","versions","node","options","Http","id","_breadcrumbs","breadcrumbs","_tracing","tracing","wrappedHandlerMaker","_createWrappedRequestMethodFactory","httpModule","require","major","httpsModule","breadcrumbsEnabled","tracingEnabled","wrappedRequestMethodFactory","originalRequestMethod","wrappedMethod","_i","args","requestArgs","requestOptions","requestUrl","apply","span","parentSpan","scope","getScope","getSpan","startChild","description","method","op","sentryTraceHeader","toTraceparent","log","headers","once","res","req","addRequestBreadcrumb","statusCode","setHttpStatus","finish","event","url","getIntegration","addBreadcrumb","category","data","status_code","type","request","response"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@sentry/node/src/integrations/http.ts"],"sourcesContent":["import { getCurrentHub } from '@sentry/core';\nimport { Integration, Span } from '@sentry/types';\nimport { fill, logger, parseSemver } from '@sentry/utils';\nimport * as http from 'http';\nimport * as https from 'https';\n\nimport {\n  cleanSpanDescription,\n  extractUrl,\n  isSentryRequest,\n  normalizeRequestArgs,\n  RequestMethod,\n  RequestMethodArgs,\n} from './utils/http';\n\nconst NODE_VERSION = parseSemver(process.versions.node);\n\n/** http module integration */\nexport class Http implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Http';\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = Http.id;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _breadcrumbs: boolean;\n\n  /**\n   * @inheritDoc\n   */\n  private readonly _tracing: boolean;\n\n  /**\n   * @inheritDoc\n   */\n  public constructor(options: { breadcrumbs?: boolean; tracing?: boolean } = {}) {\n    this._breadcrumbs = typeof options.breadcrumbs === 'undefined' ? true : options.breadcrumbs;\n    this._tracing = typeof options.tracing === 'undefined' ? false : options.tracing;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(): void {\n    // No need to instrument if we don't want to track anything\n    if (!this._breadcrumbs && !this._tracing) {\n      return;\n    }\n\n    const wrappedHandlerMaker = _createWrappedRequestMethodFactory(this._breadcrumbs, this._tracing);\n\n    const httpModule = require('http');\n    fill(httpModule, 'get', wrappedHandlerMaker);\n    fill(httpModule, 'request', wrappedHandlerMaker);\n\n    // NOTE: Prior to Node 9, `https` used internals of `http` module, thus we don't patch it.\n    // If we do, we'd get double breadcrumbs and double spans for `https` calls.\n    // It has been changed in Node 9, so for all versions equal and above, we patch `https` separately.\n    if (NODE_VERSION.major && NODE_VERSION.major > 8) {\n      const httpsModule = require('https');\n      fill(httpsModule, 'get', wrappedHandlerMaker);\n      fill(httpsModule, 'request', wrappedHandlerMaker);\n    }\n  }\n}\n\n// for ease of reading below\ntype OriginalRequestMethod = RequestMethod;\ntype WrappedRequestMethod = RequestMethod;\ntype WrappedRequestMethodFactory = (original: OriginalRequestMethod) => WrappedRequestMethod;\n\n/**\n * Function which creates a function which creates wrapped versions of internal `request` and `get` calls within `http`\n * and `https` modules. (NB: Not a typo - this is a creator^2!)\n *\n * @param breadcrumbsEnabled Whether or not to record outgoing requests as breadcrumbs\n * @param tracingEnabled Whether or not to record outgoing requests as tracing spans\n *\n * @returns A function which accepts the exiting handler and returns a wrapped handler\n */\nfunction _createWrappedRequestMethodFactory(\n  breadcrumbsEnabled: boolean,\n  tracingEnabled: boolean,\n): WrappedRequestMethodFactory {\n  return function wrappedRequestMethodFactory(originalRequestMethod: OriginalRequestMethod): WrappedRequestMethod {\n    return function wrappedMethod(this: typeof http | typeof https, ...args: RequestMethodArgs): http.ClientRequest {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const httpModule = this;\n\n      const requestArgs = normalizeRequestArgs(args);\n      const requestOptions = requestArgs[0];\n      const requestUrl = extractUrl(requestOptions);\n\n      // we don't want to record requests to Sentry as either breadcrumbs or spans, so just use the original method\n      if (isSentryRequest(requestUrl)) {\n        return originalRequestMethod.apply(httpModule, requestArgs);\n      }\n\n      let span: Span | undefined;\n      let parentSpan: Span | undefined;\n\n      const scope = getCurrentHub().getScope();\n      if (scope && tracingEnabled) {\n        parentSpan = scope.getSpan();\n        if (parentSpan) {\n          span = parentSpan.startChild({\n            description: `${requestOptions.method || 'GET'} ${requestUrl}`,\n            op: 'request',\n          });\n\n          const sentryTraceHeader = span.toTraceparent();\n          logger.log(`[Tracing] Adding sentry-trace header to outgoing request: ${sentryTraceHeader}`);\n          requestOptions.headers = { ...requestOptions.headers, 'sentry-trace': sentryTraceHeader };\n        }\n      }\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      return originalRequestMethod\n        .apply(httpModule, requestArgs)\n        .once('response', function(this: http.ClientRequest, res: http.IncomingMessage): void {\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const req = this;\n          if (breadcrumbsEnabled) {\n            addRequestBreadcrumb('response', requestUrl, req, res);\n          }\n          if (tracingEnabled && span) {\n            if (res.statusCode) {\n              span.setHttpStatus(res.statusCode);\n            }\n            span.description = cleanSpanDescription(span.description, requestOptions, req);\n            span.finish();\n          }\n        })\n        .once('error', function(this: http.ClientRequest): void {\n          // eslint-disable-next-line @typescript-eslint/no-this-alias\n          const req = this;\n\n          if (breadcrumbsEnabled) {\n            addRequestBreadcrumb('error', requestUrl, req);\n          }\n          if (tracingEnabled && span) {\n            span.setHttpStatus(500);\n            span.description = cleanSpanDescription(span.description, requestOptions, req);\n            span.finish();\n          }\n        });\n    };\n  };\n}\n\n/**\n * Captures Breadcrumb based on provided request/response pair\n */\nfunction addRequestBreadcrumb(event: string, url: string, req: http.ClientRequest, res?: http.IncomingMessage): void {\n  if (!getCurrentHub().getIntegration(Http)) {\n    return;\n  }\n\n  getCurrentHub().addBreadcrumb(\n    {\n      category: 'http',\n      data: {\n        method: req.method,\n        status_code: res && res.statusCode,\n        url,\n      },\n      type: 'http',\n    },\n    {\n      event,\n      request: req,\n      response: res,\n    },\n  );\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}