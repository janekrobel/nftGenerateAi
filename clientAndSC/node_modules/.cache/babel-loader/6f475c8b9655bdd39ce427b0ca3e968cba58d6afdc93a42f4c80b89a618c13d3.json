{"ast":null,"code":"// https://github.com/Ethan-Arrowood/undici-fetch\n\n'use strict';\n\nconst {\n  kHeadersList\n} = require('../core/symbols');\nconst {\n  kGuard,\n  kHeadersCaseInsensitive\n} = require('./symbols');\nconst {\n  kEnumerableProperty\n} = require('../core/util');\nconst {\n  makeIterator,\n  isValidHeaderName,\n  isValidHeaderValue\n} = require('./util');\nconst {\n  webidl\n} = require('./webidl');\nconst assert = require('assert');\nconst kHeadersMap = Symbol('headers map');\nconst kHeadersSortedMap = Symbol('headers map sorted');\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize\n * @param {string} potentialValue\n */\nfunction headerValueNormalize(potentialValue) {\n  //  To normalize a byte sequence potentialValue, remove\n  //  any leading and trailing HTTP whitespace bytes from\n  //  potentialValue.\n\n  // Trimming the end with `.replace()` and a RegExp is typically subject to\n  // ReDoS. This is safer and faster.\n  let i = potentialValue.length;\n  while (/[\\r\\n\\t ]/.test(potentialValue.charAt(--i)));\n  return potentialValue.slice(0, i + 1).replace(/^[\\r\\n\\t ]+/, '');\n}\nfunction fill(headers, object) {\n  // To fill a Headers object headers with a given object object, run these steps:\n\n  // 1. If object is a sequence, then for each header in object:\n  // Note: webidl conversion to array has already been done.\n  if (Array.isArray(object)) {\n    for (const header of object) {\n      // 1. If header does not contain exactly two items, then throw a TypeError.\n      if (header.length !== 2) {\n        throw webidl.errors.exception({\n          header: 'Headers constructor',\n          message: `expected name/value pair to be length 2, found ${header.length}.`\n        });\n      }\n\n      // 2. Append (header’s first item, header’s second item) to headers.\n      headers.append(header[0], header[1]);\n    }\n  } else if (typeof object === 'object' && object !== null) {\n    // Note: null should throw\n\n    // 2. Otherwise, object is a record, then for each key → value in object,\n    //    append (key, value) to headers\n    for (const [key, value] of Object.entries(object)) {\n      headers.append(key, value);\n    }\n  } else {\n    throw webidl.errors.conversionFailed({\n      prefix: 'Headers constructor',\n      argument: 'Argument 1',\n      types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n    });\n  }\n}\nclass HeadersList {\n  /** @type {[string, string][]|null} */\n  cookies = null;\n  constructor(init) {\n    if (init instanceof HeadersList) {\n      this[kHeadersMap] = new Map(init[kHeadersMap]);\n      this[kHeadersSortedMap] = init[kHeadersSortedMap];\n      this.cookies = init.cookies;\n    } else {\n      this[kHeadersMap] = new Map(init);\n      this[kHeadersSortedMap] = null;\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#header-list-contains\n  contains(name) {\n    // A header list list contains a header name name if list\n    // contains a header whose name is a byte-case-insensitive\n    // match for name.\n    name = name.toLowerCase();\n    return this[kHeadersMap].has(name);\n  }\n  clear() {\n    this[kHeadersMap].clear();\n    this[kHeadersSortedMap] = null;\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-append\n  append(name, value) {\n    this[kHeadersSortedMap] = null;\n\n    // 1. If list contains name, then set name to the first such\n    //    header’s name.\n    const lowercaseName = name.toLowerCase();\n    const exists = this[kHeadersMap].get(lowercaseName);\n\n    // 2. Append (name, value) to list.\n    if (exists) {\n      const delimiter = lowercaseName === 'cookie' ? '; ' : ', ';\n      this[kHeadersMap].set(lowercaseName, {\n        name: exists.name,\n        value: `${exists.value}${delimiter}${value}`\n      });\n    } else {\n      this[kHeadersMap].set(lowercaseName, {\n        name,\n        value\n      });\n    }\n    if (lowercaseName === 'set-cookie') {\n      this.cookies ??= [];\n      this.cookies.push(value);\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-set\n  set(name, value) {\n    this[kHeadersSortedMap] = null;\n    const lowercaseName = name.toLowerCase();\n    if (lowercaseName === 'set-cookie') {\n      this.cookies = [value];\n    }\n\n    // 1. If list contains name, then set the value of\n    //    the first such header to value and remove the\n    //    others.\n    // 2. Otherwise, append header (name, value) to list.\n    return this[kHeadersMap].set(lowercaseName, {\n      name,\n      value\n    });\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-delete\n  delete(name) {\n    this[kHeadersSortedMap] = null;\n    name = name.toLowerCase();\n    if (name === 'set-cookie') {\n      this.cookies = null;\n    }\n    return this[kHeadersMap].delete(name);\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-get\n  get(name) {\n    // 1. If list does not contain name, then return null.\n    if (!this.contains(name)) {\n      return null;\n    }\n\n    // 2. Return the values of all headers in list whose name\n    //    is a byte-case-insensitive match for name,\n    //    separated from each other by 0x2C 0x20, in order.\n    return this[kHeadersMap].get(name.toLowerCase())?.value ?? null;\n  }\n  *[Symbol.iterator]() {\n    // use the lowercased name\n    for (const [name, {\n      value\n    }] of this[kHeadersMap]) {\n      yield [name, value];\n    }\n  }\n  get [kHeadersCaseInsensitive]() {\n    /** @type {string[]} */\n    const flatList = [];\n    for (const {\n      name,\n      value\n    } of this[kHeadersMap].values()) {\n      flatList.push(name, value);\n    }\n    return flatList;\n  }\n}\n\n// https://fetch.spec.whatwg.org/#headers-class\nclass Headers {\n  constructor() {\n    let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\n    this[kHeadersList] = new HeadersList();\n\n    // The new Headers(init) constructor steps are:\n\n    // 1. Set this’s guard to \"none\".\n    this[kGuard] = 'none';\n\n    // 2. If init is given, then fill this with init.\n    if (init !== undefined) {\n      init = webidl.converters.HeadersInit(init);\n      fill(this, init);\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-append\n  append(name, value) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 2, {\n      header: 'Headers.append'\n    });\n    name = webidl.converters.ByteString(name);\n    value = webidl.converters.ByteString(value);\n\n    // 1. Normalize value.\n    value = headerValueNormalize(value);\n\n    // 2. If name is not a header name or value is not a\n    //    header value, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.append',\n        value: name,\n        type: 'header name'\n      });\n    } else if (!isValidHeaderValue(value)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.append',\n        value,\n        type: 'header value'\n      });\n    }\n\n    // 3. If headers’s guard is \"immutable\", then throw a TypeError.\n    // 4. Otherwise, if headers’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable');\n    } else if (this[kGuard] === 'request-no-cors') {\n      // 5. Otherwise, if headers’s guard is \"request-no-cors\":\n      // TODO\n    }\n\n    // 6. Otherwise, if headers’s guard is \"response\" and name is a\n    //    forbidden response-header name, return.\n\n    // 7. Append (name, value) to headers’s header list.\n    // 8. If headers’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from headers\n    return this[kHeadersList].append(name, value);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-delete\n  delete(name) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 1, {\n      header: 'Headers.delete'\n    });\n    name = webidl.converters.ByteString(name);\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.delete',\n        value: name,\n        type: 'header name'\n      });\n    }\n\n    // 2. If this’s guard is \"immutable\", then throw a TypeError.\n    // 3. Otherwise, if this’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 4. Otherwise, if this’s guard is \"request-no-cors\", name\n    //    is not a no-CORS-safelisted request-header name, and\n    //    name is not a privileged no-CORS request-header name,\n    //    return.\n    // 5. Otherwise, if this’s guard is \"response\" and name is\n    //    a forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable');\n    } else if (this[kGuard] === 'request-no-cors') {\n      // TODO\n    }\n\n    // 6. If this’s header list does not contain name, then\n    //    return.\n    if (!this[kHeadersList].contains(name)) {\n      return;\n    }\n\n    // 7. Delete name from this’s header list.\n    // 8. If this’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this.\n    return this[kHeadersList].delete(name);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-get\n  get(name) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 1, {\n      header: 'Headers.get'\n    });\n    name = webidl.converters.ByteString(name);\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.get',\n        value: name,\n        type: 'header name'\n      });\n    }\n\n    // 2. Return the result of getting name from this’s header\n    //    list.\n    return this[kHeadersList].get(name);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-has\n  has(name) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 1, {\n      header: 'Headers.has'\n    });\n    name = webidl.converters.ByteString(name);\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.has',\n        value: name,\n        type: 'header name'\n      });\n    }\n\n    // 2. Return true if this’s header list contains name;\n    //    otherwise false.\n    return this[kHeadersList].contains(name);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-set\n  set(name, value) {\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 2, {\n      header: 'Headers.set'\n    });\n    name = webidl.converters.ByteString(name);\n    value = webidl.converters.ByteString(value);\n\n    // 1. Normalize value.\n    value = headerValueNormalize(value);\n\n    // 2. If name is not a header name or value is not a\n    //    header value, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.set',\n        value: name,\n        type: 'header name'\n      });\n    } else if (!isValidHeaderValue(value)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.set',\n        value,\n        type: 'header value'\n      });\n    }\n\n    // 3. If this’s guard is \"immutable\", then throw a TypeError.\n    // 4. Otherwise, if this’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 5. Otherwise, if this’s guard is \"request-no-cors\" and\n    //    name/value is not a no-CORS-safelisted request-header,\n    //    return.\n    // 6. Otherwise, if this’s guard is \"response\" and name is a\n    //    forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable');\n    } else if (this[kGuard] === 'request-no-cors') {\n      // TODO\n    }\n\n    // 7. Set (name, value) in this’s header list.\n    // 8. If this’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this\n    return this[kHeadersList].set(name, value);\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie\n  getSetCookie() {\n    webidl.brandCheck(this, Headers);\n\n    // 1. If this’s header list does not contain `Set-Cookie`, then return « ».\n    // 2. Return the values of all headers in this’s header list whose name is\n    //    a byte-case-insensitive match for `Set-Cookie`, in order.\n\n    const list = this[kHeadersList].cookies;\n    if (list) {\n      return [...list];\n    }\n    return [];\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n  get [kHeadersSortedMap]() {\n    if (this[kHeadersList][kHeadersSortedMap]) {\n      return this[kHeadersList][kHeadersSortedMap];\n    }\n\n    // 1. Let headers be an empty list of headers with the key being the name\n    //    and value the value.\n    const headers = [];\n\n    // 2. Let names be the result of convert header names to a sorted-lowercase\n    //    set with all the names of the headers in list.\n    const names = [...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1);\n    const cookies = this[kHeadersList].cookies;\n\n    // 3. For each name of names:\n    for (const [name, value] of names) {\n      // 1. If name is `set-cookie`, then:\n      if (name === 'set-cookie') {\n        // 1. Let values be a list of all values of headers in list whose name\n        //    is a byte-case-insensitive match for name, in order.\n\n        // 2. For each value of values:\n        // 1. Append (name, value) to headers.\n        for (const value of cookies) {\n          headers.push([name, value]);\n        }\n      } else {\n        // 2. Otherwise:\n\n        // 1. Let value be the result of getting name from list.\n\n        // 2. Assert: value is non-null.\n        assert(value !== null);\n\n        // 3. Append (name, value) to headers.\n        headers.push([name, value]);\n      }\n    }\n    this[kHeadersList][kHeadersSortedMap] = headers;\n\n    // 4. Return headers.\n    return headers;\n  }\n  keys() {\n    webidl.brandCheck(this, Headers);\n    return makeIterator(() => [...this[kHeadersSortedMap].values()], 'Headers', 'key');\n  }\n  values() {\n    webidl.brandCheck(this, Headers);\n    return makeIterator(() => [...this[kHeadersSortedMap].values()], 'Headers', 'value');\n  }\n  entries() {\n    webidl.brandCheck(this, Headers);\n    return makeIterator(() => [...this[kHeadersSortedMap].values()], 'Headers', 'key+value');\n  }\n\n  /**\n   * @param {(value: string, key: string, self: Headers) => void} callbackFn\n   * @param {unknown} thisArg\n   */\n  forEach(callbackFn) {\n    let thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : globalThis;\n    webidl.brandCheck(this, Headers);\n    webidl.argumentLengthCheck(arguments, 1, {\n      header: 'Headers.forEach'\n    });\n    if (typeof callbackFn !== 'function') {\n      throw new TypeError(\"Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.\");\n    }\n    for (const [key, value] of this) {\n      callbackFn.apply(thisArg, [value, key, this]);\n    }\n  }\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    webidl.brandCheck(this, Headers);\n    return this[kHeadersList];\n  }\n}\nHeaders.prototype[Symbol.iterator] = Headers.prototype.entries;\nObject.defineProperties(Headers.prototype, {\n  append: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  get: kEnumerableProperty,\n  has: kEnumerableProperty,\n  set: kEnumerableProperty,\n  keys: kEnumerableProperty,\n  values: kEnumerableProperty,\n  entries: kEnumerableProperty,\n  forEach: kEnumerableProperty,\n  [Symbol.iterator]: {\n    enumerable: false\n  },\n  [Symbol.toStringTag]: {\n    value: 'Headers',\n    configurable: true\n  }\n});\nwebidl.converters.HeadersInit = function (V) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (V[Symbol.iterator]) {\n      return webidl.converters['sequence<sequence<ByteString>>'](V);\n    }\n    return webidl.converters['record<ByteString, ByteString>'](V);\n  }\n  throw webidl.errors.conversionFailed({\n    prefix: 'Headers constructor',\n    argument: 'Argument 1',\n    types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n  });\n};\nmodule.exports = {\n  fill,\n  Headers,\n  HeadersList\n};","map":{"version":3,"names":["kHeadersList","require","kGuard","kHeadersCaseInsensitive","kEnumerableProperty","makeIterator","isValidHeaderName","isValidHeaderValue","webidl","assert","kHeadersMap","Symbol","kHeadersSortedMap","headerValueNormalize","potentialValue","i","length","test","charAt","slice","replace","fill","headers","object","Array","isArray","header","errors","exception","message","append","key","value","Object","entries","conversionFailed","prefix","argument","types","HeadersList","cookies","constructor","init","Map","contains","name","toLowerCase","has","clear","lowercaseName","exists","get","delimiter","set","push","delete","iterator","flatList","values","Headers","undefined","converters","HeadersInit","brandCheck","argumentLengthCheck","arguments","ByteString","invalidArgument","type","TypeError","getSetCookie","list","names","sort","a","b","keys","forEach","callbackFn","thisArg","globalThis","apply","for","prototype","defineProperties","enumerable","toStringTag","configurable","V","util","Type","module","exports"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/undici/lib/fetch/headers.js"],"sourcesContent":["// https://github.com/Ethan-Arrowood/undici-fetch\n\n'use strict'\n\nconst { kHeadersList } = require('../core/symbols')\nconst { kGuard, kHeadersCaseInsensitive } = require('./symbols')\nconst { kEnumerableProperty } = require('../core/util')\nconst {\n  makeIterator,\n  isValidHeaderName,\n  isValidHeaderValue\n} = require('./util')\nconst { webidl } = require('./webidl')\nconst assert = require('assert')\n\nconst kHeadersMap = Symbol('headers map')\nconst kHeadersSortedMap = Symbol('headers map sorted')\n\n/**\n * @see https://fetch.spec.whatwg.org/#concept-header-value-normalize\n * @param {string} potentialValue\n */\nfunction headerValueNormalize (potentialValue) {\n  //  To normalize a byte sequence potentialValue, remove\n  //  any leading and trailing HTTP whitespace bytes from\n  //  potentialValue.\n\n  // Trimming the end with `.replace()` and a RegExp is typically subject to\n  // ReDoS. This is safer and faster.\n  let i = potentialValue.length\n  while (/[\\r\\n\\t ]/.test(potentialValue.charAt(--i)));\n  return potentialValue.slice(0, i + 1).replace(/^[\\r\\n\\t ]+/, '')\n}\n\nfunction fill (headers, object) {\n  // To fill a Headers object headers with a given object object, run these steps:\n\n  // 1. If object is a sequence, then for each header in object:\n  // Note: webidl conversion to array has already been done.\n  if (Array.isArray(object)) {\n    for (const header of object) {\n      // 1. If header does not contain exactly two items, then throw a TypeError.\n      if (header.length !== 2) {\n        throw webidl.errors.exception({\n          header: 'Headers constructor',\n          message: `expected name/value pair to be length 2, found ${header.length}.`\n        })\n      }\n\n      // 2. Append (header’s first item, header’s second item) to headers.\n      headers.append(header[0], header[1])\n    }\n  } else if (typeof object === 'object' && object !== null) {\n    // Note: null should throw\n\n    // 2. Otherwise, object is a record, then for each key → value in object,\n    //    append (key, value) to headers\n    for (const [key, value] of Object.entries(object)) {\n      headers.append(key, value)\n    }\n  } else {\n    throw webidl.errors.conversionFailed({\n      prefix: 'Headers constructor',\n      argument: 'Argument 1',\n      types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n    })\n  }\n}\n\nclass HeadersList {\n  /** @type {[string, string][]|null} */\n  cookies = null\n\n  constructor (init) {\n    if (init instanceof HeadersList) {\n      this[kHeadersMap] = new Map(init[kHeadersMap])\n      this[kHeadersSortedMap] = init[kHeadersSortedMap]\n      this.cookies = init.cookies\n    } else {\n      this[kHeadersMap] = new Map(init)\n      this[kHeadersSortedMap] = null\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#header-list-contains\n  contains (name) {\n    // A header list list contains a header name name if list\n    // contains a header whose name is a byte-case-insensitive\n    // match for name.\n    name = name.toLowerCase()\n\n    return this[kHeadersMap].has(name)\n  }\n\n  clear () {\n    this[kHeadersMap].clear()\n    this[kHeadersSortedMap] = null\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-append\n  append (name, value) {\n    this[kHeadersSortedMap] = null\n\n    // 1. If list contains name, then set name to the first such\n    //    header’s name.\n    const lowercaseName = name.toLowerCase()\n    const exists = this[kHeadersMap].get(lowercaseName)\n\n    // 2. Append (name, value) to list.\n    if (exists) {\n      const delimiter = lowercaseName === 'cookie' ? '; ' : ', '\n      this[kHeadersMap].set(lowercaseName, {\n        name: exists.name,\n        value: `${exists.value}${delimiter}${value}`\n      })\n    } else {\n      this[kHeadersMap].set(lowercaseName, { name, value })\n    }\n\n    if (lowercaseName === 'set-cookie') {\n      this.cookies ??= []\n      this.cookies.push(value)\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-set\n  set (name, value) {\n    this[kHeadersSortedMap] = null\n    const lowercaseName = name.toLowerCase()\n\n    if (lowercaseName === 'set-cookie') {\n      this.cookies = [value]\n    }\n\n    // 1. If list contains name, then set the value of\n    //    the first such header to value and remove the\n    //    others.\n    // 2. Otherwise, append header (name, value) to list.\n    return this[kHeadersMap].set(lowercaseName, { name, value })\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-delete\n  delete (name) {\n    this[kHeadersSortedMap] = null\n\n    name = name.toLowerCase()\n\n    if (name === 'set-cookie') {\n      this.cookies = null\n    }\n\n    return this[kHeadersMap].delete(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-get\n  get (name) {\n    // 1. If list does not contain name, then return null.\n    if (!this.contains(name)) {\n      return null\n    }\n\n    // 2. Return the values of all headers in list whose name\n    //    is a byte-case-insensitive match for name,\n    //    separated from each other by 0x2C 0x20, in order.\n    return this[kHeadersMap].get(name.toLowerCase())?.value ?? null\n  }\n\n  * [Symbol.iterator] () {\n    // use the lowercased name\n    for (const [name, { value }] of this[kHeadersMap]) {\n      yield [name, value]\n    }\n  }\n\n  get [kHeadersCaseInsensitive] () {\n    /** @type {string[]} */\n    const flatList = []\n\n    for (const { name, value } of this[kHeadersMap].values()) {\n      flatList.push(name, value)\n    }\n\n    return flatList\n  }\n}\n\n// https://fetch.spec.whatwg.org/#headers-class\nclass Headers {\n  constructor (init = undefined) {\n    this[kHeadersList] = new HeadersList()\n\n    // The new Headers(init) constructor steps are:\n\n    // 1. Set this’s guard to \"none\".\n    this[kGuard] = 'none'\n\n    // 2. If init is given, then fill this with init.\n    if (init !== undefined) {\n      init = webidl.converters.HeadersInit(init)\n      fill(this, init)\n    }\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-append\n  append (name, value) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.append' })\n\n    name = webidl.converters.ByteString(name)\n    value = webidl.converters.ByteString(value)\n\n    // 1. Normalize value.\n    value = headerValueNormalize(value)\n\n    // 2. If name is not a header name or value is not a\n    //    header value, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.append',\n        value: name,\n        type: 'header name'\n      })\n    } else if (!isValidHeaderValue(value)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.append',\n        value,\n        type: 'header value'\n      })\n    }\n\n    // 3. If headers’s guard is \"immutable\", then throw a TypeError.\n    // 4. Otherwise, if headers’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable')\n    } else if (this[kGuard] === 'request-no-cors') {\n      // 5. Otherwise, if headers’s guard is \"request-no-cors\":\n      // TODO\n    }\n\n    // 6. Otherwise, if headers’s guard is \"response\" and name is a\n    //    forbidden response-header name, return.\n\n    // 7. Append (name, value) to headers’s header list.\n    // 8. If headers’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from headers\n    return this[kHeadersList].append(name, value)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-delete\n  delete (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.delete' })\n\n    name = webidl.converters.ByteString(name)\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.delete',\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. If this’s guard is \"immutable\", then throw a TypeError.\n    // 3. Otherwise, if this’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 4. Otherwise, if this’s guard is \"request-no-cors\", name\n    //    is not a no-CORS-safelisted request-header name, and\n    //    name is not a privileged no-CORS request-header name,\n    //    return.\n    // 5. Otherwise, if this’s guard is \"response\" and name is\n    //    a forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable')\n    } else if (this[kGuard] === 'request-no-cors') {\n      // TODO\n    }\n\n    // 6. If this’s header list does not contain name, then\n    //    return.\n    if (!this[kHeadersList].contains(name)) {\n      return\n    }\n\n    // 7. Delete name from this’s header list.\n    // 8. If this’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this.\n    return this[kHeadersList].delete(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-get\n  get (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.get' })\n\n    name = webidl.converters.ByteString(name)\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.get',\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. Return the result of getting name from this’s header\n    //    list.\n    return this[kHeadersList].get(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-has\n  has (name) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.has' })\n\n    name = webidl.converters.ByteString(name)\n\n    // 1. If name is not a header name, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.has',\n        value: name,\n        type: 'header name'\n      })\n    }\n\n    // 2. Return true if this’s header list contains name;\n    //    otherwise false.\n    return this[kHeadersList].contains(name)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-set\n  set (name, value) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 2, { header: 'Headers.set' })\n\n    name = webidl.converters.ByteString(name)\n    value = webidl.converters.ByteString(value)\n\n    // 1. Normalize value.\n    value = headerValueNormalize(value)\n\n    // 2. If name is not a header name or value is not a\n    //    header value, then throw a TypeError.\n    if (!isValidHeaderName(name)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.set',\n        value: name,\n        type: 'header name'\n      })\n    } else if (!isValidHeaderValue(value)) {\n      throw webidl.errors.invalidArgument({\n        prefix: 'Headers.set',\n        value,\n        type: 'header value'\n      })\n    }\n\n    // 3. If this’s guard is \"immutable\", then throw a TypeError.\n    // 4. Otherwise, if this’s guard is \"request\" and name is a\n    //    forbidden header name, return.\n    // 5. Otherwise, if this’s guard is \"request-no-cors\" and\n    //    name/value is not a no-CORS-safelisted request-header,\n    //    return.\n    // 6. Otherwise, if this’s guard is \"response\" and name is a\n    //    forbidden response-header name, return.\n    // Note: undici does not implement forbidden header names\n    if (this[kGuard] === 'immutable') {\n      throw new TypeError('immutable')\n    } else if (this[kGuard] === 'request-no-cors') {\n      // TODO\n    }\n\n    // 7. Set (name, value) in this’s header list.\n    // 8. If this’s guard is \"request-no-cors\", then remove\n    //    privileged no-CORS request headers from this\n    return this[kHeadersList].set(name, value)\n  }\n\n  // https://fetch.spec.whatwg.org/#dom-headers-getsetcookie\n  getSetCookie () {\n    webidl.brandCheck(this, Headers)\n\n    // 1. If this’s header list does not contain `Set-Cookie`, then return « ».\n    // 2. Return the values of all headers in this’s header list whose name is\n    //    a byte-case-insensitive match for `Set-Cookie`, in order.\n\n    const list = this[kHeadersList].cookies\n\n    if (list) {\n      return [...list]\n    }\n\n    return []\n  }\n\n  // https://fetch.spec.whatwg.org/#concept-header-list-sort-and-combine\n  get [kHeadersSortedMap] () {\n    if (this[kHeadersList][kHeadersSortedMap]) {\n      return this[kHeadersList][kHeadersSortedMap]\n    }\n\n    // 1. Let headers be an empty list of headers with the key being the name\n    //    and value the value.\n    const headers = []\n\n    // 2. Let names be the result of convert header names to a sorted-lowercase\n    //    set with all the names of the headers in list.\n    const names = [...this[kHeadersList]].sort((a, b) => a[0] < b[0] ? -1 : 1)\n    const cookies = this[kHeadersList].cookies\n\n    // 3. For each name of names:\n    for (const [name, value] of names) {\n      // 1. If name is `set-cookie`, then:\n      if (name === 'set-cookie') {\n        // 1. Let values be a list of all values of headers in list whose name\n        //    is a byte-case-insensitive match for name, in order.\n\n        // 2. For each value of values:\n        // 1. Append (name, value) to headers.\n        for (const value of cookies) {\n          headers.push([name, value])\n        }\n      } else {\n        // 2. Otherwise:\n\n        // 1. Let value be the result of getting name from list.\n\n        // 2. Assert: value is non-null.\n        assert(value !== null)\n\n        // 3. Append (name, value) to headers.\n        headers.push([name, value])\n      }\n    }\n\n    this[kHeadersList][kHeadersSortedMap] = headers\n\n    // 4. Return headers.\n    return headers\n  }\n\n  keys () {\n    webidl.brandCheck(this, Headers)\n\n    return makeIterator(\n      () => [...this[kHeadersSortedMap].values()],\n      'Headers',\n      'key'\n    )\n  }\n\n  values () {\n    webidl.brandCheck(this, Headers)\n\n    return makeIterator(\n      () => [...this[kHeadersSortedMap].values()],\n      'Headers',\n      'value'\n    )\n  }\n\n  entries () {\n    webidl.brandCheck(this, Headers)\n\n    return makeIterator(\n      () => [...this[kHeadersSortedMap].values()],\n      'Headers',\n      'key+value'\n    )\n  }\n\n  /**\n   * @param {(value: string, key: string, self: Headers) => void} callbackFn\n   * @param {unknown} thisArg\n   */\n  forEach (callbackFn, thisArg = globalThis) {\n    webidl.brandCheck(this, Headers)\n\n    webidl.argumentLengthCheck(arguments, 1, { header: 'Headers.forEach' })\n\n    if (typeof callbackFn !== 'function') {\n      throw new TypeError(\n        \"Failed to execute 'forEach' on 'Headers': parameter 1 is not of type 'Function'.\"\n      )\n    }\n\n    for (const [key, value] of this) {\n      callbackFn.apply(thisArg, [value, key, this])\n    }\n  }\n\n  [Symbol.for('nodejs.util.inspect.custom')] () {\n    webidl.brandCheck(this, Headers)\n\n    return this[kHeadersList]\n  }\n}\n\nHeaders.prototype[Symbol.iterator] = Headers.prototype.entries\n\nObject.defineProperties(Headers.prototype, {\n  append: kEnumerableProperty,\n  delete: kEnumerableProperty,\n  get: kEnumerableProperty,\n  has: kEnumerableProperty,\n  set: kEnumerableProperty,\n  keys: kEnumerableProperty,\n  values: kEnumerableProperty,\n  entries: kEnumerableProperty,\n  forEach: kEnumerableProperty,\n  [Symbol.iterator]: { enumerable: false },\n  [Symbol.toStringTag]: {\n    value: 'Headers',\n    configurable: true\n  }\n})\n\nwebidl.converters.HeadersInit = function (V) {\n  if (webidl.util.Type(V) === 'Object') {\n    if (V[Symbol.iterator]) {\n      return webidl.converters['sequence<sequence<ByteString>>'](V)\n    }\n\n    return webidl.converters['record<ByteString, ByteString>'](V)\n  }\n\n  throw webidl.errors.conversionFailed({\n    prefix: 'Headers constructor',\n    argument: 'Argument 1',\n    types: ['sequence<sequence<ByteString>>', 'record<ByteString, ByteString>']\n  })\n}\n\nmodule.exports = {\n  fill,\n  Headers,\n  HeadersList\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}