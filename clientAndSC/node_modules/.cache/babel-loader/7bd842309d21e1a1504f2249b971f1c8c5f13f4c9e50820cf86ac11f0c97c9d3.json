{"ast":null,"code":"import { SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, uuid4 } from '@sentry/utils';\n/**\n * @inheritdoc\n */\nvar Session = /** @class */function () {\n  function Session(context) {\n    this.errors = 0;\n    this.sid = uuid4();\n    this.timestamp = Date.now();\n    this.started = Date.now();\n    this.duration = 0;\n    this.status = SessionStatus.Ok;\n    if (context) {\n      this.update(context);\n    }\n  }\n  /** JSDoc */\n  // eslint-disable-next-line complexity\n  Session.prototype.update = function (context) {\n    if (context === void 0) {\n      context = {};\n    }\n    if (context.user) {\n      if (context.user.ip_address) {\n        this.ipAddress = context.user.ip_address;\n      }\n      if (!context.did) {\n        this.did = context.user.id || context.user.email || context.user.username;\n      }\n    }\n    this.timestamp = context.timestamp || Date.now();\n    if (context.sid) {\n      // Good enough uuid validation. — Kamil\n      this.sid = context.sid.length === 32 ? context.sid : uuid4();\n    }\n    if (context.did) {\n      this.did = \"\" + context.did;\n    }\n    if (typeof context.started === 'number') {\n      this.started = context.started;\n    }\n    if (typeof context.duration === 'number') {\n      this.duration = context.duration;\n    } else {\n      this.duration = this.timestamp - this.started;\n    }\n    if (context.release) {\n      this.release = context.release;\n    }\n    if (context.environment) {\n      this.environment = context.environment;\n    }\n    if (context.ipAddress) {\n      this.ipAddress = context.ipAddress;\n    }\n    if (context.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n    if (typeof context.errors === 'number') {\n      this.errors = context.errors;\n    }\n    if (context.status) {\n      this.status = context.status;\n    }\n  };\n  /** JSDoc */\n  Session.prototype.close = function (status) {\n    if (status) {\n      this.update({\n        status: status\n      });\n    } else if (this.status === SessionStatus.Ok) {\n      this.update({\n        status: SessionStatus.Exited\n      });\n    } else {\n      this.update();\n    }\n  };\n  /** JSDoc */\n  Session.prototype.toJSON = function () {\n    return dropUndefinedKeys({\n      sid: \"\" + this.sid,\n      init: true,\n      started: new Date(this.started).toISOString(),\n      timestamp: new Date(this.timestamp).toISOString(),\n      status: this.status,\n      errors: this.errors,\n      did: typeof this.did === 'number' || typeof this.did === 'string' ? \"\" + this.did : undefined,\n      duration: this.duration,\n      attrs: dropUndefinedKeys({\n        release: this.release,\n        environment: this.environment,\n        ip_address: this.ipAddress,\n        user_agent: this.userAgent\n      })\n    });\n  };\n  return Session;\n}();\nexport { Session };","map":{"version":3,"mappings":"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","names":["SessionStatus","dropUndefinedKeys","uuid4","context","Date","now","Ok","update","Session","user","ip_address","ipAddress","did","id","email","username","timestamp","sid","length","started","duration","release","environment","userAgent","errors","status","Exited","init","toISOString","undefined","attrs","user_agent"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@sentry/hub/src/session.ts"],"sourcesContent":["import { Session as SessionInterface, SessionContext, SessionStatus } from '@sentry/types';\nimport { dropUndefinedKeys, uuid4 } from '@sentry/utils';\n\n/**\n * @inheritdoc\n */\nexport class Session implements SessionInterface {\n  public userAgent?: string;\n  public errors: number = 0;\n  public release?: string;\n  public sid: string = uuid4();\n  public did?: string;\n  public timestamp: number = Date.now();\n  public started: number = Date.now();\n  public duration: number = 0;\n  public status: SessionStatus = SessionStatus.Ok;\n  public environment?: string;\n  public ipAddress?: string;\n\n  constructor(context?: Omit<SessionContext, 'started' | 'status'>) {\n    if (context) {\n      this.update(context);\n    }\n  }\n\n  /** JSDoc */\n  // eslint-disable-next-line complexity\n  update(context: SessionContext = {}): void {\n    if (context.user) {\n      if (context.user.ip_address) {\n        this.ipAddress = context.user.ip_address;\n      }\n\n      if (!context.did) {\n        this.did = context.user.id || context.user.email || context.user.username;\n      }\n    }\n\n    this.timestamp = context.timestamp || Date.now();\n\n    if (context.sid) {\n      // Good enough uuid validation. — Kamil\n      this.sid = context.sid.length === 32 ? context.sid : uuid4();\n    }\n    if (context.did) {\n      this.did = `${context.did}`;\n    }\n    if (typeof context.started === 'number') {\n      this.started = context.started;\n    }\n    if (typeof context.duration === 'number') {\n      this.duration = context.duration;\n    } else {\n      this.duration = this.timestamp - this.started;\n    }\n    if (context.release) {\n      this.release = context.release;\n    }\n    if (context.environment) {\n      this.environment = context.environment;\n    }\n    if (context.ipAddress) {\n      this.ipAddress = context.ipAddress;\n    }\n    if (context.userAgent) {\n      this.userAgent = context.userAgent;\n    }\n    if (typeof context.errors === 'number') {\n      this.errors = context.errors;\n    }\n    if (context.status) {\n      this.status = context.status;\n    }\n  }\n\n  /** JSDoc */\n  close(status?: Exclude<SessionStatus, SessionStatus.Ok>): void {\n    if (status) {\n      this.update({ status });\n    } else if (this.status === SessionStatus.Ok) {\n      this.update({ status: SessionStatus.Exited });\n    } else {\n      this.update();\n    }\n  }\n\n  /** JSDoc */\n  toJSON(): {\n    init: boolean;\n    sid: string;\n    did?: string;\n    timestamp: string;\n    started: string;\n    duration: number;\n    status: SessionStatus;\n    errors: number;\n    attrs?: {\n      release?: string;\n      environment?: string;\n      user_agent?: string;\n      ip_address?: string;\n    };\n  } {\n    return dropUndefinedKeys({\n      sid: `${this.sid}`,\n      init: true,\n      started: new Date(this.started).toISOString(),\n      timestamp: new Date(this.timestamp).toISOString(),\n      status: this.status,\n      errors: this.errors,\n      did: typeof this.did === 'number' || typeof this.did === 'string' ? `${this.did}` : undefined,\n      duration: this.duration,\n      attrs: dropUndefinedKeys({\n        release: this.release,\n        environment: this.environment,\n        ip_address: this.ipAddress,\n        user_agent: this.userAgent,\n      }),\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}