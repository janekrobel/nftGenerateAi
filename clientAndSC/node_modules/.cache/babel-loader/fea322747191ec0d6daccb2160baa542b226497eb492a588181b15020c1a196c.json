{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.bigIntToUnpaddedBuffer = exports.bigIntToHex = exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.short = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToInt = exports.bigIntToBuffer = exports.bufferToBigInt = exports.bufferToHex = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\nconst helpers_1 = require(\"./helpers\");\nconst internal_1 = require(\"./internal\");\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nconst intToHex = function (i) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(`Received an invalid integer type: ${i}`);\n  }\n  return `0x${i.toString(16)}`;\n};\nexports.intToHex = intToHex;\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nconst intToBuffer = function (i) {\n  const hex = (0, exports.intToHex)(i);\n  return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), 'hex');\n};\nexports.intToBuffer = intToBuffer;\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nconst zeros = function (bytes) {\n  return Buffer.allocUnsafe(bytes).fill(0);\n};\nexports.zeros = zeros;\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nconst setLength = function (msg, length, right) {\n  const buf = (0, exports.zeros)(length);\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf);\n      return buf;\n    }\n    return msg.slice(0, length);\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length);\n      return buf;\n    }\n    return msg.slice(-length);\n  }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nconst setLengthLeft = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, false);\n};\nexports.setLengthLeft = setLengthLeft;\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nconst setLengthRight = function (msg, length) {\n  (0, helpers_1.assertIsBuffer)(msg);\n  return setLength(msg, length, true);\n};\nexports.setLengthRight = setLengthRight;\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nconst stripZeros = function (a) {\n  let first = a[0];\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1);\n    first = a[0];\n  }\n  return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nconst unpadBuffer = function (a) {\n  (0, helpers_1.assertIsBuffer)(a);\n  return stripZeros(a);\n};\nexports.unpadBuffer = unpadBuffer;\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nconst unpadArray = function (a) {\n  (0, helpers_1.assertIsArray)(a);\n  return stripZeros(a);\n};\nexports.unpadArray = unpadArray;\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nconst unpadHexString = function (a) {\n  (0, helpers_1.assertIsHexString)(a);\n  a = (0, internal_1.stripHexPrefix)(a);\n  return '0x' + stripZeros(a);\n};\nexports.unpadHexString = unpadHexString;\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nconst toBuffer = function (v) {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0);\n  }\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v);\n  }\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v);\n  }\n  if (typeof v === 'string') {\n    if (!(0, internal_1.isHexString)(v)) {\n      throw new Error(`Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`);\n    }\n    return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), 'hex');\n  }\n  if (typeof v === 'number') {\n    return (0, exports.intToBuffer)(v);\n  }\n  if (typeof v === 'bigint') {\n    if (v < BigInt(0)) {\n      throw new Error(`Cannot convert negative bigint to buffer. Given: ${v}`);\n    }\n    let n = v.toString(16);\n    if (n.length % 2) n = '0' + n;\n    return Buffer.from(n, 'hex');\n  }\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray());\n  }\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer());\n  }\n  throw new Error('invalid type');\n};\nexports.toBuffer = toBuffer;\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nconst bufferToHex = function (buf) {\n  buf = (0, exports.toBuffer)(buf);\n  return '0x' + buf.toString('hex');\n};\nexports.bufferToHex = bufferToHex;\n/**\n * Converts a {@link Buffer} to a {@link bigint}\n */\nfunction bufferToBigInt(buf) {\n  const hex = (0, exports.bufferToHex)(buf);\n  if (hex === '0x') {\n    return BigInt(0);\n  }\n  return BigInt(hex);\n}\nexports.bufferToBigInt = bufferToBigInt;\n/**\n * Converts a {@link bigint} to a {@link Buffer}\n */\nfunction bigIntToBuffer(num) {\n  return (0, exports.toBuffer)('0x' + num.toString(16));\n}\nexports.bigIntToBuffer = bigIntToBuffer;\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nconst bufferToInt = function (buf) {\n  const res = Number(bufferToBigInt(buf));\n  if (!Number.isSafeInteger(res)) throw new Error('Number exceeds 53 bits');\n  return res;\n};\nexports.bufferToInt = bufferToInt;\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nconst fromSigned = function (num) {\n  return BigInt.asIntN(256, bufferToBigInt(num));\n};\nexports.fromSigned = fromSigned;\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nconst toUnsigned = function (num) {\n  return bigIntToBuffer(BigInt.asUintN(256, num));\n};\nexports.toUnsigned = toUnsigned;\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nconst addHexPrefix = function (str) {\n  if (typeof str !== 'string') {\n    return str;\n  }\n  return (0, internal_1.isHexPrefixed)(str) ? str : '0x' + str;\n};\nexports.addHexPrefix = addHexPrefix;\n/**\n * Shortens a string  or buffer's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n */\nfunction short(buffer) {\n  let maxLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 50;\n  const bufferStr = Buffer.isBuffer(buffer) ? buffer.toString('hex') : buffer;\n  if (bufferStr.length <= maxLength) {\n    return bufferStr;\n  }\n  return bufferStr.slice(0, maxLength) + '…';\n}\nexports.short = short;\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\nconst toUtf8 = function (hex) {\n  const zerosRegexp = /^(00)+|(00)+$/g;\n  hex = (0, internal_1.stripHexPrefix)(hex);\n  if (hex.length % 2 !== 0) {\n    throw new Error('Invalid non-even hex string input for toUtf8() provided');\n  }\n  const bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex');\n  return bufferVal.toString('utf8');\n};\nexports.toUtf8 = toUtf8;\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nconst baToJSON = function (ba) {\n  if (Buffer.isBuffer(ba)) {\n    return `0x${ba.toString('hex')}`;\n  } else if (ba instanceof Array) {\n    const array = [];\n    for (let i = 0; i < ba.length; i++) {\n      array.push((0, exports.baToJSON)(ba[i]));\n    }\n    return array;\n  }\n};\nexports.baToJSON = baToJSON;\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\nconst validateNoLeadingZeroes = function (values) {\n  for (const [k, v] of Object.entries(values)) {\n    if (v !== undefined && v.length > 0 && v[0] === 0) {\n      throw new Error(`${k} cannot have leading zeroes, received: ${v.toString('hex')}`);\n    }\n  }\n};\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\nfunction arrToBufArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Buffer.from(arr);\n  }\n  return arr.map(a => arrToBufArr(a));\n}\nexports.arrToBufArr = arrToBufArr;\nfunction bufArrToArr(arr) {\n  if (!Array.isArray(arr)) {\n    return Uint8Array.from(arr ?? []);\n  }\n  return arr.map(a => bufArrToArr(a));\n}\nexports.bufArrToArr = bufArrToArr;\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\nconst bigIntToHex = num => {\n  return '0x' + num.toString(16);\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert value from bigint to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\nfunction bigIntToUnpaddedBuffer(value) {\n  return (0, exports.unpadBuffer)(bigIntToBuffer(value));\n}\nexports.bigIntToUnpaddedBuffer = bigIntToUnpaddedBuffer;","map":{"version":3,"mappings":"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","names":["intToHex","i","Number","isSafeInteger","Error","toString","exports","intToBuffer","hex","Buffer","from","slice","zeros","bytes","allocUnsafe","fill","setLength","msg","length","right","buf","copy","setLengthLeft","setLengthRight","stripZeros","a","first","unpadBuffer","unpadArray","unpadHexString","toBuffer","v","undefined","isBuffer","Array","isArray","Uint8Array","BigInt","n","toArray","bufferToHex","bufferToBigInt","bigIntToBuffer","num","bufferToInt","res","fromSigned","asIntN","toUnsigned","asUintN","addHexPrefix","str","short","buffer","maxLength","bufferStr","toUtf8","zerosRegexp","bufferVal","replace","baToJSON","ba","array","push","validateNoLeadingZeroes","values","k","Object","entries","arrToBufArr","arr","map","bufArrToArr","bigIntToHex","bigIntToUnpaddedBuffer","value"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@nomicfoundation/ethereumjs-util/src/bytes.ts"],"sourcesContent":["import { assertIsArray, assertIsBuffer, assertIsHexString } from './helpers'\nimport { isHexPrefixed, isHexString, padToEven, stripHexPrefix } from './internal'\n\nimport type {\n  NestedBufferArray,\n  NestedUint8Array,\n  PrefixedHexString,\n  TransformableToArray,\n  TransformableToBuffer,\n} from './types'\n\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */\nexport const intToHex = function (i: number) {\n  if (!Number.isSafeInteger(i) || i < 0) {\n    throw new Error(`Received an invalid integer type: ${i}`)\n  }\n  return `0x${i.toString(16)}`\n}\n\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */\nexport const intToBuffer = function (i: number) {\n  const hex = intToHex(i)\n  return Buffer.from(padToEven(hex.slice(2)), 'hex')\n}\n\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */\nexport const zeros = function (bytes: number): Buffer {\n  return Buffer.allocUnsafe(bytes).fill(0)\n}\n\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */\nconst setLength = function (msg: Buffer, length: number, right: boolean) {\n  const buf = zeros(length)\n  if (right) {\n    if (msg.length < length) {\n      msg.copy(buf)\n      return buf\n    }\n    return msg.slice(0, length)\n  } else {\n    if (msg.length < length) {\n      msg.copy(buf, length - msg.length)\n      return buf\n    }\n    return msg.slice(-length)\n  }\n}\n\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexport const setLengthLeft = function (msg: Buffer, length: number) {\n  assertIsBuffer(msg)\n  return setLength(msg, length, false)\n}\n\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */\nexport const setLengthRight = function (msg: Buffer, length: number) {\n  assertIsBuffer(msg)\n  return setLength(msg, length, true)\n}\n\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */\nconst stripZeros = function (a: any): Buffer | number[] | string {\n  let first = a[0]\n  while (a.length > 0 && first.toString() === '0') {\n    a = a.slice(1)\n    first = a[0]\n  }\n  return a\n}\n\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */\nexport const unpadBuffer = function (a: Buffer): Buffer {\n  assertIsBuffer(a)\n  return stripZeros(a) as Buffer\n}\n\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */\nexport const unpadArray = function (a: number[]): number[] {\n  assertIsArray(a)\n  return stripZeros(a) as number[]\n}\n\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */\nexport const unpadHexString = function (a: string): string {\n  assertIsHexString(a)\n  a = stripHexPrefix(a)\n  return ('0x' + stripZeros(a)) as string\n}\n\nexport type ToBufferInputTypes =\n  | PrefixedHexString\n  | number\n  | bigint\n  | Buffer\n  | Uint8Array\n  | number[]\n  | TransformableToArray\n  | TransformableToBuffer\n  | null\n  | undefined\n\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */\nexport const toBuffer = function (v: ToBufferInputTypes): Buffer {\n  if (v === null || v === undefined) {\n    return Buffer.allocUnsafe(0)\n  }\n\n  if (Buffer.isBuffer(v)) {\n    return Buffer.from(v)\n  }\n\n  if (Array.isArray(v) || v instanceof Uint8Array) {\n    return Buffer.from(v as Uint8Array)\n  }\n\n  if (typeof v === 'string') {\n    if (!isHexString(v)) {\n      throw new Error(\n        `Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`\n      )\n    }\n    return Buffer.from(padToEven(stripHexPrefix(v)), 'hex')\n  }\n\n  if (typeof v === 'number') {\n    return intToBuffer(v)\n  }\n\n  if (typeof v === 'bigint') {\n    if (v < BigInt(0)) {\n      throw new Error(`Cannot convert negative bigint to buffer. Given: ${v}`)\n    }\n    let n = v.toString(16)\n    if (n.length % 2) n = '0' + n\n    return Buffer.from(n, 'hex')\n  }\n\n  if (v.toArray) {\n    // converts a BN to a Buffer\n    return Buffer.from(v.toArray())\n  }\n\n  if (v.toBuffer) {\n    return Buffer.from(v.toBuffer())\n  }\n\n  throw new Error('invalid type')\n}\n\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */\nexport const bufferToHex = function (buf: Buffer): string {\n  buf = toBuffer(buf)\n  return '0x' + buf.toString('hex')\n}\n\n/**\n * Converts a {@link Buffer} to a {@link bigint}\n */\nexport function bufferToBigInt(buf: Buffer) {\n  const hex = bufferToHex(buf)\n  if (hex === '0x') {\n    return BigInt(0)\n  }\n  return BigInt(hex)\n}\n\n/**\n * Converts a {@link bigint} to a {@link Buffer}\n */\nexport function bigIntToBuffer(num: bigint) {\n  return toBuffer('0x' + num.toString(16))\n}\n\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */\nexport const bufferToInt = function (buf: Buffer): number {\n  const res = Number(bufferToBigInt(buf))\n  if (!Number.isSafeInteger(res)) throw new Error('Number exceeds 53 bits')\n  return res\n}\n\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */\nexport const fromSigned = function (num: Buffer): bigint {\n  return BigInt.asIntN(256, bufferToBigInt(num))\n}\n\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */\nexport const toUnsigned = function (num: bigint): Buffer {\n  return bigIntToBuffer(BigInt.asUintN(256, num))\n}\n\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */\nexport const addHexPrefix = function (str: string): string {\n  if (typeof str !== 'string') {\n    return str\n  }\n\n  return isHexPrefixed(str) ? str : '0x' + str\n}\n\n/**\n * Shortens a string  or buffer's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n */\nexport function short(buffer: Buffer | string, maxLength: number = 50): string {\n  const bufferStr = Buffer.isBuffer(buffer) ? buffer.toString('hex') : buffer\n  if (bufferStr.length <= maxLength) {\n    return bufferStr\n  }\n  return bufferStr.slice(0, maxLength) + '…'\n}\n\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */\nexport const toUtf8 = function (hex: string): string {\n  const zerosRegexp = /^(00)+|(00)+$/g\n  hex = stripHexPrefix(hex)\n  if (hex.length % 2 !== 0) {\n    throw new Error('Invalid non-even hex string input for toUtf8() provided')\n  }\n  const bufferVal = Buffer.from(hex.replace(zerosRegexp, ''), 'hex')\n\n  return bufferVal.toString('utf8')\n}\n\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */\nexport const baToJSON = function (ba: any): any {\n  if (Buffer.isBuffer(ba)) {\n    return `0x${ba.toString('hex')}`\n  } else if (ba instanceof Array) {\n    const array = []\n    for (let i = 0; i < ba.length; i++) {\n      array.push(baToJSON(ba[i]))\n    }\n    return array\n  }\n}\n\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */\nexport const validateNoLeadingZeroes = function (values: { [key: string]: Buffer | undefined }) {\n  for (const [k, v] of Object.entries(values)) {\n    if (v !== undefined && v.length > 0 && v[0] === 0) {\n      throw new Error(`${k} cannot have leading zeroes, received: ${v.toString('hex')}`)\n    }\n  }\n}\n\n/**\n * Converts a {@link Uint8Array} or {@link NestedUint8Array} to {@link Buffer} or {@link NestedBufferArray}\n */\nexport function arrToBufArr(arr: Uint8Array): Buffer\nexport function arrToBufArr(arr: NestedUint8Array): NestedBufferArray\nexport function arrToBufArr(arr: Uint8Array | NestedUint8Array): Buffer | NestedBufferArray\nexport function arrToBufArr(arr: Uint8Array | NestedUint8Array): Buffer | NestedBufferArray {\n  if (!Array.isArray(arr)) {\n    return Buffer.from(arr)\n  }\n  return arr.map((a) => arrToBufArr(a))\n}\n\n/**\n * Converts a {@link Buffer} or {@link NestedBufferArray} to {@link Uint8Array} or {@link NestedUint8Array}\n */\nexport function bufArrToArr(arr: Buffer): Uint8Array\nexport function bufArrToArr(arr: NestedBufferArray): NestedUint8Array\nexport function bufArrToArr(arr: Buffer | NestedBufferArray): Uint8Array | NestedUint8Array\nexport function bufArrToArr(arr: Buffer | NestedBufferArray): Uint8Array | NestedUint8Array {\n  if (!Array.isArray(arr)) {\n    return Uint8Array.from(arr ?? [])\n  }\n  return arr.map((a) => bufArrToArr(a))\n}\n\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */\nexport const bigIntToHex = (num: bigint) => {\n  return '0x' + num.toString(16)\n}\n\n/**\n * Convert value from bigint to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */\nexport function bigIntToUnpaddedBuffer(value: bigint): Buffer {\n  return unpadBuffer(bigIntToBuffer(value))\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}