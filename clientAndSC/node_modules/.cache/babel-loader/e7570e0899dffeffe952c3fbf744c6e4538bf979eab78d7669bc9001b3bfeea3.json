{"ast":null,"code":"\"use strict\";\n\n// Cipher Feedback\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _CFB_instances, _CFB_iv, _CFB_shiftRegister, _CFB_shift;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CFB = void 0;\nconst mode_js_1 = require(\"./mode.js\");\nclass CFB extends mode_js_1.ModeOfOperation {\n  constructor(key, iv) {\n    let segmentSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 8;\n    super(\"CFB\", key, CFB);\n    _CFB_instances.add(this);\n    _CFB_iv.set(this, void 0);\n    _CFB_shiftRegister.set(this, void 0);\n    // This library currently only handles byte-aligned segmentSize\n    if (!Number.isInteger(segmentSize) || segmentSize % 8) {\n      throw new TypeError(\"invalid segmentSize\");\n    }\n    Object.defineProperties(this, {\n      segmentSize: {\n        enumerable: true,\n        value: segmentSize\n      }\n    });\n    if (iv) {\n      if (iv.length % 16) {\n        throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n      }\n      __classPrivateFieldSet(this, _CFB_iv, new Uint8Array(iv), \"f\");\n    } else {\n      __classPrivateFieldSet(this, _CFB_iv, new Uint8Array(16), \"f\");\n    }\n    __classPrivateFieldSet(this, _CFB_shiftRegister, this.iv, \"f\");\n  }\n  get iv() {\n    return new Uint8Array(__classPrivateFieldGet(this, _CFB_iv, \"f\"));\n  }\n  encrypt(plaintext) {\n    if (8 * plaintext.length % this.segmentSize) {\n      throw new TypeError(\"invalid plaintext size (must be multiple of segmentSize bytes)\");\n    }\n    const segmentSize = this.segmentSize / 8;\n    const ciphertext = new Uint8Array(plaintext);\n    for (let i = 0; i < ciphertext.length; i += segmentSize) {\n      const xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\"));\n      for (let j = 0; j < segmentSize; j++) {\n        ciphertext[i + j] ^= xorSegment[j];\n      }\n      __classPrivateFieldGet(this, _CFB_instances, \"m\", _CFB_shift).call(this, ciphertext.subarray(i));\n    }\n    return ciphertext;\n  }\n  decrypt(ciphertext) {\n    if (8 * ciphertext.length % this.segmentSize) {\n      throw new TypeError(\"invalid ciphertext size (must be multiple of segmentSize bytes)\");\n    }\n    const segmentSize = this.segmentSize / 8;\n    const plaintext = new Uint8Array(ciphertext);\n    for (let i = 0; i < plaintext.length; i += segmentSize) {\n      const xorSegment = this.aes.encrypt(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\"));\n      for (let j = 0; j < segmentSize; j++) {\n        plaintext[i + j] ^= xorSegment[j];\n      }\n      __classPrivateFieldGet(this, _CFB_instances, \"m\", _CFB_shift).call(this, ciphertext.subarray(i));\n    }\n    return plaintext;\n  }\n}\nexports.CFB = CFB;\n_CFB_iv = new WeakMap(), _CFB_shiftRegister = new WeakMap(), _CFB_instances = new WeakSet(), _CFB_shift = function _CFB_shift(data) {\n  const segmentSize = this.segmentSize / 8;\n  // Shift the register\n  __classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").set(__classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").subarray(segmentSize));\n  __classPrivateFieldGet(this, _CFB_shiftRegister, \"f\").set(data.subarray(0, segmentSize), 16 - segmentSize);\n};","map":{"version":3,"mappings":"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","names":["CFB","mode_js_1","constructor","key","iv","segmentSize","_CFB_iv","_CFB_shiftRegister","Number","isInteger","TypeError","Object","defineProperties","enumerable","value","length","__classPrivateFieldSet","Uint8Array","__classPrivateFieldGet","encrypt","plaintext","ciphertext","i","xorSegment","aes","j","subarray","decrypt","exports","data","set"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/node_modules/aes-js/src.ts/mode-cfb.ts"],"sourcesContent":["// Cipher Feedback\n\nimport { ModeOfOperation } from \"./mode.js\";\n\nexport class CFB extends ModeOfOperation {\n  #iv: Uint8Array;\n  #shiftRegister: Uint8Array;\n\n  readonly segmentSize!: number;\n\n  constructor(key: Uint8Array, iv?: Uint8Array, segmentSize: number = 8) {\n    super(\"CFB\", key, CFB);\n\n    // This library currently only handles byte-aligned segmentSize\n    if (!Number.isInteger(segmentSize) || (segmentSize % 8)) {\n      throw new TypeError(\"invalid segmentSize\");\n    }\n\n    Object.defineProperties(this, {\n      segmentSize: { enumerable: true, value: segmentSize }\n    });\n\n    if (iv) {\n      if (iv.length % 16) {\n        throw new TypeError(\"invalid iv size (must be 16 bytes)\");\n      }\n      this.#iv = new Uint8Array(iv);\n    } else {\n      this.#iv = new Uint8Array(16);\n    }\n\n    this.#shiftRegister = this.iv;\n  }\n\n  get iv(): Uint8Array { return new Uint8Array(this.#iv); }\n\n  #shift(data: Uint8Array): void {\n    const segmentSize = this.segmentSize / 8;\n\n    // Shift the register\n    this.#shiftRegister.set(this.#shiftRegister.subarray(segmentSize));\n    this.#shiftRegister.set(data.subarray(0, segmentSize), 16 - segmentSize);\n  }\n\n  encrypt(plaintext: Uint8Array): Uint8Array {\n    if (8 * plaintext.length % this.segmentSize) {\n      throw new TypeError(\"invalid plaintext size (must be multiple of segmentSize bytes)\");\n    }\n\n    const segmentSize = this.segmentSize / 8;\n\n    const ciphertext = new Uint8Array(plaintext);\n\n    for (let i = 0; i < ciphertext.length; i += segmentSize) {\n      const xorSegment = this.aes.encrypt(this.#shiftRegister);\n      for (let j = 0; j < segmentSize; j++) {\n        ciphertext[i + j] ^= xorSegment[j];\n      }\n\n      this.#shift(ciphertext.subarray(i));\n    }\n\n    return ciphertext;\n  }\n\n  decrypt(ciphertext: Uint8Array): Uint8Array {\n    if (8 * ciphertext.length % this.segmentSize) {\n        throw new TypeError(\"invalid ciphertext size (must be multiple of segmentSize bytes)\");\n    }\n\n    const segmentSize = this.segmentSize / 8;\n\n    const plaintext = new Uint8Array(ciphertext);\n\n    for (let i = 0; i < plaintext.length; i += segmentSize) {\n      const xorSegment = this.aes.encrypt(this.#shiftRegister);\n      for (let j = 0; j < segmentSize; j++) {\n        plaintext[i + j] ^= xorSegment[j];\n      }\n\n      this.#shift(ciphertext.subarray(i));\n    }\n\n    return plaintext;\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}