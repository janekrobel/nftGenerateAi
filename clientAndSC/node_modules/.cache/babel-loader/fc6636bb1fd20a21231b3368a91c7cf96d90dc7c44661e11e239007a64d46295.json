{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.analyzeModuleNotFoundError = exports.loadConfigAndTasks = exports.resolveConfigPath = void 0;\nconst chalk_1 = __importDefault(require(\"chalk\"));\nconst debug_1 = __importDefault(require(\"debug\"));\nconst fs_extra_1 = __importDefault(require(\"fs-extra\"));\nconst path_1 = __importDefault(require(\"path\"));\nconst semver_1 = __importDefault(require(\"semver\"));\nconst context_1 = require(\"../../context\");\nconst packageInfo_1 = require(\"../../util/packageInfo\");\nconst errors_1 = require(\"../errors\");\nconst errors_list_1 = require(\"../errors-list\");\nconst project_structure_1 = require(\"../project-structure\");\nconst constants_1 = require(\"../../hardhat-network/stack-traces/constants\");\nconst config_resolution_1 = require(\"./config-resolution\");\nconst config_validation_1 = require(\"./config-validation\");\nconst default_config_1 = require(\"./default-config\");\nconst log = (0, debug_1.default)(\"hardhat:core:config\");\nfunction importCsjOrEsModule(filePath) {\n  const imported = require(filePath);\n  return imported.default !== undefined ? imported.default : imported;\n}\nfunction resolveConfigPath(configPath) {\n  if (configPath === undefined) {\n    configPath = (0, project_structure_1.getUserConfigPath)();\n  } else {\n    if (!path_1.default.isAbsolute(configPath)) {\n      configPath = path_1.default.join(process.cwd(), configPath);\n      configPath = path_1.default.normalize(configPath);\n    }\n  }\n  return configPath;\n}\nexports.resolveConfigPath = resolveConfigPath;\nfunction loadConfigAndTasks(hardhatArguments) {\n  let {\n    showEmptyConfigWarning = false,\n    showSolidityConfigWarnings = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n    showEmptyConfigWarning: false,\n    showSolidityConfigWarnings: false\n  };\n  let configPath = hardhatArguments !== undefined ? hardhatArguments.config : undefined;\n  configPath = resolveConfigPath(configPath);\n  log(`Loading Hardhat config from ${configPath}`);\n  // Before loading the builtin tasks, the default and user's config we expose\n  // the config env in the global object.\n  const configEnv = require(\"./config-env\");\n  const globalAsAny = global;\n  Object.entries(configEnv).forEach(_ref => {\n    let [key, value] = _ref;\n    return globalAsAny[key] = value;\n  });\n  const ctx = context_1.HardhatContext.getHardhatContext();\n  ctx.setConfigLoadingAsStarted();\n  let userConfig;\n  try {\n    require(\"../tasks/builtin-tasks\");\n    userConfig = importCsjOrEsModule(configPath);\n  } catch (e) {\n    analyzeModuleNotFoundError(e, configPath);\n    // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n    throw e;\n  } finally {\n    ctx.setConfigLoadingAsFinished();\n  }\n  if (showEmptyConfigWarning) {\n    checkEmptyConfig(userConfig, {\n      showSolidityConfigWarnings\n    });\n  }\n  (0, config_validation_1.validateConfig)(userConfig);\n  if (showSolidityConfigWarnings) {\n    checkMissingSolidityConfig(userConfig);\n  }\n  // To avoid bad practices we remove the previously exported stuff\n  Object.keys(configEnv).forEach(key => globalAsAny[key] = undefined);\n  const frozenUserConfig = deepFreezeUserConfig(userConfig);\n  const resolved = (0, config_resolution_1.resolveConfig)(configPath, userConfig);\n  for (const extender of context_1.HardhatContext.getHardhatContext().configExtenders) {\n    extender(resolved, frozenUserConfig);\n  }\n  (0, config_validation_1.validateResolvedConfig)(resolved);\n  if (showSolidityConfigWarnings) {\n    checkUnsupportedSolidityConfig(resolved);\n    checkUnsupportedRemappings(resolved);\n  }\n  return {\n    resolvedConfig: resolved,\n    userConfig: frozenUserConfig\n  };\n}\nexports.loadConfigAndTasks = loadConfigAndTasks;\nfunction deepFreezeUserConfig(config) {\n  let propertyPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  if (typeof config !== \"object\" || config === null) {\n    return config;\n  }\n  return new Proxy(config, {\n    get(target, property, receiver) {\n      return deepFreezeUserConfig(Reflect.get(target, property, receiver), [...propertyPath, property]);\n    },\n    set(target, property, _value, _receiver) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.GENERAL.USER_CONFIG_MODIFIED, {\n        path: [...propertyPath, property].map(pathPart => pathPart.toString()).join(\".\")\n      });\n    }\n  });\n}\n/**\n * Receives an Error and checks if it's a MODULE_NOT_FOUND and the reason that\n * caused it.\n *\n * If it can infer the reason, it throws an appropiate error. Otherwise it does\n * nothing.\n */\nfunction analyzeModuleNotFoundError(error, configPath) {\n  const stackTraceParser = require(\"stacktrace-parser\");\n  if (error.code !== \"MODULE_NOT_FOUND\") {\n    return;\n  }\n  const stackTrace = stackTraceParser.parse(error.stack);\n  const throwingFile = stackTrace.filter(x => x.file !== null).map(x => x.file).find(x => path_1.default.isAbsolute(x));\n  if (throwingFile === null || throwingFile === undefined) {\n    return;\n  }\n  // if the error comes from the config file, we ignore it because we know it's\n  // a direct import that's missing\n  if (throwingFile === configPath) {\n    return;\n  }\n  const packageJsonPath = (0, packageInfo_1.findClosestPackageJson)(throwingFile);\n  if (packageJsonPath === null) {\n    return;\n  }\n  const packageJson = fs_extra_1.default.readJsonSync(packageJsonPath);\n  const peerDependencies = packageJson.peerDependencies ?? {};\n  if (peerDependencies[\"@nomiclabs/buidler\"] !== undefined) {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.PLUGINS.BUIDLER_PLUGIN, {\n      plugin: packageJson.name\n    });\n  }\n  // if the problem doesn't come from a hardhat plugin, we ignore it\n  if (peerDependencies.hardhat === undefined) {\n    return;\n  }\n  const missingPeerDependencies = {};\n  for (const [peerDependency, version] of Object.entries(peerDependencies)) {\n    const peerDependencyPackageJson = readPackageJson(peerDependency);\n    if (peerDependencyPackageJson === undefined) {\n      missingPeerDependencies[peerDependency] = version;\n    }\n  }\n  const missingPeerDependenciesNames = Object.keys(missingPeerDependencies);\n  if (missingPeerDependenciesNames.length > 0) {\n    throw new errors_1.HardhatError(errors_list_1.ERRORS.PLUGINS.MISSING_DEPENDENCIES, {\n      plugin: packageJson.name,\n      missingDependencies: missingPeerDependenciesNames.join(\", \"),\n      missingDependenciesVersions: Object.entries(missingPeerDependencies).map(_ref2 => {\n        let [name, version] = _ref2;\n        return `\"${name}@${version}\"`;\n      }).join(\" \")\n    });\n  }\n}\nexports.analyzeModuleNotFoundError = analyzeModuleNotFoundError;\nfunction readPackageJson(packageName) {\n  try {\n    const packageJsonPath = require.resolve(path_1.default.join(packageName, \"package.json\"));\n    return require(packageJsonPath);\n  } catch {\n    return undefined;\n  }\n}\nfunction checkEmptyConfig(userConfig, _ref3) {\n  let {\n    showSolidityConfigWarnings\n  } = _ref3;\n  if (userConfig === undefined || Object.keys(userConfig).length === 0) {\n    let warning = `Hardhat config is returning an empty config object, check the export from the config file if this is unexpected.\\n`;\n    // This 'learn more' section is also printed by the solidity config warning,\n    // so we need to check to avoid printing it twice\n    if (!showSolidityConfigWarnings) {\n      warning += `\\nLearn more about configuring Hardhat at https://hardhat.org/config\\n`;\n    }\n    console.warn(chalk_1.default.yellow(warning));\n  }\n}\nfunction checkMissingSolidityConfig(userConfig) {\n  if (userConfig.solidity === undefined) {\n    console.warn(chalk_1.default.yellow(`Solidity compiler is not configured. Version ${default_config_1.DEFAULT_SOLC_VERSION} will be used by default. Add a 'solidity' entry to your configuration to suppress this warning.\n\nLearn more about compiler configuration at https://hardhat.org/config\n`));\n  }\n}\nfunction checkUnsupportedSolidityConfig(resolvedConfig) {\n  const compilerVersions = resolvedConfig.solidity.compilers.map(x => x.version);\n  const overrideVersions = Object.values(resolvedConfig.solidity.overrides).map(x => x.version);\n  const solcVersions = [...compilerVersions, ...overrideVersions];\n  const unsupportedVersions = [];\n  for (const solcVersion of solcVersions) {\n    if (!semver_1.default.satisfies(solcVersion, constants_1.SUPPORTED_SOLIDITY_VERSION_RANGE)) {\n      unsupportedVersions.push(solcVersion);\n    }\n  }\n  if (unsupportedVersions.length > 0) {\n    console.warn(chalk_1.default.yellow(`Solidity ${unsupportedVersions.join(\", \")} ${unsupportedVersions.length === 1 ? \"is\" : \"are\"} not fully supported yet. You can still use Hardhat, but some features, like stack traces, might not work correctly.\n\nLearn more at https://hardhat.org/hardhat-runner/docs/reference/solidity-support\n`));\n  }\n}\nfunction checkUnsupportedRemappings(_ref4) {\n  let {\n    solidity\n  } = _ref4;\n  const solcConfigs = [...solidity.compilers, ...Object.values(solidity.overrides)];\n  const remappings = solcConfigs.filter(_ref5 => {\n    let {\n      settings\n    } = _ref5;\n    return settings.remappings !== undefined;\n  });\n  if (remappings.length > 0) {\n    console.warn(chalk_1.default.yellow(`Solidity remappings are not currently supported; you may experience unexpected compilation results. Remove any 'remappings' fields from your configuration to suppress this warning.\n\nLearn more about compiler configuration at https://hardhat.org/config\n`));\n  }\n}","map":{"version":3,"mappings":"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","names":["log","importCsjOrEsModule","filePath","imported","require","default","undefined","resolveConfigPath","configPath","path_1","isAbsolute","join","process","cwd","normalize","exports","loadConfigAndTasks","hardhatArguments","showEmptyConfigWarning","showSolidityConfigWarnings","config","configEnv","globalAsAny","global","Object","entries","forEach","key","value","ctx","context_1","getHardhatContext","setConfigLoadingAsStarted","userConfig","e","analyzeModuleNotFoundError","setConfigLoadingAsFinished","checkEmptyConfig","checkMissingSolidityConfig","keys","frozenUserConfig","deepFreezeUserConfig","resolved","extender","configExtenders","checkUnsupportedSolidityConfig","checkUnsupportedRemappings","resolvedConfig","propertyPath","Proxy","get","target","property","receiver","Reflect","set","_value","_receiver","errors_1","errors_list_1","GENERAL","USER_CONFIG_MODIFIED","path","map","pathPart","toString","error","stackTraceParser","code","stackTrace","parse","stack","throwingFile","filter","x","file","find","packageJsonPath","packageJson","fs_extra_1","readJsonSync","peerDependencies","PLUGINS","BUIDLER_PLUGIN","plugin","name","hardhat","missingPeerDependencies","peerDependency","version","peerDependencyPackageJson","readPackageJson","missingPeerDependenciesNames","length","MISSING_DEPENDENCIES","missingDependencies","missingDependenciesVersions","packageName","resolve","warning","console","warn","chalk_1","yellow","solidity","default_config_1","compilerVersions","compilers","overrideVersions","values","overrides","solcVersions","unsupportedVersions","solcVersion","semver_1","satisfies","constants_1","push","solcConfigs","remappings","settings"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/hardhat/src/internal/core/config/config-loading.ts"],"sourcesContent":["import type StackTraceParserT from \"stacktrace-parser\";\n\nimport chalk from \"chalk\";\nimport debug from \"debug\";\nimport fsExtra from \"fs-extra\";\nimport path from \"path\";\nimport semver from \"semver\";\n\nimport {\n  HardhatArguments,\n  HardhatConfig,\n  HardhatUserConfig,\n} from \"../../../types\";\nimport { HardhatContext } from \"../../context\";\nimport { findClosestPackageJson } from \"../../util/packageInfo\";\nimport { HardhatError } from \"../errors\";\nimport { ERRORS } from \"../errors-list\";\nimport { getUserConfigPath } from \"../project-structure\";\n\nimport { SUPPORTED_SOLIDITY_VERSION_RANGE } from \"../../hardhat-network/stack-traces/constants\";\nimport { resolveConfig } from \"./config-resolution\";\nimport { validateConfig, validateResolvedConfig } from \"./config-validation\";\nimport { DEFAULT_SOLC_VERSION } from \"./default-config\";\n\nconst log = debug(\"hardhat:core:config\");\n\nfunction importCsjOrEsModule(filePath: string): any {\n  const imported = require(filePath);\n  return imported.default !== undefined ? imported.default : imported;\n}\n\nexport function resolveConfigPath(configPath: string | undefined) {\n  if (configPath === undefined) {\n    configPath = getUserConfigPath();\n  } else {\n    if (!path.isAbsolute(configPath)) {\n      configPath = path.join(process.cwd(), configPath);\n      configPath = path.normalize(configPath);\n    }\n  }\n  return configPath;\n}\n\nexport function loadConfigAndTasks(\n  hardhatArguments?: Partial<HardhatArguments>,\n  {\n    showEmptyConfigWarning = false,\n    showSolidityConfigWarnings = false,\n  }: {\n    showEmptyConfigWarning?: boolean;\n    showSolidityConfigWarnings?: boolean;\n  } = {\n    showEmptyConfigWarning: false,\n    showSolidityConfigWarnings: false,\n  }\n): { resolvedConfig: HardhatConfig; userConfig: HardhatUserConfig } {\n  let configPath =\n    hardhatArguments !== undefined ? hardhatArguments.config : undefined;\n\n  configPath = resolveConfigPath(configPath);\n  log(`Loading Hardhat config from ${configPath}`);\n  // Before loading the builtin tasks, the default and user's config we expose\n  // the config env in the global object.\n  const configEnv = require(\"./config-env\");\n\n  const globalAsAny: any = global;\n\n  Object.entries(configEnv).forEach(\n    ([key, value]) => (globalAsAny[key] = value)\n  );\n\n  const ctx = HardhatContext.getHardhatContext();\n\n  ctx.setConfigLoadingAsStarted();\n\n  let userConfig;\n\n  try {\n    require(\"../tasks/builtin-tasks\");\n    userConfig = importCsjOrEsModule(configPath);\n  } catch (e) {\n    analyzeModuleNotFoundError(e, configPath);\n\n    // eslint-disable-next-line @nomiclabs/hardhat-internal-rules/only-hardhat-error\n    throw e;\n  } finally {\n    ctx.setConfigLoadingAsFinished();\n  }\n\n  if (showEmptyConfigWarning) {\n    checkEmptyConfig(userConfig, { showSolidityConfigWarnings });\n  }\n\n  validateConfig(userConfig);\n\n  if (showSolidityConfigWarnings) {\n    checkMissingSolidityConfig(userConfig);\n  }\n\n  // To avoid bad practices we remove the previously exported stuff\n  Object.keys(configEnv).forEach((key) => (globalAsAny[key] = undefined));\n\n  const frozenUserConfig = deepFreezeUserConfig(userConfig);\n\n  const resolved = resolveConfig(configPath, userConfig);\n\n  for (const extender of HardhatContext.getHardhatContext().configExtenders) {\n    extender(resolved, frozenUserConfig);\n  }\n\n  validateResolvedConfig(resolved);\n\n  if (showSolidityConfigWarnings) {\n    checkUnsupportedSolidityConfig(resolved);\n    checkUnsupportedRemappings(resolved);\n  }\n\n  return { resolvedConfig: resolved, userConfig: frozenUserConfig };\n}\n\nfunction deepFreezeUserConfig(\n  config: any,\n  propertyPath: Array<string | number | symbol> = []\n) {\n  if (typeof config !== \"object\" || config === null) {\n    return config;\n  }\n\n  return new Proxy(config, {\n    get(target: any, property: string | number | symbol, receiver: any): any {\n      return deepFreezeUserConfig(Reflect.get(target, property, receiver), [\n        ...propertyPath,\n        property,\n      ]);\n    },\n\n    set(\n      target: any,\n      property: string | number | symbol,\n      _value: any,\n      _receiver: any\n    ): boolean {\n      throw new HardhatError(ERRORS.GENERAL.USER_CONFIG_MODIFIED, {\n        path: [...propertyPath, property]\n          .map((pathPart) => pathPart.toString())\n          .join(\".\"),\n      });\n    },\n  });\n}\n\n/**\n * Receives an Error and checks if it's a MODULE_NOT_FOUND and the reason that\n * caused it.\n *\n * If it can infer the reason, it throws an appropiate error. Otherwise it does\n * nothing.\n */\nexport function analyzeModuleNotFoundError(error: any, configPath: string) {\n  const stackTraceParser =\n    require(\"stacktrace-parser\") as typeof StackTraceParserT;\n\n  if (error.code !== \"MODULE_NOT_FOUND\") {\n    return;\n  }\n  const stackTrace = stackTraceParser.parse(error.stack);\n  const throwingFile = stackTrace\n    .filter((x) => x.file !== null)\n    .map((x) => x.file!)\n    .find((x) => path.isAbsolute(x));\n\n  if (throwingFile === null || throwingFile === undefined) {\n    return;\n  }\n\n  // if the error comes from the config file, we ignore it because we know it's\n  // a direct import that's missing\n  if (throwingFile === configPath) {\n    return;\n  }\n\n  const packageJsonPath = findClosestPackageJson(throwingFile);\n\n  if (packageJsonPath === null) {\n    return;\n  }\n\n  const packageJson = fsExtra.readJsonSync(packageJsonPath);\n  const peerDependencies: { [name: string]: string } =\n    packageJson.peerDependencies ?? {};\n\n  if (peerDependencies[\"@nomiclabs/buidler\"] !== undefined) {\n    throw new HardhatError(ERRORS.PLUGINS.BUIDLER_PLUGIN, {\n      plugin: packageJson.name,\n    });\n  }\n\n  // if the problem doesn't come from a hardhat plugin, we ignore it\n  if (peerDependencies.hardhat === undefined) {\n    return;\n  }\n\n  const missingPeerDependencies: { [name: string]: string } = {};\n  for (const [peerDependency, version] of Object.entries(peerDependencies)) {\n    const peerDependencyPackageJson = readPackageJson(peerDependency);\n    if (peerDependencyPackageJson === undefined) {\n      missingPeerDependencies[peerDependency] = version;\n    }\n  }\n\n  const missingPeerDependenciesNames = Object.keys(missingPeerDependencies);\n  if (missingPeerDependenciesNames.length > 0) {\n    throw new HardhatError(ERRORS.PLUGINS.MISSING_DEPENDENCIES, {\n      plugin: packageJson.name,\n      missingDependencies: missingPeerDependenciesNames.join(\", \"),\n      missingDependenciesVersions: Object.entries(missingPeerDependencies)\n        .map(([name, version]) => `\"${name}@${version}\"`)\n        .join(\" \"),\n    });\n  }\n}\n\ninterface PackageJson {\n  name: string;\n  version: string;\n  peerDependencies?: {\n    [name: string]: string;\n  };\n}\n\nfunction readPackageJson(packageName: string): PackageJson | undefined {\n  try {\n    const packageJsonPath = require.resolve(\n      path.join(packageName, \"package.json\")\n    );\n\n    return require(packageJsonPath);\n  } catch {\n    return undefined;\n  }\n}\n\nfunction checkEmptyConfig(\n  userConfig: any,\n  { showSolidityConfigWarnings }: { showSolidityConfigWarnings: boolean }\n) {\n  if (userConfig === undefined || Object.keys(userConfig).length === 0) {\n    let warning = `Hardhat config is returning an empty config object, check the export from the config file if this is unexpected.\\n`;\n\n    // This 'learn more' section is also printed by the solidity config warning,\n    // so we need to check to avoid printing it twice\n    if (!showSolidityConfigWarnings) {\n      warning += `\\nLearn more about configuring Hardhat at https://hardhat.org/config\\n`;\n    }\n\n    console.warn(chalk.yellow(warning));\n  }\n}\n\nfunction checkMissingSolidityConfig(userConfig: any) {\n  if (userConfig.solidity === undefined) {\n    console.warn(\n      chalk.yellow(\n        `Solidity compiler is not configured. Version ${DEFAULT_SOLC_VERSION} will be used by default. Add a 'solidity' entry to your configuration to suppress this warning.\n\nLearn more about compiler configuration at https://hardhat.org/config\n`\n      )\n    );\n  }\n}\n\nfunction checkUnsupportedSolidityConfig(resolvedConfig: HardhatConfig) {\n  const compilerVersions = resolvedConfig.solidity.compilers.map(\n    (x) => x.version\n  );\n  const overrideVersions = Object.values(resolvedConfig.solidity.overrides).map(\n    (x) => x.version\n  );\n  const solcVersions = [...compilerVersions, ...overrideVersions];\n\n  const unsupportedVersions: string[] = [];\n  for (const solcVersion of solcVersions) {\n    if (!semver.satisfies(solcVersion, SUPPORTED_SOLIDITY_VERSION_RANGE)) {\n      unsupportedVersions.push(solcVersion);\n    }\n  }\n\n  if (unsupportedVersions.length > 0) {\n    console.warn(\n      chalk.yellow(\n        `Solidity ${unsupportedVersions.join(\", \")} ${\n          unsupportedVersions.length === 1 ? \"is\" : \"are\"\n        } not fully supported yet. You can still use Hardhat, but some features, like stack traces, might not work correctly.\n\nLearn more at https://hardhat.org/hardhat-runner/docs/reference/solidity-support\n`\n      )\n    );\n  }\n}\n\nfunction checkUnsupportedRemappings({ solidity }: HardhatConfig) {\n  const solcConfigs = [\n    ...solidity.compilers,\n    ...Object.values(solidity.overrides),\n  ];\n  const remappings = solcConfigs.filter(\n    ({ settings }) => settings.remappings !== undefined\n  );\n\n  if (remappings.length > 0) {\n    console.warn(\n      chalk.yellow(\n        `Solidity remappings are not currently supported; you may experience unexpected compilation results. Remove any 'remappings' fields from your configuration to suppress this warning.\n\nLearn more about compiler configuration at https://hardhat.org/config\n`\n      )\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}