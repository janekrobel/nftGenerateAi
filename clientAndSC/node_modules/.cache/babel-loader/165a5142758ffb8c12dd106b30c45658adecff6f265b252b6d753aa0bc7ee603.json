{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Wallet = void 0;\nconst index_js_1 = require(\"../crypto/index.js\");\nconst index_js_2 = require(\"../utils/index.js\");\nconst base_wallet_js_1 = require(\"./base-wallet.js\");\nconst hdwallet_js_1 = require(\"./hdwallet.js\");\nconst json_crowdsale_js_1 = require(\"./json-crowdsale.js\");\nconst json_keystore_js_1 = require(\"./json-keystore.js\");\nconst mnemonic_js_1 = require(\"./mnemonic.js\");\nfunction stall(duration) {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve();\n    }, duration);\n  });\n}\n/**\n *  A **Wallet** manages a single private key which is used to sign\n *  transactions, messages and other common payloads.\n *\n *  This class is generally the main entry point for developers\n *  that wish to use a private key directly, as it can create\n *  instances from a large variety of common sources, including\n *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON\n *  wallets.\n */\nclass Wallet extends base_wallet_js_1.BaseWallet {\n  /**\n   *  Create a new wallet for the %%privateKey%%, optionally connected\n   *  to %%provider%%.\n   */\n  constructor(key, provider) {\n    if (typeof key === \"string\" && !key.startsWith(\"0x\")) {\n      key = \"0x\" + key;\n    }\n    let signingKey = typeof key === \"string\" ? new index_js_1.SigningKey(key) : key;\n    super(signingKey, provider);\n  }\n  connect(provider) {\n    return new Wallet(this.signingKey, provider);\n  }\n  /**\n   *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n   *  %%password%%.\n   *\n   *  If %%progressCallback%% is specified, it will receive periodic\n   *  updates as the encryption process progreses.\n   */\n  async encrypt(password, progressCallback) {\n    const account = {\n      address: this.address,\n      privateKey: this.privateKey\n    };\n    return await (0, json_keystore_js_1.encryptKeystoreJson)(account, password, {\n      progressCallback\n    });\n  }\n  /**\n   *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n   *  %%password%%.\n   *\n   *  It is preferred to use the [async version](encrypt) instead,\n   *  which allows a [[ProgressCallback]] to keep the user informed.\n   *\n   *  This method will block the event loop (freezing all UI) until\n   *  it is complete, which may be a non-trivial duration.\n   */\n  encryptSync(password) {\n    const account = {\n      address: this.address,\n      privateKey: this.privateKey\n    };\n    return (0, json_keystore_js_1.encryptKeystoreJsonSync)(account, password);\n  }\n  static #fromAccount(account) {\n    (0, index_js_2.assertArgument)(account, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n    if (\"mnemonic\" in account && account.mnemonic && account.mnemonic.locale === \"en\") {\n      const mnemonic = mnemonic_js_1.Mnemonic.fromEntropy(account.mnemonic.entropy);\n      const wallet = hdwallet_js_1.HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);\n      if (wallet.address === account.address && wallet.privateKey === account.privateKey) {\n        return wallet;\n      }\n      console.log(\"WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key\");\n    }\n    const wallet = new Wallet(account.privateKey);\n    (0, index_js_2.assertArgument)(wallet.address === account.address, \"address/privateKey mismatch\", \"json\", \"[ REDACTED ]\");\n    return wallet;\n  }\n  /**\n   *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%\n   *  with %%password%%.\n   *\n   *  If %%progress%% is provided, it is called periodically during\n   *  decryption so that any UI can be updated.\n   */\n  static async fromEncryptedJson(json, password, progress) {\n    let account = null;\n    if ((0, json_keystore_js_1.isKeystoreJson)(json)) {\n      account = await (0, json_keystore_js_1.decryptKeystoreJson)(json, password, progress);\n    } else if ((0, json_crowdsale_js_1.isCrowdsaleJson)(json)) {\n      if (progress) {\n        progress(0);\n        await stall(0);\n      }\n      account = (0, json_crowdsale_js_1.decryptCrowdsaleJson)(json, password);\n      if (progress) {\n        progress(1);\n        await stall(0);\n      }\n    }\n    return Wallet.#fromAccount(account);\n  }\n  /**\n   *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.\n   *\n   *  The [[fromEncryptedJson]] method is preferred, as this method\n   *  will lock up and freeze the UI during decryption, which may take\n   *  some time.\n   */\n  static fromEncryptedJsonSync(json, password) {\n    let account = null;\n    if ((0, json_keystore_js_1.isKeystoreJson)(json)) {\n      account = (0, json_keystore_js_1.decryptKeystoreJsonSync)(json, password);\n    } else if ((0, json_crowdsale_js_1.isCrowdsaleJson)(json)) {\n      account = (0, json_crowdsale_js_1.decryptCrowdsaleJson)(json, password);\n    } else {\n      (0, index_js_2.assertArgument)(false, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n    }\n    return Wallet.#fromAccount(account);\n  }\n  /**\n   *  Creates a new random [[HDNodeWallet]] using the avavilable\n   *  [cryptographic random source](randomBytes).\n   *\n   *  If there is no crytographic random source, this will throw.\n   */\n  static createRandom(provider) {\n    const wallet = hdwallet_js_1.HDNodeWallet.createRandom();\n    if (provider) {\n      return wallet.connect(provider);\n    }\n    return wallet;\n  }\n  /**\n   *  Creates a [[HDNodeWallet]] for %%phrase%%.\n   */\n  static fromPhrase(phrase, provider) {\n    const wallet = hdwallet_js_1.HDNodeWallet.fromPhrase(phrase);\n    if (provider) {\n      return wallet.connect(provider);\n    }\n    return wallet;\n  }\n}\nexports.Wallet = Wallet;","map":{"version":3,"mappings":"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","names":["stall","duration","Promise","resolve","setTimeout","Wallet","base_wallet_js_1","constructor","key","provider","startsWith","signingKey","index_js_1","connect","encrypt","password","progressCallback","account","address","privateKey","encryptSync","mnemonic","locale","mnemonic_js_1","fromEntropy","entropy","wallet","hdwallet_js_1","fromMnemonic","path","console","log","fromEncryptedJson","json","progress","fromEncryptedJsonSync","createRandom","fromPhrase","phrase","exports"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/wallet/wallet.ts"],"sourcesContent":["import { SigningKey } from \"../crypto/index.js\";\nimport { assertArgument } from \"../utils/index.js\";\n\nimport { BaseWallet } from \"./base-wallet.js\";\nimport { HDNodeWallet } from \"./hdwallet.js\";\nimport { decryptCrowdsaleJson, isCrowdsaleJson  } from \"./json-crowdsale.js\";\nimport {\n    decryptKeystoreJson, decryptKeystoreJsonSync,\n    encryptKeystoreJson, encryptKeystoreJsonSync,\n    isKeystoreJson\n} from \"./json-keystore.js\";\nimport { Mnemonic } from \"./mnemonic.js\";\n\nimport type { ProgressCallback } from \"../crypto/index.js\";\nimport type { Provider } from \"../providers/index.js\";\n\nimport type { CrowdsaleAccount } from \"./json-crowdsale.js\";\nimport type { KeystoreAccount } from \"./json-keystore.js\";\n\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => { setTimeout(() => { resolve(); }, duration); });\n}\n\n/**\n *  A **Wallet** manages a single private key which is used to sign\n *  transactions, messages and other common payloads.\n *\n *  This class is generally the main entry point for developers\n *  that wish to use a private key directly, as it can create\n *  instances from a large variety of common sources, including\n *  raw private key, [[link-bip-39]] mnemonics and encrypte JSON\n *  wallets.\n */\nexport class Wallet extends BaseWallet {\n\n    /**\n     *  Create a new wallet for the %%privateKey%%, optionally connected\n     *  to %%provider%%.\n     */\n    constructor(key: string | SigningKey, provider?: null | Provider) {\n        if (typeof(key) === \"string\" && !key.startsWith(\"0x\")) {\n            key = \"0x\" + key;\n        }\n\n        let signingKey = (typeof(key) === \"string\") ? new SigningKey(key): key;\n        super(signingKey, provider);\n    }\n\n    connect(provider: null | Provider): Wallet {\n        return new Wallet(this.signingKey, provider);\n    }\n\n    /**\n     *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with\n     *  %%password%%.\n     *\n     *  If %%progressCallback%% is specified, it will receive periodic\n     *  updates as the encryption process progreses.\n     */\n    async encrypt(password: Uint8Array | string, progressCallback?: ProgressCallback): Promise<string> {\n        const account = { address: this.address, privateKey: this.privateKey };\n        return await encryptKeystoreJson(account, password, { progressCallback });\n    }\n\n    /**\n     *  Returns a [JSON Keystore Wallet](json-wallets) encryped with\n     *  %%password%%.\n     *\n     *  It is preferred to use the [async version](encrypt) instead,\n     *  which allows a [[ProgressCallback]] to keep the user informed.\n     *\n     *  This method will block the event loop (freezing all UI) until\n     *  it is complete, which may be a non-trivial duration.\n     */\n    encryptSync(password: Uint8Array | string): string {\n        const account = { address: this.address, privateKey: this.privateKey };\n        return encryptKeystoreJsonSync(account, password);\n    }\n\n    static #fromAccount(account: null | CrowdsaleAccount | KeystoreAccount): HDNodeWallet | Wallet {\n        assertArgument(account, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n\n        if (\"mnemonic\" in account && account.mnemonic && account.mnemonic.locale === \"en\") {\n            const mnemonic = Mnemonic.fromEntropy(account.mnemonic.entropy);\n            const wallet = HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);\n            if (wallet.address === account.address && wallet.privateKey === account.privateKey) {\n                return wallet;\n            }\n            console.log(\"WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key\");\n        }\n\n        const wallet = new Wallet(account.privateKey);\n\n        assertArgument(wallet.address === account.address,\n            \"address/privateKey mismatch\", \"json\", \"[ REDACTED ]\");\n\n        return wallet;\n    }\n\n    /**\n     *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%\n     *  with %%password%%.\n     *\n     *  If %%progress%% is provided, it is called periodically during\n     *  decryption so that any UI can be updated.\n     */\n    static async fromEncryptedJson(json: string, password: Uint8Array | string, progress?: ProgressCallback): Promise<HDNodeWallet | Wallet> {\n        let account: null | CrowdsaleAccount | KeystoreAccount = null;\n        if (isKeystoreJson(json)) {\n            account = await decryptKeystoreJson(json, password, progress);\n\n        } else if (isCrowdsaleJson(json)) {\n            if (progress) { progress(0); await stall(0); }\n            account = decryptCrowdsaleJson(json, password);\n            if (progress) { progress(1); await stall(0); }\n\n        }\n\n        return Wallet.#fromAccount(account);\n    }\n\n    /**\n     *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.\n     *\n     *  The [[fromEncryptedJson]] method is preferred, as this method\n     *  will lock up and freeze the UI during decryption, which may take\n     *  some time.\n     */\n    static fromEncryptedJsonSync(json: string, password: Uint8Array | string): HDNodeWallet | Wallet {\n        let account: null | CrowdsaleAccount | KeystoreAccount = null;\n        if (isKeystoreJson(json)) {\n            account = decryptKeystoreJsonSync(json, password);\n        } else if (isCrowdsaleJson(json)) {\n            account = decryptCrowdsaleJson(json, password);\n        } else {\n            assertArgument(false, \"invalid JSON wallet\", \"json\", \"[ REDACTED ]\");\n        }\n\n        return Wallet.#fromAccount(account);\n    }\n\n    /**\n     *  Creates a new random [[HDNodeWallet]] using the avavilable\n     *  [cryptographic random source](randomBytes).\n     *\n     *  If there is no crytographic random source, this will throw.\n     */\n    static createRandom(provider?: null | Provider): HDNodeWallet {\n        const wallet = HDNodeWallet.createRandom();\n        if (provider) { return wallet.connect(provider); }\n        return wallet;\n    }\n\n    /**\n     *  Creates a [[HDNodeWallet]] for %%phrase%%.\n     */\n    static fromPhrase(phrase: string, provider?: Provider): HDNodeWallet {\n        const wallet = HDNodeWallet.fromPhrase(phrase);\n        if (provider) { return wallet.connect(provider); }\n        return wallet;\n    }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}