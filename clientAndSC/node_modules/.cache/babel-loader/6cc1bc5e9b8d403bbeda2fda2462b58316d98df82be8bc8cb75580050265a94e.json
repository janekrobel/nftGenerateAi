{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nconst keccak_1 = require(\"ethereum-cryptography/keccak\");\nconst secp256k1_1 = require(\"ethereum-cryptography/secp256k1\");\nconst bytes_1 = require(\"./bytes\");\nconst constants_1 = require(\"./constants\");\nconst helpers_1 = require(\"./helpers\");\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */\nfunction ecsign(msgHash, privateKey, chainId) {\n  const {\n    signature,\n    recid: recovery\n  } = (0, secp256k1_1.ecdsaSign)(msgHash, privateKey);\n  const r = Buffer.from(signature.slice(0, 32));\n  const s = Buffer.from(signature.slice(32, 64));\n  const v = chainId === undefined ? BigInt(recovery + 27) : BigInt(recovery + 35) + BigInt(chainId) * BigInt(2);\n  return {\n    r,\n    s,\n    v\n  };\n}\nexports.ecsign = ecsign;\nfunction calculateSigRecovery(v, chainId) {\n  if (v === BigInt(0) || v === BigInt(1)) return v;\n  if (chainId === undefined) {\n    return v - BigInt(27);\n  }\n  return v - (chainId * BigInt(2) + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n  return recovery === BigInt(0) || recovery === BigInt(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nconst ecrecover = function (msgHash, v, r, s, chainId) {\n  const signature = Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32)], 64);\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  const senderPubKey = (0, secp256k1_1.ecdsaRecover)(signature, Number(recovery), msgHash);\n  return Buffer.from((0, secp256k1_1.publicKeyConvert)(senderPubKey, false).slice(1));\n};\nexports.ecrecover = ecrecover;\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toRpcSig = function (v, r, s, chainId) {\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(s, 32), (0, bytes_1.toBuffer)(v)]));\n};\nexports.toRpcSig = toRpcSig;\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nconst toCompactSig = function (v, r, s, chainId) {\n  const recovery = calculateSigRecovery(v, chainId);\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value');\n  }\n  let ss = s;\n  if (v > BigInt(28) && v % BigInt(2) === BigInt(1) || v === BigInt(1) || v === BigInt(28)) {\n    ss = Buffer.from(s);\n    ss[0] |= 0x80;\n  }\n  return (0, bytes_1.bufferToHex)(Buffer.concat([(0, bytes_1.setLengthLeft)(r, 32), (0, bytes_1.setLengthLeft)(ss, 32)]));\n};\nexports.toCompactSig = toCompactSig;\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nconst fromRpcSig = function (sig) {\n  const buf = (0, bytes_1.toBuffer)(sig);\n  let r;\n  let s;\n  let v;\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = (0, bytes_1.bufferToBigInt)(buf.slice(64));\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32);\n    s = buf.slice(32, 64);\n    v = BigInt((0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7);\n    s[0] &= 0x7f;\n  } else {\n    throw new Error('Invalid signature length');\n  }\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v = v + BigInt(27);\n  }\n  return {\n    v,\n    r,\n    s\n  };\n};\nexports.fromRpcSig = fromRpcSig;\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nconst isValidSignature = function (v, r, s) {\n  let homesteadOrLater = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  let chainId = arguments.length > 4 ? arguments[4] : undefined;\n  if (r.length !== 32 || s.length !== 32) {\n    return false;\n  }\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false;\n  }\n  const rBigInt = (0, bytes_1.bufferToBigInt)(r);\n  const sBigInt = (0, bytes_1.bufferToBigInt)(s);\n  if (rBigInt === BigInt(0) || rBigInt >= constants_1.SECP256K1_ORDER || sBigInt === BigInt(0) || sBigInt >= constants_1.SECP256K1_ORDER) {\n    return false;\n  }\n  if (homesteadOrLater && sBigInt >= constants_1.SECP256K1_ORDER_DIV_2) {\n    return false;\n  }\n  return true;\n};\nexports.isValidSignature = isValidSignature;\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nconst hashPersonalMessage = function (message) {\n  (0, helpers_1.assertIsBuffer)(message);\n  const prefix = Buffer.from(`\\u0019Ethereum Signed Message:\\n${message.length}`, 'utf-8');\n  return Buffer.from((0, keccak_1.keccak256)(Buffer.concat([prefix, message])));\n};\nexports.hashPersonalMessage = hashPersonalMessage;","map":{"version":3,"mappings":"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","names":["ecsign","msgHash","privateKey","chainId","signature","recid","recovery","r","Buffer","from","slice","s","v","undefined","BigInt","exports","calculateSigRecovery","isValidSigRecovery","ecrecover","concat","Error","senderPubKey","Number","toRpcSig","toCompactSig","ss","fromRpcSig","sig","buf","length","isValidSignature","homesteadOrLater","rBigInt","sBigInt","constants_1","hashPersonalMessage","message","prefix"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@nomicfoundation/ethereumjs-util/src/signature.ts"],"sourcesContent":["import { keccak256 } from 'ethereum-cryptography/keccak'\nimport { ecdsaRecover, ecdsaSign, publicKeyConvert } from 'ethereum-cryptography/secp256k1'\n\nimport { bufferToBigInt, bufferToHex, bufferToInt, setLengthLeft, toBuffer } from './bytes'\nimport { SECP256K1_ORDER, SECP256K1_ORDER_DIV_2 } from './constants'\nimport { assertIsBuffer } from './helpers'\n\nexport interface ECDSASignature {\n  v: bigint\n  r: Buffer\n  s: Buffer\n}\n\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */\nexport function ecsign(msgHash: Buffer, privateKey: Buffer, chainId?: bigint): ECDSASignature {\n  const { signature, recid: recovery } = ecdsaSign(msgHash, privateKey)\n\n  const r = Buffer.from(signature.slice(0, 32))\n  const s = Buffer.from(signature.slice(32, 64))\n\n  const v =\n    chainId === undefined\n      ? BigInt(recovery + 27)\n      : BigInt(recovery + 35) + BigInt(chainId) * BigInt(2)\n\n  return { r, s, v }\n}\n\nfunction calculateSigRecovery(v: bigint, chainId?: bigint): bigint {\n  if (v === BigInt(0) || v === BigInt(1)) return v\n\n  if (chainId === undefined) {\n    return v - BigInt(27)\n  }\n  return v - (chainId * BigInt(2) + BigInt(35))\n}\n\nfunction isValidSigRecovery(recovery: bigint): boolean {\n  return recovery === BigInt(0) || recovery === BigInt(1)\n}\n\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */\nexport const ecrecover = function (\n  msgHash: Buffer,\n  v: bigint,\n  r: Buffer,\n  s: Buffer,\n  chainId?: bigint\n): Buffer {\n  const signature = Buffer.concat([setLengthLeft(r, 32), setLengthLeft(s, 32)], 64)\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n\n  const senderPubKey = ecdsaRecover(signature, Number(recovery), msgHash)\n  return Buffer.from(publicKeyConvert(senderPubKey, false).slice(1))\n}\n\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nexport const toRpcSig = function (v: bigint, r: Buffer, s: Buffer, chainId?: bigint): string {\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n\n  // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n  return bufferToHex(Buffer.concat([setLengthLeft(r, 32), setLengthLeft(s, 32), toBuffer(v)]))\n}\n\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */\nexport const toCompactSig = function (v: bigint, r: Buffer, s: Buffer, chainId?: bigint): string {\n  const recovery = calculateSigRecovery(v, chainId)\n  if (!isValidSigRecovery(recovery)) {\n    throw new Error('Invalid signature v value')\n  }\n\n  let ss = s\n  if ((v > BigInt(28) && v % BigInt(2) === BigInt(1)) || v === BigInt(1) || v === BigInt(28)) {\n    ss = Buffer.from(s)\n    ss[0] |= 0x80\n  }\n\n  return bufferToHex(Buffer.concat([setLengthLeft(r, 32), setLengthLeft(ss, 32)]))\n}\n\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */\nexport const fromRpcSig = function (sig: string): ECDSASignature {\n  const buf: Buffer = toBuffer(sig)\n\n  let r: Buffer\n  let s: Buffer\n  let v: bigint\n  if (buf.length >= 65) {\n    r = buf.slice(0, 32)\n    s = buf.slice(32, 64)\n    v = bufferToBigInt(buf.slice(64))\n  } else if (buf.length === 64) {\n    // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n    r = buf.slice(0, 32)\n    s = buf.slice(32, 64)\n    v = BigInt(bufferToInt(buf.slice(32, 33)) >> 7)\n    s[0] &= 0x7f\n  } else {\n    throw new Error('Invalid signature length')\n  }\n\n  // support both versions of `eth_sign` responses\n  if (v < 27) {\n    v = v + BigInt(27)\n  }\n\n  return {\n    v,\n    r,\n    s,\n  }\n}\n\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */\nexport const isValidSignature = function (\n  v: bigint,\n  r: Buffer,\n  s: Buffer,\n  homesteadOrLater: boolean = true,\n  chainId?: bigint\n): boolean {\n  if (r.length !== 32 || s.length !== 32) {\n    return false\n  }\n\n  if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n    return false\n  }\n\n  const rBigInt = bufferToBigInt(r)\n  const sBigInt = bufferToBigInt(s)\n\n  if (\n    rBigInt === BigInt(0) ||\n    rBigInt >= SECP256K1_ORDER ||\n    sBigInt === BigInt(0) ||\n    sBigInt >= SECP256K1_ORDER\n  ) {\n    return false\n  }\n\n  if (homesteadOrLater && sBigInt >= SECP256K1_ORDER_DIV_2) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */\nexport const hashPersonalMessage = function (message: Buffer): Buffer {\n  assertIsBuffer(message)\n  const prefix = Buffer.from(`\\u0019Ethereum Signed Message:\\n${message.length}`, 'utf-8')\n  return Buffer.from(keccak256(Buffer.concat([prefix, message])))\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}