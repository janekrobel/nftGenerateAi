{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { logger } from '@sentry/utils';\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_IDLE_TIMEOUT } from '../idletransaction';\nimport { SpanStatus } from '../spanstatus';\nimport { extractTraceparentData, secToMs } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { MetricsInstrumentation } from './metrics';\nimport { defaultRequestInstrumentationOptions, registerRequestInstrumentation } from './request';\nimport { defaultRoutingInstrumentation } from './router';\nexport var DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;\nvar DEFAULT_BROWSER_TRACING_OPTIONS = __assign({\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  markBackgroundTransactions: true,\n  maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,\n  routingInstrumentation: defaultRoutingInstrumentation,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true\n}, defaultRequestInstrumentationOptions);\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nvar BrowserTracing = /** @class */function () {\n  function BrowserTracing(_options) {\n    /**\n     * @inheritDoc\n     */\n    this.name = BrowserTracing.id;\n    this._metrics = new MetricsInstrumentation();\n    this._emitOptionsWarning = false;\n    var tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins;\n    // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n    if (_options && _options.tracingOrigins && Array.isArray(_options.tracingOrigins) && _options.tracingOrigins.length !== 0) {\n      tracingOrigins = _options.tracingOrigins;\n    } else {\n      this._emitOptionsWarning = true;\n    }\n    this.options = __assign(__assign(__assign({}, DEFAULT_BROWSER_TRACING_OPTIONS), _options), {\n      tracingOrigins: tracingOrigins\n    });\n  }\n  /**\n   * @inheritDoc\n   */\n  BrowserTracing.prototype.setupOnce = function (_, getCurrentHub) {\n    var _this = this;\n    this._getCurrentHub = getCurrentHub;\n    if (this._emitOptionsWarning) {\n      logger.warn('[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.');\n      logger.warn(\"[Tracing] We added a reasonable default for you: \" + defaultRequestInstrumentationOptions.tracingOrigins);\n    }\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    var _a = this.options,\n      routingInstrumentation = _a.routingInstrumentation,\n      startTransactionOnLocationChange = _a.startTransactionOnLocationChange,\n      startTransactionOnPageLoad = _a.startTransactionOnPageLoad,\n      markBackgroundTransactions = _a.markBackgroundTransactions,\n      traceFetch = _a.traceFetch,\n      traceXHR = _a.traceXHR,\n      tracingOrigins = _a.tracingOrigins,\n      shouldCreateSpanForRequest = _a.shouldCreateSpanForRequest;\n    routingInstrumentation(function (context) {\n      return _this._createRouteTransaction(context);\n    }, startTransactionOnPageLoad, startTransactionOnLocationChange);\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n    registerRequestInstrumentation({\n      traceFetch: traceFetch,\n      traceXHR: traceXHR,\n      tracingOrigins: tracingOrigins,\n      shouldCreateSpanForRequest: shouldCreateSpanForRequest\n    });\n  };\n  /** Create routing idle transaction. */\n  BrowserTracing.prototype._createRouteTransaction = function (context) {\n    var _this = this;\n    if (!this._getCurrentHub) {\n      logger.warn(\"[Tracing] Did not create \" + context.op + \" transaction because _getCurrentHub is invalid.\");\n      return undefined;\n    }\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    var _a = this.options,\n      beforeNavigate = _a.beforeNavigate,\n      idleTimeout = _a.idleTimeout,\n      maxTransactionDuration = _a.maxTransactionDuration;\n    var parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;\n    var expandedContext = __assign(__assign(__assign({}, context), parentContextFromHeader), {\n      trimEnd: true\n    });\n    var modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    var finalContext = modifiedContext === undefined ? __assign(__assign({}, expandedContext), {\n      sampled: false\n    }) : modifiedContext;\n    if (finalContext.sampled === false) {\n      logger.log(\"[Tracing] Will not send \" + finalContext.op + \" transaction because of beforeNavigate.\");\n    }\n    var hub = this._getCurrentHub();\n    var idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, true);\n    logger.log(\"[Tracing] Starting \" + finalContext.op + \" transaction on scope\");\n    idleTransaction.registerBeforeFinishCallback(function (transaction, endTimestamp) {\n      _this._metrics.addPerformanceEntries(transaction);\n      adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp);\n    });\n    return idleTransaction;\n  };\n  /**\n   * @inheritDoc\n   */\n  BrowserTracing.id = 'BrowserTracing';\n  return BrowserTracing;\n}();\nexport { BrowserTracing };\n/**\n * Gets transaction context from a sentry-trace meta.\n *\n * @returns Transaction context data from the header or undefined if there's no header or the header is malformed\n */\nexport function getHeaderContext() {\n  var header = getMetaContent('sentry-trace');\n  if (header) {\n    return extractTraceparentData(header);\n  }\n  return undefined;\n}\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName) {\n  var el = document.querySelector(\"meta[name=\" + metaName + \"]\");\n  return el ? el.getAttribute('content') : null;\n}\n/** Adjusts transaction value based on max transaction duration */\nfunction adjustTransactionDuration(maxDuration, transaction, endTimestamp) {\n  var diff = endTimestamp - transaction.startTimestamp;\n  var isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);\n  if (isOutdatedTransaction) {\n    transaction.setStatus(SpanStatus.DeadlineExceeded);\n    transaction.setTag('maxTransactionDurationExceeded', 'true');\n  }\n}","map":{"version":3,"mappings":"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","names":["logger","startIdleTransaction","DEFAULT_IDLE_TIMEOUT","SpanStatus","extractTraceparentData","secToMs","registerBackgroundTabDetection","MetricsInstrumentation","defaultRequestInstrumentationOptions","registerRequestInstrumentation","defaultRoutingInstrumentation","DEFAULT_MAX_TRANSACTION_DURATION_SECONDS","DEFAULT_BROWSER_TRACING_OPTIONS","idleTimeout","markBackgroundTransactions","maxTransactionDuration","routingInstrumentation","startTransactionOnLocationChange","startTransactionOnPageLoad","_options","BrowserTracing","id","tracingOrigins","Array","isArray","length","_emitOptionsWarning","options","_","getCurrentHub","_getCurrentHub","warn","traceFetch","traceXHR","shouldCreateSpanForRequest","context","_createRouteTransaction","op","undefined","beforeNavigate","parentContextFromHeader","getHeaderContext","expandedContext","trimEnd","modifiedContext","finalContext","__assign","sampled","log","hub","idleTransaction","registerBeforeFinishCallback","transaction","endTimestamp","_this","_metrics","addPerformanceEntries","adjustTransactionDuration","header","getMetaContent","metaName","el","document","querySelector","getAttribute","maxDuration","diff","startTimestamp","isOutdatedTransaction","setStatus","DeadlineExceeded","setTag"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@sentry/tracing/src/browser/browsertracing.ts"],"sourcesContent":["import { Hub } from '@sentry/hub';\nimport { EventProcessor, Integration, Transaction, TransactionContext } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\nimport { startIdleTransaction } from '../hubextensions';\nimport { DEFAULT_IDLE_TIMEOUT, IdleTransaction } from '../idletransaction';\nimport { SpanStatus } from '../spanstatus';\nimport { extractTraceparentData, secToMs } from '../utils';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { MetricsInstrumentation } from './metrics';\nimport {\n  defaultRequestInstrumentationOptions,\n  registerRequestInstrumentation,\n  RequestInstrumentationOptions,\n} from './request';\nimport { defaultRoutingInstrumentation } from './router';\n\nexport const DEFAULT_MAX_TRANSACTION_DURATION_SECONDS = 600;\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions extends RequestInstrumentationOptions {\n  /**\n   * The time to wait in ms until the transaction will be finished. The transaction will use the end timestamp of\n   * the last finished span as the endtime for the transaction.\n   * Time is in ms.\n   *\n   * Default: 1000\n   */\n  idleTimeout: number;\n\n  /**\n   * Flag to enable/disable creation of `navigation` transaction on history changes.\n   *\n   * Default: true\n   */\n  startTransactionOnLocationChange: boolean;\n\n  /**\n   * Flag to enable/disable creation of `pageload` transaction on first pageload.\n   *\n   * Default: true\n   */\n  startTransactionOnPageLoad: boolean;\n\n  /**\n   * The maximum duration of a transaction before it will be marked as \"deadline_exceeded\".\n   * If you never want to mark a transaction set it to 0.\n   * Time is in seconds.\n   *\n   * Default: 600\n   */\n  maxTransactionDuration: number;\n\n  /**\n   * Flag Transactions where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundTransactions: boolean;\n\n  /**\n   * beforeNavigate is called before a pageload/navigation transaction is created and allows users to modify transaction\n   * context data, or drop the transaction entirely (by setting `sampled = false` in the context).\n   *\n   * Note: For legacy reasons, transactions can also be dropped by returning `undefined`.\n   *\n   * @param context: The context data which will be passed to `startTransaction` by default\n   *\n   * @returns A (potentially) modified context object, with `sampled = false` if the transaction should be dropped.\n   */\n  beforeNavigate?(context: TransactionContext): TransactionContext | undefined;\n\n  /**\n   * Instrumentation that creates routing change transactions. By default creates\n   * pageload and navigation transactions.\n   */\n  routingInstrumentation<T extends Transaction>(\n    startTransaction: (context: TransactionContext) => T | undefined,\n    startTransactionOnPageLoad?: boolean,\n    startTransactionOnLocationChange?: boolean,\n  ): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS = {\n  idleTimeout: DEFAULT_IDLE_TIMEOUT,\n  markBackgroundTransactions: true,\n  maxTransactionDuration: DEFAULT_MAX_TRANSACTION_DURATION_SECONDS,\n  routingInstrumentation: defaultRoutingInstrumentation,\n  startTransactionOnLocationChange: true,\n  startTransactionOnPageLoad: true,\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library. This integration uses {@see IdleTransaction} to create transactions.\n */\nexport class BrowserTracing implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'BrowserTracing';\n\n  /** Browser Tracing integration options */\n  public options: BrowserTracingOptions;\n\n  /**\n   * @inheritDoc\n   */\n  public name: string = BrowserTracing.id;\n\n  private _getCurrentHub?: () => Hub;\n\n  private readonly _metrics: MetricsInstrumentation = new MetricsInstrumentation();\n\n  private readonly _emitOptionsWarning: boolean = false;\n\n  public constructor(_options?: Partial<BrowserTracingOptions>) {\n    let tracingOrigins = defaultRequestInstrumentationOptions.tracingOrigins;\n    // NOTE: Logger doesn't work in constructors, as it's initialized after integrations instances\n    if (\n      _options &&\n      _options.tracingOrigins &&\n      Array.isArray(_options.tracingOrigins) &&\n      _options.tracingOrigins.length !== 0\n    ) {\n      tracingOrigins = _options.tracingOrigins;\n    } else {\n      this._emitOptionsWarning = true;\n    }\n\n    this.options = {\n      ...DEFAULT_BROWSER_TRACING_OPTIONS,\n      ..._options,\n      tracingOrigins,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_: (callback: EventProcessor) => void, getCurrentHub: () => Hub): void {\n    this._getCurrentHub = getCurrentHub;\n\n    if (this._emitOptionsWarning) {\n      logger.warn(\n        '[Tracing] You need to define `tracingOrigins` in the options. Set an array of urls or patterns to trace.',\n      );\n      logger.warn(\n        `[Tracing] We added a reasonable default for you: ${defaultRequestInstrumentationOptions.tracingOrigins}`,\n      );\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const {\n      routingInstrumentation,\n      startTransactionOnLocationChange,\n      startTransactionOnPageLoad,\n      markBackgroundTransactions,\n      traceFetch,\n      traceXHR,\n      tracingOrigins,\n      shouldCreateSpanForRequest,\n    } = this.options;\n\n    routingInstrumentation(\n      (context: TransactionContext) => this._createRouteTransaction(context),\n      startTransactionOnPageLoad,\n      startTransactionOnLocationChange,\n    );\n\n    if (markBackgroundTransactions) {\n      registerBackgroundTabDetection();\n    }\n\n    registerRequestInstrumentation({ traceFetch, traceXHR, tracingOrigins, shouldCreateSpanForRequest });\n  }\n\n  /** Create routing idle transaction. */\n  private _createRouteTransaction(context: TransactionContext): Transaction | undefined {\n    if (!this._getCurrentHub) {\n      logger.warn(`[Tracing] Did not create ${context.op} transaction because _getCurrentHub is invalid.`);\n      return undefined;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeNavigate, idleTimeout, maxTransactionDuration } = this.options;\n\n    const parentContextFromHeader = context.op === 'pageload' ? getHeaderContext() : undefined;\n\n    const expandedContext = {\n      ...context,\n      ...parentContextFromHeader,\n      trimEnd: true,\n    };\n    const modifiedContext = typeof beforeNavigate === 'function' ? beforeNavigate(expandedContext) : expandedContext;\n\n    // For backwards compatibility reasons, beforeNavigate can return undefined to \"drop\" the transaction (prevent it\n    // from being sent to Sentry).\n    const finalContext = modifiedContext === undefined ? { ...expandedContext, sampled: false } : modifiedContext;\n\n    if (finalContext.sampled === false) {\n      logger.log(`[Tracing] Will not send ${finalContext.op} transaction because of beforeNavigate.`);\n    }\n\n    const hub = this._getCurrentHub();\n    const idleTransaction = startIdleTransaction(hub, finalContext, idleTimeout, true);\n    logger.log(`[Tracing] Starting ${finalContext.op} transaction on scope`);\n    idleTransaction.registerBeforeFinishCallback((transaction, endTimestamp) => {\n      this._metrics.addPerformanceEntries(transaction);\n      adjustTransactionDuration(secToMs(maxTransactionDuration), transaction, endTimestamp);\n    });\n\n    return idleTransaction as Transaction;\n  }\n}\n\n/**\n * Gets transaction context from a sentry-trace meta.\n *\n * @returns Transaction context data from the header or undefined if there's no header or the header is malformed\n */\nexport function getHeaderContext(): Partial<TransactionContext> | undefined {\n  const header = getMetaContent('sentry-trace');\n  if (header) {\n    return extractTraceparentData(header);\n  }\n\n  return undefined;\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | null {\n  const el = document.querySelector(`meta[name=${metaName}]`);\n  return el ? el.getAttribute('content') : null;\n}\n\n/** Adjusts transaction value based on max transaction duration */\nfunction adjustTransactionDuration(maxDuration: number, transaction: IdleTransaction, endTimestamp: number): void {\n  const diff = endTimestamp - transaction.startTimestamp;\n  const isOutdatedTransaction = endTimestamp && (diff > maxDuration || diff < 0);\n  if (isOutdatedTransaction) {\n    transaction.setStatus(SpanStatus.DeadlineExceeded);\n    transaction.setTag('maxTransactionDurationExceeded', 'true');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}