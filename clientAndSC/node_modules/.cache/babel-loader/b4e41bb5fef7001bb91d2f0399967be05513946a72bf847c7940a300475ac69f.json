{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  Object.defineProperty(o, k2, {\n    enumerable: true,\n    get: function () {\n      return m[k];\n    }\n  });\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OverriddenTaskDefinition = exports.SimpleTaskDefinition = void 0;\nconst errors_1 = require(\"../errors\");\nconst errors_list_1 = require(\"../errors-list\");\nconst types = __importStar(require(\"../params/argumentTypes\"));\nconst hardhat_params_1 = require(\"../params/hardhat-params\");\nfunction isCLIArgumentType(type) {\n  return \"parse\" in type;\n}\n/**\n * This class creates a task definition, which consists of:\n * * a name, that should be unique and will be used to call the task.\n * * a description. This is optional.\n * * the action that the task will execute.\n * * a set of parameters that can be used by the action.\n *\n */\nclass SimpleTaskDefinition {\n  /**\n   * Creates an empty task definition.\n   *\n   * This definition will have no params, and will throw a HH205 if executed.\n   *\n   * @param name The task's name.\n   * @param isSubtask `true` if the task is a subtask, `false` otherwise.\n   */\n  constructor(name) {\n    let isSubtask = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.name = name;\n    this.isSubtask = isSubtask;\n    this.paramDefinitions = {};\n    this.positionalParamDefinitions = [];\n    this._positionalParamNames = new Set();\n    this._hasVariadicParam = false;\n    this._hasOptionalPositionalParam = false;\n    this.action = () => {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.ACTION_NOT_SET, {\n        taskName: name\n      });\n    };\n  }\n  get description() {\n    return this._description;\n  }\n  /**\n   * Sets the task's description.\n   * @param description The description.\n   */\n  setDescription(description) {\n    this._description = description;\n    return this;\n  }\n  /**\n   * Sets the task's action.\n   * @param action The action.\n   */\n  setAction(action) {\n    // TODO: There's probably something bad here. See types.ts for more info.\n    this.action = action;\n    return this;\n  }\n  /**\n   * Adds a parameter to the task's definition.\n   *\n   * @remarks This will throw if the `name` is already used by this task or\n   * by Hardhat's global parameters.\n   *\n   * @param name The parameter's name.\n   * @param description The parameter's description.\n   * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n   * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n   * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n   */\n  addParam(name, description, defaultValue, type) {\n    let isOptional = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultValue !== undefined;\n    if (type === undefined) {\n      if (defaultValue === undefined) {\n        return this.addParam(name, description, undefined, types.string, isOptional);\n      }\n      if (typeof defaultValue !== \"string\") {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n          paramName: name,\n          taskName: this.name\n        });\n      }\n      return this.addParam(name, description, defaultValue, types.string, isOptional);\n    }\n    this._validateParamNameCasing(name);\n    this._validateNameNotUsed(name);\n    this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n    this._validateCLIArgumentTypesForExternalTasks(type);\n    this.paramDefinitions[name] = {\n      name,\n      defaultValue,\n      type,\n      description,\n      isOptional,\n      isFlag: false,\n      isVariadic: false\n    };\n    return this;\n  }\n  /**\n   * Adds an optional parameter to the task's definition.\n   *\n   * @see addParam.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   * @param defaultValue a default value.\n   * @param type param's type.\n   */\n  addOptionalParam(name, description, defaultValue, type) {\n    return this.addParam(name, description, defaultValue, type, true);\n  }\n  /**\n   * Adds a boolean parameter or flag to the task's definition.\n   *\n   * Flags are params with default value set to `false`, and that don't expect\n   * values to be set in the CLI. A normal boolean param must be called with\n   * `--param true`, while a flag is called with `--flag`.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   */\n  addFlag(name, description) {\n    this._validateParamNameCasing(name);\n    this._validateNameNotUsed(name);\n    this.paramDefinitions[name] = {\n      name,\n      defaultValue: false,\n      type: types.boolean,\n      description,\n      isFlag: true,\n      isOptional: true,\n      isVariadic: false\n    };\n    return this;\n  }\n  /**\n   * Adds a positional parameter to the task's definition.\n   *\n   * @remarks This will throw if the `name` is already used by this task or\n   * by Hardhat's global parameters.\n   * @remarks This will throw if `isOptional` is `false` and an optional positional\n   * param was already set.\n   * @remarks This will throw if a variadic positional param is already set.\n   *\n   * @param name The parameter's name.\n   * @param description The parameter's description.\n   * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n   * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n   * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n   */\n  addPositionalParam(name, description, defaultValue, type) {\n    let isOptional = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultValue !== undefined;\n    if (type === undefined) {\n      if (defaultValue === undefined) {\n        return this.addPositionalParam(name, description, undefined, types.string, isOptional);\n      }\n      if (typeof defaultValue !== \"string\") {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n          paramName: name,\n          taskName: this.name\n        });\n      }\n      return this.addPositionalParam(name, description, defaultValue, types.string, isOptional);\n    }\n    this._validateParamNameCasing(name);\n    this._validateNameNotUsed(name);\n    this._validateNotAfterVariadicParam(name);\n    this._validateNoMandatoryParamAfterOptionalOnes(name, isOptional);\n    this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n    this._validateCLIArgumentTypesForExternalTasks(type);\n    const definition = {\n      name,\n      defaultValue,\n      type,\n      description,\n      isVariadic: false,\n      isOptional,\n      isFlag: false\n    };\n    this._addPositionalParamDefinition(definition);\n    return this;\n  }\n  /**\n   * Adds an optional positional parameter to the task's definition.\n   *\n   * @see addPositionalParam.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   * @param defaultValue a default value.\n   * @param type param's type.\n   */\n  addOptionalPositionalParam(name, description, defaultValue, type) {\n    return this.addPositionalParam(name, description, defaultValue, type, true);\n  }\n  /**\n   * Adds a variadic positional parameter to the task's definition. Variadic\n   * positional params act as `...rest` parameters in JavaScript.\n   *\n   * @param name The parameter's name.\n   * @param description The parameter's description.\n   * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n   * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n   * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n   */\n  addVariadicPositionalParam(name, description, defaultValue, type) {\n    let isOptional = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : defaultValue !== undefined;\n    if (defaultValue !== undefined && !Array.isArray(defaultValue)) {\n      defaultValue = [defaultValue];\n    }\n    if (type === undefined) {\n      if (defaultValue === undefined) {\n        return this.addVariadicPositionalParam(name, description, undefined, types.string, isOptional);\n      }\n      if (!this._isStringArray(defaultValue)) {\n        throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE, {\n          paramName: name,\n          taskName: this.name\n        });\n      }\n      return this.addVariadicPositionalParam(name, description, defaultValue, types.string, isOptional);\n    }\n    this._validateParamNameCasing(name);\n    this._validateNameNotUsed(name);\n    this._validateNotAfterVariadicParam(name);\n    this._validateNoMandatoryParamAfterOptionalOnes(name, isOptional);\n    this._validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name);\n    this._validateCLIArgumentTypesForExternalTasks(type);\n    const definition = {\n      name,\n      defaultValue,\n      type,\n      description,\n      isVariadic: true,\n      isOptional,\n      isFlag: false\n    };\n    this._addPositionalParamDefinition(definition);\n    return this;\n  }\n  /**\n   * Adds a positional parameter to the task's definition.\n   *\n   * This will check if the `name` is already used and\n   * if the parameter is being added after a varidic argument.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   * @param defaultValue a default value.\n   * @param type param's type.\n   */\n  addOptionalVariadicPositionalParam(name, description, defaultValue, type) {\n    return this.addVariadicPositionalParam(name, description, defaultValue, type, true);\n  }\n  /**\n   * Adds a positional parameter to the task's definition.\n   *\n   * @param definition the param's definition\n   */\n  _addPositionalParamDefinition(definition) {\n    if (definition.isVariadic) {\n      this._hasVariadicParam = true;\n    }\n    if (definition.isOptional) {\n      this._hasOptionalPositionalParam = true;\n    }\n    this._positionalParamNames.add(definition.name);\n    this.positionalParamDefinitions.push(definition);\n  }\n  /**\n   * Validates if the given param's name is after a variadic parameter.\n   * @param name the param's name.\n   * @throws HH200\n   */\n  _validateNotAfterVariadicParam(name) {\n    if (this._hasVariadicParam) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_AFTER_VARIADIC, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n  }\n  /**\n   * Validates if the param's name is already used.\n   * @param name the param's name.\n   *\n   * @throws HH201 if `name` is already used as a param.\n   * @throws HH202 if `name` is already used as a param by Hardhat\n   */\n  _validateNameNotUsed(name) {\n    if (this._hasParamDefined(name)) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_ALREADY_DEFINED, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n    if (Object.keys(hardhat_params_1.HARDHAT_PARAM_DEFINITIONS).includes(name)) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.PARAM_CLASHES_WITH_HARDHAT_PARAM, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n  }\n  /**\n   * Checks if the given name is already used.\n   * @param name the param's name.\n   */\n  _hasParamDefined(name) {\n    return this.paramDefinitions[name] !== undefined || this._positionalParamNames.has(name);\n  }\n  /**\n   * Validates if a mandatory param is being added after optional params.\n   *\n   * @param name the param's name to be added.\n   * @param isOptional true if the new param is optional, false otherwise.\n   *\n   * @throws HH203 if validation fail\n   */\n  _validateNoMandatoryParamAfterOptionalOnes(name, isOptional) {\n    if (!isOptional && this._hasOptionalPositionalParam) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.MANDATORY_PARAM_AFTER_OPTIONAL, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n  }\n  _validateParamNameCasing(name) {\n    const pattern = /^[a-z]+([a-zA-Z0-9])*$/;\n    const match = name.match(pattern);\n    if (match === null) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.INVALID_PARAM_NAME_CASING, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n  }\n  _validateNoDefaultValueForMandatoryParam(defaultValue, isOptional, name) {\n    if (defaultValue !== undefined && !isOptional) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.DEFAULT_IN_MANDATORY_PARAM, {\n        paramName: name,\n        taskName: this.name\n      });\n    }\n  }\n  _isStringArray(values) {\n    return Array.isArray(values) && values.every(v => typeof v === \"string\");\n  }\n  _validateCLIArgumentTypesForExternalTasks(type) {\n    if (this.isSubtask) {\n      return;\n    }\n    if (!isCLIArgumentType(type)) {\n      throw new errors_1.HardhatError(errors_list_1.ERRORS.TASK_DEFINITIONS.CLI_ARGUMENT_TYPE_REQUIRED, {\n        task: this.name,\n        type: type.name\n      });\n    }\n  }\n}\nexports.SimpleTaskDefinition = SimpleTaskDefinition;\n/**\n * Allows you to override a previously defined task.\n *\n * When overriding a task you can:\n *  * flag it as a subtask\n *  * set a new description\n *  * set a new action\n *\n */\nclass OverriddenTaskDefinition {\n  constructor(parentTaskDefinition) {\n    let isSubtask = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.parentTaskDefinition = parentTaskDefinition;\n    this.isSubtask = isSubtask;\n    this.isSubtask = isSubtask;\n    this.parentTaskDefinition = parentTaskDefinition;\n  }\n  setDescription(description) {\n    this._description = description;\n    return this;\n  }\n  /**\n   * Overrides the parent task's action.\n   * @param action the action.\n   */\n  setAction(action) {\n    // TODO: There's probably something bad here. See types.ts for more info.\n    this._action = action;\n    return this;\n  }\n  /**\n   * Retrieves the parent task's name.\n   */\n  get name() {\n    return this.parentTaskDefinition.name;\n  }\n  /**\n   * Retrieves, if defined, the description of the overriden task,\n   * otherwise retrieves the description of the parent task.\n   */\n  get description() {\n    if (this._description !== undefined) {\n      return this._description;\n    }\n    return this.parentTaskDefinition.description;\n  }\n  /**\n   * Retrieves, if defined, the action of the overriden task,\n   * otherwise retrieves the action of the parent task.\n   */\n  get action() {\n    if (this._action !== undefined) {\n      return this._action;\n    }\n    return this.parentTaskDefinition.action;\n  }\n  /**\n   * Retrieves the parent task's param definitions.\n   */\n  get paramDefinitions() {\n    return this.parentTaskDefinition.paramDefinitions;\n  }\n  /**\n   * Retrieves the parent task's positional param definitions.\n   */\n  get positionalParamDefinitions() {\n    return this.parentTaskDefinition.positionalParamDefinitions;\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  addParam(name, description, defaultValue, type, isOptional) {\n    if (isOptional === undefined || !isOptional) {\n      return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_MANDATORY_PARAMS);\n    }\n    return this.addOptionalParam(name, description, defaultValue, type);\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  addOptionalParam(name, description, defaultValue, type) {\n    this.parentTaskDefinition.addOptionalParam(name, description, defaultValue, type);\n    return this;\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  addPositionalParam(_name, _description, _defaultValue, _type, _isOptional) {\n    return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_POSITIONAL_PARAMS);\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  addOptionalPositionalParam(_name, _description, _defaultValue, _type) {\n    return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_POSITIONAL_PARAMS);\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  addVariadicPositionalParam(_name, _description, _defaultValue, _type, _isOptional) {\n    return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_VARIADIC_PARAMS);\n  }\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  addOptionalVariadicPositionalParam(_name, _description, _defaultValue, _type) {\n    return this._throwNoParamsOverrideError(errors_list_1.ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_VARIADIC_PARAMS);\n  }\n  /**\n   * Add a flag param to the overridden task.\n   * @throws HH201 if param name was already defined in any parent task.\n   * @throws HH209 if param name is not in camelCase.\n   */\n  addFlag(name, description) {\n    this.parentTaskDefinition.addFlag(name, description);\n    return this;\n  }\n  _throwNoParamsOverrideError(errorDescriptor) {\n    throw new errors_1.HardhatError(errorDescriptor, {\n      taskName: this.name\n    });\n  }\n}\nexports.OverriddenTaskDefinition = OverriddenTaskDefinition;","map":{"version":3,"mappings":"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","names":["isCLIArgumentType","type","SimpleTaskDefinition","constructor","name","isSubtask","_positionalParamNames","Set","_hasVariadicParam","_hasOptionalPositionalParam","action","errors_1","errors_list_1","TASK_DEFINITIONS","ACTION_NOT_SET","taskName","description","_description","setDescription","setAction","addParam","defaultValue","isOptional","undefined","types","string","DEFAULT_VALUE_WRONG_TYPE","paramName","_validateParamNameCasing","_validateNameNotUsed","_validateNoDefaultValueForMandatoryParam","_validateCLIArgumentTypesForExternalTasks","paramDefinitions","isFlag","isVariadic","addOptionalParam","addFlag","boolean","addPositionalParam","_validateNotAfterVariadicParam","_validateNoMandatoryParamAfterOptionalOnes","definition","_addPositionalParamDefinition","addOptionalPositionalParam","addVariadicPositionalParam","Array","isArray","_isStringArray","addOptionalVariadicPositionalParam","add","positionalParamDefinitions","push","PARAM_AFTER_VARIADIC","_hasParamDefined","PARAM_ALREADY_DEFINED","Object","keys","hardhat_params_1","includes","PARAM_CLASHES_WITH_HARDHAT_PARAM","has","MANDATORY_PARAM_AFTER_OPTIONAL","pattern","match","INVALID_PARAM_NAME_CASING","DEFAULT_IN_MANDATORY_PARAM","values","every","v","CLI_ARGUMENT_TYPE_REQUIRED","task","exports","OverriddenTaskDefinition","parentTaskDefinition","_action","_throwNoParamsOverrideError","OVERRIDE_NO_MANDATORY_PARAMS","_name","_defaultValue","_type","_isOptional","OVERRIDE_NO_POSITIONAL_PARAMS","OVERRIDE_NO_VARIADIC_PARAMS","errorDescriptor"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/hardhat/src/internal/core/tasks/task-definitions.ts"],"sourcesContent":["import {\n  ActionType,\n  ArgumentType,\n  CLIArgumentType,\n  ParamDefinition,\n  ParamDefinitionsMap,\n  TaskArguments,\n  TaskDefinition,\n} from \"../../../types\";\nimport { HardhatError } from \"../errors\";\nimport { ErrorDescriptor, ERRORS } from \"../errors-list\";\nimport * as types from \"../params/argumentTypes\";\nimport { HARDHAT_PARAM_DEFINITIONS } from \"../params/hardhat-params\";\n\nfunction isCLIArgumentType(\n  type: ArgumentType<any>\n): type is CLIArgumentType<any> {\n  return \"parse\" in type;\n}\n/**\n * This class creates a task definition, which consists of:\n * * a name, that should be unique and will be used to call the task.\n * * a description. This is optional.\n * * the action that the task will execute.\n * * a set of parameters that can be used by the action.\n *\n */\nexport class SimpleTaskDefinition implements TaskDefinition {\n  public get description() {\n    return this._description;\n  }\n  public readonly paramDefinitions: ParamDefinitionsMap = {};\n  public readonly positionalParamDefinitions: Array<ParamDefinition<any>> = [];\n  public action: ActionType<TaskArguments>;\n\n  private _positionalParamNames: Set<string>;\n  private _hasVariadicParam: boolean;\n  private _hasOptionalPositionalParam: boolean;\n  private _description?: string;\n\n  /**\n   * Creates an empty task definition.\n   *\n   * This definition will have no params, and will throw a HH205 if executed.\n   *\n   * @param name The task's name.\n   * @param isSubtask `true` if the task is a subtask, `false` otherwise.\n   */\n  constructor(\n    public readonly name: string,\n    public readonly isSubtask: boolean = false\n  ) {\n    this._positionalParamNames = new Set();\n    this._hasVariadicParam = false;\n    this._hasOptionalPositionalParam = false;\n    this.action = () => {\n      throw new HardhatError(ERRORS.TASK_DEFINITIONS.ACTION_NOT_SET, {\n        taskName: name,\n      });\n    };\n  }\n\n  /**\n   * Sets the task's description.\n   * @param description The description.\n   */\n  public setDescription(description: string) {\n    this._description = description;\n    return this;\n  }\n\n  /**\n   * Sets the task's action.\n   * @param action The action.\n   */\n  public setAction<ArgsT extends TaskArguments>(action: ActionType<ArgsT>) {\n    // TODO: There's probably something bad here. See types.ts for more info.\n    this.action = action;\n    return this;\n  }\n\n  /**\n   * Adds a parameter to the task's definition.\n   *\n   * @remarks This will throw if the `name` is already used by this task or\n   * by Hardhat's global parameters.\n   *\n   * @param name The parameter's name.\n   * @param description The parameter's description.\n   * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n   * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n   * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n   */\n  public addParam<T>(\n    name: string,\n    description?: string,\n    defaultValue?: T,\n    type?: ArgumentType<T>,\n    isOptional: boolean = defaultValue !== undefined\n  ): this {\n    if (type === undefined) {\n      if (defaultValue === undefined) {\n        return this.addParam(\n          name,\n          description,\n          undefined,\n          types.string,\n          isOptional\n        );\n      }\n\n      if (typeof defaultValue !== \"string\") {\n        throw new HardhatError(\n          ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE,\n          {\n            paramName: name,\n            taskName: this.name,\n          }\n        );\n      }\n\n      return this.addParam(\n        name,\n        description,\n        defaultValue,\n        types.string,\n        isOptional\n      );\n    }\n\n    this._validateParamNameCasing(name);\n    this._validateNameNotUsed(name);\n    this._validateNoDefaultValueForMandatoryParam(\n      defaultValue,\n      isOptional,\n      name\n    );\n    this._validateCLIArgumentTypesForExternalTasks(type);\n\n    this.paramDefinitions[name] = {\n      name,\n      defaultValue,\n      type,\n      description,\n      isOptional,\n      isFlag: false,\n      isVariadic: false,\n    };\n\n    return this;\n  }\n\n  /**\n   * Adds an optional parameter to the task's definition.\n   *\n   * @see addParam.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   * @param defaultValue a default value.\n   * @param type param's type.\n   */\n  public addOptionalParam<T>(\n    name: string,\n    description?: string,\n    defaultValue?: T,\n    type?: ArgumentType<T>\n  ): this {\n    return this.addParam(name, description, defaultValue, type, true);\n  }\n\n  /**\n   * Adds a boolean parameter or flag to the task's definition.\n   *\n   * Flags are params with default value set to `false`, and that don't expect\n   * values to be set in the CLI. A normal boolean param must be called with\n   * `--param true`, while a flag is called with `--flag`.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   */\n  public addFlag(name: string, description?: string) {\n    this._validateParamNameCasing(name);\n    this._validateNameNotUsed(name);\n\n    this.paramDefinitions[name] = {\n      name,\n      defaultValue: false,\n      type: types.boolean,\n      description,\n      isFlag: true,\n      isOptional: true,\n      isVariadic: false,\n    };\n\n    return this;\n  }\n\n  /**\n   * Adds a positional parameter to the task's definition.\n   *\n   * @remarks This will throw if the `name` is already used by this task or\n   * by Hardhat's global parameters.\n   * @remarks This will throw if `isOptional` is `false` and an optional positional\n   * param was already set.\n   * @remarks This will throw if a variadic positional param is already set.\n   *\n   * @param name The parameter's name.\n   * @param description The parameter's description.\n   * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n   * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n   * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n   */\n  public addPositionalParam<T>(\n    name: string,\n    description?: string,\n    defaultValue?: T,\n    type?: ArgumentType<T>,\n    isOptional = defaultValue !== undefined\n  ): this {\n    if (type === undefined) {\n      if (defaultValue === undefined) {\n        return this.addPositionalParam(\n          name,\n          description,\n          undefined,\n          types.string,\n          isOptional\n        );\n      }\n\n      if (typeof defaultValue !== \"string\") {\n        throw new HardhatError(\n          ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE,\n          {\n            paramName: name,\n            taskName: this.name,\n          }\n        );\n      }\n\n      return this.addPositionalParam(\n        name,\n        description,\n        defaultValue,\n        types.string,\n        isOptional\n      );\n    }\n\n    this._validateParamNameCasing(name);\n    this._validateNameNotUsed(name);\n    this._validateNotAfterVariadicParam(name);\n    this._validateNoMandatoryParamAfterOptionalOnes(name, isOptional);\n    this._validateNoDefaultValueForMandatoryParam(\n      defaultValue,\n      isOptional,\n      name\n    );\n    this._validateCLIArgumentTypesForExternalTasks(type);\n\n    const definition = {\n      name,\n      defaultValue,\n      type,\n      description,\n      isVariadic: false,\n      isOptional,\n      isFlag: false,\n    };\n\n    this._addPositionalParamDefinition(definition);\n\n    return this;\n  }\n\n  /**\n   * Adds an optional positional parameter to the task's definition.\n   *\n   * @see addPositionalParam.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   * @param defaultValue a default value.\n   * @param type param's type.\n   */\n  public addOptionalPositionalParam<T>(\n    name: string,\n    description?: string,\n    defaultValue?: T,\n    type?: ArgumentType<T>\n  ): this {\n    return this.addPositionalParam(name, description, defaultValue, type, true);\n  }\n\n  /**\n   * Adds a variadic positional parameter to the task's definition. Variadic\n   * positional params act as `...rest` parameters in JavaScript.\n   *\n   * @param name The parameter's name.\n   * @param description The parameter's description.\n   * @param defaultValue A default value. This must be `undefined` if `isOptional` is `true`.\n   * @param type The param's `ArgumentType`. It will parse and validate the user's input.\n   * @param isOptional `true` if the parameter is optional. It's default value is `true` if `defaultValue` is not `undefined`.\n   */\n  public addVariadicPositionalParam<T>(\n    name: string,\n    description?: string,\n    defaultValue?: T[] | T,\n    type?: ArgumentType<T>,\n    isOptional = defaultValue !== undefined\n  ): this {\n    if (defaultValue !== undefined && !Array.isArray(defaultValue)) {\n      defaultValue = [defaultValue];\n    }\n\n    if (type === undefined) {\n      if (defaultValue === undefined) {\n        return this.addVariadicPositionalParam(\n          name,\n          description,\n          undefined,\n          types.string,\n          isOptional\n        );\n      }\n\n      if (!this._isStringArray(defaultValue)) {\n        throw new HardhatError(\n          ERRORS.TASK_DEFINITIONS.DEFAULT_VALUE_WRONG_TYPE,\n          {\n            paramName: name,\n            taskName: this.name,\n          }\n        );\n      }\n\n      return this.addVariadicPositionalParam(\n        name,\n        description,\n        defaultValue,\n        types.string,\n        isOptional\n      );\n    }\n\n    this._validateParamNameCasing(name);\n    this._validateNameNotUsed(name);\n    this._validateNotAfterVariadicParam(name);\n    this._validateNoMandatoryParamAfterOptionalOnes(name, isOptional);\n    this._validateNoDefaultValueForMandatoryParam(\n      defaultValue,\n      isOptional,\n      name\n    );\n    this._validateCLIArgumentTypesForExternalTasks(type);\n\n    const definition = {\n      name,\n      defaultValue,\n      type,\n      description,\n      isVariadic: true,\n      isOptional,\n      isFlag: false,\n    };\n\n    this._addPositionalParamDefinition(definition);\n\n    return this;\n  }\n\n  /**\n   * Adds a positional parameter to the task's definition.\n   *\n   * This will check if the `name` is already used and\n   * if the parameter is being added after a varidic argument.\n   *\n   * @param name the parameter's name.\n   * @param description the parameter's description.\n   * @param defaultValue a default value.\n   * @param type param's type.\n   */\n  public addOptionalVariadicPositionalParam<T>(\n    name: string,\n    description?: string,\n    defaultValue?: T[] | T,\n    type?: ArgumentType<T>\n  ): this {\n    return this.addVariadicPositionalParam(\n      name,\n      description,\n      defaultValue,\n      type,\n      true\n    );\n  }\n\n  /**\n   * Adds a positional parameter to the task's definition.\n   *\n   * @param definition the param's definition\n   */\n  private _addPositionalParamDefinition(definition: ParamDefinition<any>) {\n    if (definition.isVariadic) {\n      this._hasVariadicParam = true;\n    }\n\n    if (definition.isOptional) {\n      this._hasOptionalPositionalParam = true;\n    }\n\n    this._positionalParamNames.add(definition.name);\n    this.positionalParamDefinitions.push(definition);\n  }\n\n  /**\n   * Validates if the given param's name is after a variadic parameter.\n   * @param name the param's name.\n   * @throws HH200\n   */\n  private _validateNotAfterVariadicParam(name: string) {\n    if (this._hasVariadicParam) {\n      throw new HardhatError(ERRORS.TASK_DEFINITIONS.PARAM_AFTER_VARIADIC, {\n        paramName: name,\n        taskName: this.name,\n      });\n    }\n  }\n\n  /**\n   * Validates if the param's name is already used.\n   * @param name the param's name.\n   *\n   * @throws HH201 if `name` is already used as a param.\n   * @throws HH202 if `name` is already used as a param by Hardhat\n   */\n  private _validateNameNotUsed(name: string) {\n    if (this._hasParamDefined(name)) {\n      throw new HardhatError(ERRORS.TASK_DEFINITIONS.PARAM_ALREADY_DEFINED, {\n        paramName: name,\n        taskName: this.name,\n      });\n    }\n\n    if (Object.keys(HARDHAT_PARAM_DEFINITIONS).includes(name)) {\n      throw new HardhatError(\n        ERRORS.TASK_DEFINITIONS.PARAM_CLASHES_WITH_HARDHAT_PARAM,\n        {\n          paramName: name,\n          taskName: this.name,\n        }\n      );\n    }\n  }\n\n  /**\n   * Checks if the given name is already used.\n   * @param name the param's name.\n   */\n  private _hasParamDefined(name: string) {\n    return (\n      this.paramDefinitions[name] !== undefined ||\n      this._positionalParamNames.has(name)\n    );\n  }\n\n  /**\n   * Validates if a mandatory param is being added after optional params.\n   *\n   * @param name the param's name to be added.\n   * @param isOptional true if the new param is optional, false otherwise.\n   *\n   * @throws HH203 if validation fail\n   */\n  private _validateNoMandatoryParamAfterOptionalOnes(\n    name: string,\n    isOptional: boolean\n  ) {\n    if (!isOptional && this._hasOptionalPositionalParam) {\n      throw new HardhatError(\n        ERRORS.TASK_DEFINITIONS.MANDATORY_PARAM_AFTER_OPTIONAL,\n        {\n          paramName: name,\n          taskName: this.name,\n        }\n      );\n    }\n  }\n\n  private _validateParamNameCasing(name: string) {\n    const pattern = /^[a-z]+([a-zA-Z0-9])*$/;\n    const match = name.match(pattern);\n    if (match === null) {\n      throw new HardhatError(\n        ERRORS.TASK_DEFINITIONS.INVALID_PARAM_NAME_CASING,\n        {\n          paramName: name,\n          taskName: this.name,\n        }\n      );\n    }\n  }\n\n  private _validateNoDefaultValueForMandatoryParam(\n    defaultValue: any | undefined,\n    isOptional: boolean,\n    name: string\n  ) {\n    if (defaultValue !== undefined && !isOptional) {\n      throw new HardhatError(\n        ERRORS.TASK_DEFINITIONS.DEFAULT_IN_MANDATORY_PARAM,\n        {\n          paramName: name,\n          taskName: this.name,\n        }\n      );\n    }\n  }\n\n  private _isStringArray(values: any): values is string[] {\n    return Array.isArray(values) && values.every((v) => typeof v === \"string\");\n  }\n\n  private _validateCLIArgumentTypesForExternalTasks(type: ArgumentType<any>) {\n    if (this.isSubtask) {\n      return;\n    }\n\n    if (!isCLIArgumentType(type)) {\n      throw new HardhatError(\n        ERRORS.TASK_DEFINITIONS.CLI_ARGUMENT_TYPE_REQUIRED,\n        {\n          task: this.name,\n          type: type.name,\n        }\n      );\n    }\n  }\n}\n\n/**\n * Allows you to override a previously defined task.\n *\n * When overriding a task you can:\n *  * flag it as a subtask\n *  * set a new description\n *  * set a new action\n *\n */\nexport class OverriddenTaskDefinition implements TaskDefinition {\n  private _description?: string;\n  private _action?: ActionType<TaskArguments>;\n\n  constructor(\n    public readonly parentTaskDefinition: TaskDefinition,\n    public readonly isSubtask: boolean = false\n  ) {\n    this.isSubtask = isSubtask;\n    this.parentTaskDefinition = parentTaskDefinition;\n  }\n\n  public setDescription(description: string) {\n    this._description = description;\n    return this;\n  }\n\n  /**\n   * Overrides the parent task's action.\n   * @param action the action.\n   */\n  public setAction<ArgsT extends TaskArguments>(action: ActionType<ArgsT>) {\n    // TODO: There's probably something bad here. See types.ts for more info.\n    this._action = action;\n    return this;\n  }\n\n  /**\n   * Retrieves the parent task's name.\n   */\n  public get name() {\n    return this.parentTaskDefinition.name;\n  }\n\n  /**\n   * Retrieves, if defined, the description of the overriden task,\n   * otherwise retrieves the description of the parent task.\n   */\n  public get description() {\n    if (this._description !== undefined) {\n      return this._description;\n    }\n\n    return this.parentTaskDefinition.description;\n  }\n\n  /**\n   * Retrieves, if defined, the action of the overriden task,\n   * otherwise retrieves the action of the parent task.\n   */\n  public get action() {\n    if (this._action !== undefined) {\n      return this._action;\n    }\n\n    return this.parentTaskDefinition.action;\n  }\n\n  /**\n   * Retrieves the parent task's param definitions.\n   */\n  public get paramDefinitions() {\n    return this.parentTaskDefinition.paramDefinitions;\n  }\n\n  /**\n   * Retrieves the parent task's positional param definitions.\n   */\n  public get positionalParamDefinitions() {\n    return this.parentTaskDefinition.positionalParamDefinitions;\n  }\n\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  public addParam<T>(\n    name: string,\n    description?: string,\n    defaultValue?: T,\n    type?: ArgumentType<T>,\n    isOptional?: boolean\n  ): this {\n    if (isOptional === undefined || !isOptional) {\n      return this._throwNoParamsOverrideError(\n        ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_MANDATORY_PARAMS\n      );\n    }\n    return this.addOptionalParam(name, description, defaultValue, type);\n  }\n\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  public addOptionalParam<T>(\n    name: string,\n    description?: string,\n    defaultValue?: T,\n    type?: ArgumentType<T>\n  ): this {\n    this.parentTaskDefinition.addOptionalParam(\n      name,\n      description,\n      defaultValue,\n      type\n    );\n    return this;\n  }\n\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  public addPositionalParam<T>(\n    _name: string,\n    _description?: string,\n    _defaultValue?: T,\n    _type?: ArgumentType<T>,\n    _isOptional?: boolean\n  ): this {\n    return this._throwNoParamsOverrideError(\n      ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_POSITIONAL_PARAMS\n    );\n  }\n\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  public addOptionalPositionalParam<T>(\n    _name: string,\n    _description?: string,\n    _defaultValue?: T,\n    _type?: ArgumentType<T>\n  ): this {\n    return this._throwNoParamsOverrideError(\n      ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_POSITIONAL_PARAMS\n    );\n  }\n\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  public addVariadicPositionalParam<T>(\n    _name: string,\n    _description?: string,\n    _defaultValue?: T[],\n    _type?: ArgumentType<T>,\n    _isOptional?: boolean\n  ): this {\n    return this._throwNoParamsOverrideError(\n      ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_VARIADIC_PARAMS\n    );\n  }\n\n  /**\n   * Overriden tasks can't add new parameters.\n   */\n  public addOptionalVariadicPositionalParam<T>(\n    _name: string,\n    _description?: string,\n    _defaultValue?: T[],\n    _type?: ArgumentType<T>\n  ): this {\n    return this._throwNoParamsOverrideError(\n      ERRORS.TASK_DEFINITIONS.OVERRIDE_NO_VARIADIC_PARAMS\n    );\n  }\n\n  /**\n   * Add a flag param to the overridden task.\n   * @throws HH201 if param name was already defined in any parent task.\n   * @throws HH209 if param name is not in camelCase.\n   */\n  public addFlag(name: string, description?: string): this {\n    this.parentTaskDefinition.addFlag(name, description);\n    return this;\n  }\n\n  private _throwNoParamsOverrideError(errorDescriptor: ErrorDescriptor): never {\n    throw new HardhatError(errorDescriptor, {\n      taskName: this.name,\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}