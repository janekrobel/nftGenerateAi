{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createModuleTypeClassifier = void 0;\nconst ts_internals_1 = require(\"./ts-internals\");\nconst util_1 = require(\"./util\");\n/**\n * @internal\n * May receive non-normalized options -- basePath and patterns -- and will normalize them\n * internally.\n * However, calls to `classifyModule` must pass pre-normalized paths!\n */\nfunction createModuleTypeClassifier(options) {\n  const {\n    patterns,\n    basePath: _basePath\n  } = options;\n  const basePath = _basePath !== undefined ? (0, util_1.normalizeSlashes)(_basePath).replace(/\\/$/, '') : undefined;\n  const patternTypePairs = Object.entries(patterns !== null && patterns !== void 0 ? patterns : []).map(_ref => {\n    let [_pattern, type] = _ref;\n    const pattern = (0, util_1.normalizeSlashes)(_pattern);\n    return {\n      pattern: parsePattern(basePath, pattern),\n      type\n    };\n  });\n  const classifications = {\n    package: {\n      moduleType: 'auto'\n    },\n    cjs: {\n      moduleType: 'cjs'\n    },\n    esm: {\n      moduleType: 'esm'\n    }\n  };\n  const auto = classifications.package;\n  // Passed path must be normalized!\n  function classifyModuleNonCached(path) {\n    const matched = matchPatterns(patternTypePairs, _ => _.pattern, path);\n    if (matched) return classifications[matched.type];\n    return auto;\n  }\n  const classifyModule = (0, util_1.cachedLookup)(classifyModuleNonCached);\n  function classifyModuleAuto(path) {\n    return auto;\n  }\n  return {\n    classifyModuleByModuleTypeOverrides: patternTypePairs.length ? classifyModule : classifyModuleAuto\n  };\n}\nexports.createModuleTypeClassifier = createModuleTypeClassifier;\nfunction parsePattern(basePath, patternString) {\n  const pattern = (0, ts_internals_1.getPatternFromSpec)(patternString, basePath);\n  return pattern !== undefined ? new RegExp(pattern) : /(?:)/;\n}\nfunction matchPatterns(objects, getPattern, candidate) {\n  for (let i = objects.length - 1; i >= 0; i--) {\n    const object = objects[i];\n    const pattern = getPattern(object);\n    if (pattern === null || pattern === void 0 ? void 0 : pattern.test(candidate)) {\n      return object;\n    }\n  }\n}","map":{"version":3,"mappings":";;;;;;AACA;AACA;AAwBA;;;;;;AAMA,SAAgBA,0BAA0B,CACxCC,OAAoC;EAEpC,MAAM;IAAEC,QAAQ;IAAEC,QAAQ,EAAEC;EAAS,CAAE,GAAGH,OAAO;EACjD,MAAME,QAAQ,GACZC,SAAS,KAAKC,SAAS,GACnB,2BAAgB,EAACD,SAAS,CAAC,CAACE,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,GAC9CD,SAAS;EAEf,MAAME,gBAAgB,GAAGC,MAAM,CAACC,OAAO,CAACP,QAAQ,aAARA,QAAQ,cAARA,QAAQ,GAAI,EAAE,CAAC,CAACQ,GAAG,CACzD,QAAqB;IAAA,IAApB,CAACC,QAAQ,EAAEC,IAAI,CAAC;IACf,MAAMC,OAAO,GAAG,2BAAgB,EAACF,QAAQ,CAAC;IAC1C,OAAO;MAAEE,OAAO,EAAEC,YAAY,CAACX,QAAS,EAAEU,OAAO,CAAC;MAAED;IAAI,CAAE;EAC5D,CAAC,CACF;EAED,MAAMG,eAAe,GACnB;IACEC,OAAO,EAAE;MACPC,UAAU,EAAE;KACb;IACDC,GAAG,EAAE;MACHD,UAAU,EAAE;KACb;IACDE,GAAG,EAAE;MACHF,UAAU,EAAE;;GAEf;EACH,MAAMG,IAAI,GAAGL,eAAe,CAACC,OAAO;EAEpC;EACA,SAASK,uBAAuB,CAACC,IAAY;IAC3C,MAAMC,OAAO,GAAGC,aAAa,CAACjB,gBAAgB,EAAGkB,CAAC,IAAKA,CAAC,CAACZ,OAAO,EAAES,IAAI,CAAC;IACvE,IAAIC,OAAO,EAAE,OAAOR,eAAe,CAACQ,OAAO,CAACX,IAAI,CAAC;IACjD,OAAOQ,IAAI;EACb;EAEA,MAAMM,cAAc,GAAG,uBAAY,EAACL,uBAAuB,CAAC;EAE5D,SAASM,kBAAkB,CAACL,IAAY;IACtC,OAAOF,IAAI;EACb;EAEA,OAAO;IACLQ,mCAAmC,EAAErB,gBAAgB,CAACsB,MAAM,GACxDH,cAAc,GACdC;GACL;AACH;AAhDAG;AAkDA,SAAShB,YAAY,CAACX,QAAgB,EAAE4B,aAAqB;EAC3D,MAAMlB,OAAO,GAAG,qCAAkB,EAACkB,aAAa,EAAE5B,QAAQ,CAAC;EAC3D,OAAOU,OAAO,KAAKR,SAAS,GAAG,IAAI2B,MAAM,CAACnB,OAAO,CAAC,GAAG,MAAM;AAC7D;AAEA,SAASW,aAAa,CACpBS,OAAY,EACZC,UAA4B,EAC5BC,SAAiB;EAEjB,KAAK,IAAIC,CAAC,GAAGH,OAAO,CAACJ,MAAM,GAAG,CAAC,EAAEO,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC5C,MAAMC,MAAM,GAAGJ,OAAO,CAACG,CAAC,CAAC;IACzB,MAAMvB,OAAO,GAAGqB,UAAU,CAACG,MAAM,CAAC;IAElC,IAAIxB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEyB,IAAI,CAACH,SAAS,CAAC,EAAE;MAC5B,OAAOE,MAAM;;;AAGnB","names":["createModuleTypeClassifier","options","patterns","basePath","_basePath","undefined","replace","patternTypePairs","Object","entries","map","_pattern","type","pattern","parsePattern","classifications","package","moduleType","cjs","esm","auto","classifyModuleNonCached","path","matched","matchPatterns","_","classifyModule","classifyModuleAuto","classifyModuleByModuleTypeOverrides","length","exports","patternString","RegExp","objects","getPattern","candidate","i","object","test"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ts-node/src/module-type-classifier.ts"],"sourcesContent":["import type { ModuleTypeOverride, ModuleTypes } from '.';\nimport { getPatternFromSpec } from './ts-internals';\nimport { cachedLookup, normalizeSlashes } from './util';\n\n// Logic to support our `moduleTypes` option, which allows overriding node's default ESM / CJS\n// classification of `.js` files based on package.json `type` field.\n\n/**\n * Seperate internal type because `auto` is clearer than `package`, but changing\n * the public API is a breaking change.\n * @internal\n */\nexport type InternalModuleTypeOverride = 'cjs' | 'esm' | 'auto';\n/** @internal */\nexport interface ModuleTypeClassification {\n  moduleType: InternalModuleTypeOverride;\n}\n/** @internal */\nexport interface ModuleTypeClassifierOptions {\n  basePath?: string;\n  patterns?: ModuleTypes;\n}\n/** @internal */\nexport type ModuleTypeClassifier = ReturnType<\n  typeof createModuleTypeClassifier\n>;\n/**\n * @internal\n * May receive non-normalized options -- basePath and patterns -- and will normalize them\n * internally.\n * However, calls to `classifyModule` must pass pre-normalized paths!\n */\nexport function createModuleTypeClassifier(\n  options: ModuleTypeClassifierOptions\n) {\n  const { patterns, basePath: _basePath } = options;\n  const basePath =\n    _basePath !== undefined\n      ? normalizeSlashes(_basePath).replace(/\\/$/, '')\n      : undefined;\n\n  const patternTypePairs = Object.entries(patterns ?? []).map(\n    ([_pattern, type]) => {\n      const pattern = normalizeSlashes(_pattern);\n      return { pattern: parsePattern(basePath!, pattern), type };\n    }\n  );\n\n  const classifications: Record<ModuleTypeOverride, ModuleTypeClassification> =\n    {\n      package: {\n        moduleType: 'auto',\n      },\n      cjs: {\n        moduleType: 'cjs',\n      },\n      esm: {\n        moduleType: 'esm',\n      },\n    };\n  const auto = classifications.package;\n\n  // Passed path must be normalized!\n  function classifyModuleNonCached(path: string): ModuleTypeClassification {\n    const matched = matchPatterns(patternTypePairs, (_) => _.pattern, path);\n    if (matched) return classifications[matched.type];\n    return auto;\n  }\n\n  const classifyModule = cachedLookup(classifyModuleNonCached);\n\n  function classifyModuleAuto(path: String) {\n    return auto;\n  }\n\n  return {\n    classifyModuleByModuleTypeOverrides: patternTypePairs.length\n      ? classifyModule\n      : classifyModuleAuto,\n  };\n}\n\nfunction parsePattern(basePath: string, patternString: string): RegExp {\n  const pattern = getPatternFromSpec(patternString, basePath);\n  return pattern !== undefined ? new RegExp(pattern) : /(?:)/;\n}\n\nfunction matchPatterns<T>(\n  objects: T[],\n  getPattern: (t: T) => RegExp,\n  candidate: string\n): T | undefined {\n  for (let i = objects.length - 1; i >= 0; i--) {\n    const object = objects[i];\n    const pattern = getPattern(object);\n\n    if (pattern?.test(candidate)) {\n      return object;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}