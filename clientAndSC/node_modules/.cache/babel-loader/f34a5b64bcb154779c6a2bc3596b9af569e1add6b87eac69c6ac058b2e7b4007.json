{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.randomBytes = void 0;\n/**\n *  A **Cryptographically Secure Random Value** is one that has been\n *  generated with additional care take to prevent side-channels\n *  from allowing others to detect it and prevent others from through\n *  coincidence generate the same values.\n *\n *  @_subsection: api/crypto:Random Values  [about-crypto-random]\n */\nconst crypto_js_1 = require(\"./crypto.js\");\nlet locked = false;\nconst _randomBytes = function (length) {\n  return new Uint8Array((0, crypto_js_1.randomBytes)(length));\n};\nlet __randomBytes = _randomBytes;\n/**\n *  Return %%length%% bytes of cryptographically secure random data.\n *\n *  @example:\n *    randomBytes(8)\n *    //_result:\n */\nfunction randomBytes(length) {\n  return __randomBytes(length);\n}\nexports.randomBytes = randomBytes;\nrandomBytes._ = _randomBytes;\nrandomBytes.lock = function () {\n  locked = true;\n};\nrandomBytes.register = function (func) {\n  if (locked) {\n    throw new Error(\"randomBytes is locked\");\n  }\n  __randomBytes = func;\n};\nObject.freeze(randomBytes);","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;AAQA;AAEA,IAAIA,MAAM,GAAG,KAAK;AAElB,MAAMC,YAAY,GAAG,UAASC,MAAc;EACxC,OAAO,IAAIC,UAAU,CAAC,2BAAa,EAACD,MAAM,CAAC,CAAC;AAChD,CAAC;AAED,IAAIE,aAAa,GAAGH,YAAY;AAEhC;;;;;;;AAOA,SAAgBI,WAAW,CAACH,MAAc;EACtC,OAAOE,aAAa,CAACF,MAAM,CAAC;AAChC;AAFAI;AAIAD,WAAW,CAACE,CAAC,GAAGN,YAAY;AAC5BI,WAAW,CAACG,IAAI,GAAG;EAAmBR,MAAM,GAAG,IAAI;AAAE,CAAC;AACtDK,WAAW,CAACI,QAAQ,GAAG,UAASC,IAAoC;EAChE,IAAIV,MAAM,EAAE;IAAE,MAAM,IAAIW,KAAK,CAAC,uBAAuB,CAAC;;EACtDP,aAAa,GAAGM,IAAI;AACxB,CAAC;AACDE,MAAM,CAACC,MAAM,CAACR,WAAW,CAAC","names":["locked","_randomBytes","length","Uint8Array","__randomBytes","randomBytes","exports","_","lock","register","func","Error","Object","freeze"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/crypto/random.ts"],"sourcesContent":["/**\n *  A **Cryptographically Secure Random Value** is one that has been\n *  generated with additional care take to prevent side-channels\n *  from allowing others to detect it and prevent others from through\n *  coincidence generate the same values.\n *\n *  @_subsection: api/crypto:Random Values  [about-crypto-random]\n */\nimport { randomBytes as crypto_random } from \"./crypto.js\";\n\nlet locked = false;\n\nconst _randomBytes = function(length: number): Uint8Array {\n    return new Uint8Array(crypto_random(length));\n}\n\nlet __randomBytes = _randomBytes;\n\n/**\n *  Return %%length%% bytes of cryptographically secure random data.\n *\n *  @example:\n *    randomBytes(8)\n *    //_result:\n */\nexport function randomBytes(length: number): Uint8Array {\n    return __randomBytes(length);\n}\n\nrandomBytes._ = _randomBytes;\nrandomBytes.lock = function(): void { locked = true; }\nrandomBytes.register = function(func: (length: number) => Uint8Array) {\n    if (locked) { throw new Error(\"randomBytes is locked\"); }\n    __randomBytes = func;\n}\nObject.freeze(randomBytes);\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}