{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.formatTransactionResponse = exports.formatTransactionReceipt = exports.formatReceiptLog = exports.formatBlock = exports.formatLog = exports.formatUint256 = exports.formatHash = exports.formatData = exports.formatBoolean = exports.object = exports.arrayOf = exports.allowNull = void 0;\n/**\n *  @_ignore\n */\nconst index_js_1 = require(\"../address/index.js\");\nconst index_js_2 = require(\"../crypto/index.js\");\nconst index_js_3 = require(\"../transaction/index.js\");\nconst index_js_4 = require(\"../utils/index.js\");\nconst BN_0 = BigInt(0);\nfunction allowNull(format, nullValue) {\n  return function (value) {\n    if (value == null) {\n      return nullValue;\n    }\n    return format(value);\n  };\n}\nexports.allowNull = allowNull;\nfunction arrayOf(format) {\n  return array => {\n    if (!Array.isArray(array)) {\n      throw new Error(\"not an array\");\n    }\n    return array.map(i => format(i));\n  };\n}\nexports.arrayOf = arrayOf;\n// Requires an object which matches a fleet of other formatters\n// Any FormatFunc may return `undefined` to have the value omitted\n// from the result object. Calls preserve `this`.\nfunction object(format, altNames) {\n  return value => {\n    const result = {};\n    for (const key in format) {\n      let srcKey = key;\n      if (altNames && key in altNames && !(srcKey in value)) {\n        for (const altKey of altNames[key]) {\n          if (altKey in value) {\n            srcKey = altKey;\n            break;\n          }\n        }\n      }\n      try {\n        const nv = format[key](value[srcKey]);\n        if (nv !== undefined) {\n          result[key] = nv;\n        }\n      } catch (error) {\n        const message = error instanceof Error ? error.message : \"not-an-error\";\n        (0, index_js_4.assert)(false, `invalid value for value.${key} (${message})`, \"BAD_DATA\", {\n          value\n        });\n      }\n    }\n    return result;\n  };\n}\nexports.object = object;\nfunction formatBoolean(value) {\n  switch (value) {\n    case true:\n    case \"true\":\n      return true;\n    case false:\n    case \"false\":\n      return false;\n  }\n  (0, index_js_4.assertArgument)(false, `invalid boolean; ${JSON.stringify(value)}`, \"value\", value);\n}\nexports.formatBoolean = formatBoolean;\nfunction formatData(value) {\n  (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, true), \"invalid data\", \"value\", value);\n  return value;\n}\nexports.formatData = formatData;\nfunction formatHash(value) {\n  (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, 32), \"invalid hash\", \"value\", value);\n  return value;\n}\nexports.formatHash = formatHash;\nfunction formatUint256(value) {\n  if (!(0, index_js_4.isHexString)(value)) {\n    throw new Error(\"invalid uint256\");\n  }\n  return (0, index_js_4.zeroPadValue)(value, 32);\n}\nexports.formatUint256 = formatUint256;\nconst _formatLog = object({\n  address: index_js_1.getAddress,\n  blockHash: formatHash,\n  blockNumber: index_js_4.getNumber,\n  data: formatData,\n  index: index_js_4.getNumber,\n  removed: formatBoolean,\n  topics: arrayOf(formatHash),\n  transactionHash: formatHash,\n  transactionIndex: index_js_4.getNumber\n}, {\n  index: [\"logIndex\"]\n});\nfunction formatLog(value) {\n  return _formatLog(value);\n}\nexports.formatLog = formatLog;\nconst _formatBlock = object({\n  hash: allowNull(formatHash),\n  parentHash: formatHash,\n  number: index_js_4.getNumber,\n  timestamp: index_js_4.getNumber,\n  nonce: allowNull(formatData),\n  difficulty: index_js_4.getBigInt,\n  gasLimit: index_js_4.getBigInt,\n  gasUsed: index_js_4.getBigInt,\n  miner: allowNull(index_js_1.getAddress),\n  extraData: formatData,\n  baseFeePerGas: allowNull(index_js_4.getBigInt)\n});\nfunction formatBlock(value) {\n  const result = _formatBlock(value);\n  result.transactions = value.transactions.map(tx => {\n    if (typeof tx === \"string\") {\n      return tx;\n    }\n    return formatTransactionResponse(tx);\n  });\n  return result;\n}\nexports.formatBlock = formatBlock;\nconst _formatReceiptLog = object({\n  transactionIndex: index_js_4.getNumber,\n  blockNumber: index_js_4.getNumber,\n  transactionHash: formatHash,\n  address: index_js_1.getAddress,\n  topics: arrayOf(formatHash),\n  data: formatData,\n  index: index_js_4.getNumber,\n  blockHash: formatHash\n}, {\n  index: [\"logIndex\"]\n});\nfunction formatReceiptLog(value) {\n  return _formatReceiptLog(value);\n}\nexports.formatReceiptLog = formatReceiptLog;\nconst _formatTransactionReceipt = object({\n  to: allowNull(index_js_1.getAddress, null),\n  from: allowNull(index_js_1.getAddress, null),\n  contractAddress: allowNull(index_js_1.getAddress, null),\n  // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n  index: index_js_4.getNumber,\n  root: allowNull(index_js_4.hexlify),\n  gasUsed: index_js_4.getBigInt,\n  logsBloom: allowNull(formatData),\n  blockHash: formatHash,\n  hash: formatHash,\n  logs: arrayOf(formatReceiptLog),\n  blockNumber: index_js_4.getNumber,\n  //confirmations: allowNull(getNumber, null),\n  cumulativeGasUsed: index_js_4.getBigInt,\n  effectiveGasPrice: allowNull(index_js_4.getBigInt),\n  status: allowNull(index_js_4.getNumber),\n  type: allowNull(index_js_4.getNumber, 0)\n}, {\n  effectiveGasPrice: [\"gasPrice\"],\n  hash: [\"transactionHash\"],\n  index: [\"transactionIndex\"]\n});\nfunction formatTransactionReceipt(value) {\n  return _formatTransactionReceipt(value);\n}\nexports.formatTransactionReceipt = formatTransactionReceipt;\nfunction formatTransactionResponse(value) {\n  // Some clients (TestRPC) do strange things like return 0x0 for the\n  // 0 address; correct this to be a real address\n  if (value.to && (0, index_js_4.getBigInt)(value.to) === BN_0) {\n    value.to = \"0x0000000000000000000000000000000000000000\";\n  }\n  const result = object({\n    hash: formatHash,\n    type: value => {\n      if (value === \"0x\" || value == null) {\n        return 0;\n      }\n      return (0, index_js_4.getNumber)(value);\n    },\n    accessList: allowNull(index_js_3.accessListify, null),\n    blockHash: allowNull(formatHash, null),\n    blockNumber: allowNull(index_js_4.getNumber, null),\n    transactionIndex: allowNull(index_js_4.getNumber, null),\n    //confirmations: allowNull(getNumber, null),\n    from: index_js_1.getAddress,\n    // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set\n    gasPrice: allowNull(index_js_4.getBigInt),\n    maxPriorityFeePerGas: allowNull(index_js_4.getBigInt),\n    maxFeePerGas: allowNull(index_js_4.getBigInt),\n    gasLimit: index_js_4.getBigInt,\n    to: allowNull(index_js_1.getAddress, null),\n    value: index_js_4.getBigInt,\n    nonce: index_js_4.getNumber,\n    data: formatData,\n    creates: allowNull(index_js_1.getAddress, null),\n    chainId: allowNull(index_js_4.getBigInt, null)\n  }, {\n    data: [\"input\"],\n    gasLimit: [\"gas\"]\n  })(value);\n  // If to and creates are empty, populate the creates from the value\n  if (result.to == null && result.creates == null) {\n    result.creates = (0, index_js_1.getCreateAddress)(result);\n  }\n  // @TODO: Check fee data\n  // Add an access list to supported transaction types\n  if ((value.type === 1 || value.type === 2) && value.accessList == null) {\n    result.accessList = [];\n  }\n  // Compute the signature\n  if (value.signature) {\n    result.signature = index_js_2.Signature.from(value.signature);\n  } else {\n    result.signature = index_js_2.Signature.from(value);\n  }\n  // Some backends omit ChainId on legacy transactions, but we can compute it\n  if (result.chainId == null) {\n    const chainId = result.signature.legacyChainId;\n    if (chainId != null) {\n      result.chainId = chainId;\n    }\n  }\n  // @TODO: check chainID\n  /*\n  if (value.chainId != null) {\n      let chainId = value.chainId;\n       if (isHexString(chainId)) {\n          chainId = BigNumber.from(chainId).toNumber();\n      }\n       result.chainId = chainId;\n   } else {\n      let chainId = value.networkId;\n       // geth-etc returns chainId\n      if (chainId == null && result.v == null) {\n          chainId = value.chainId;\n      }\n       if (isHexString(chainId)) {\n          chainId = BigNumber.from(chainId).toNumber();\n      }\n       if (typeof(chainId) !== \"number\" && result.v != null) {\n          chainId = (result.v - 35) / 2;\n          if (chainId < 0) { chainId = 0; }\n          chainId = parseInt(chainId);\n      }\n       if (typeof(chainId) !== \"number\") { chainId = 0; }\n       result.chainId = chainId;\n  }\n  */\n  // 0x0000... should actually be null\n  if (result.blockHash && (0, index_js_4.getBigInt)(result.blockHash) === BN_0) {\n    result.blockHash = null;\n  }\n  return result;\n}\nexports.formatTransactionResponse = formatTransactionResponse;","map":{"version":3,"mappings":"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","names":["BN_0","BigInt","allowNull","format","nullValue","value","exports","arrayOf","array","Array","isArray","Error","map","i","object","altNames","result","key","srcKey","altKey","nv","undefined","error","message","formatBoolean","JSON","stringify","formatData","formatHash","formatUint256","_formatLog","address","index_js_1","blockHash","blockNumber","index_js_4","data","index","removed","topics","transactionHash","transactionIndex","formatLog","_formatBlock","hash","parentHash","number","timestamp","nonce","difficulty","gasLimit","gasUsed","miner","extraData","baseFeePerGas","formatBlock","transactions","tx","formatTransactionResponse","_formatReceiptLog","formatReceiptLog","_formatTransactionReceipt","to","from","contractAddress","root","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","status","type","formatTransactionReceipt","accessList","index_js_3","gasPrice","maxPriorityFeePerGas","maxFeePerGas","creates","chainId","signature","index_js_2","legacyChainId"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/ethers/src.ts/providers/format.ts"],"sourcesContent":["/**\n *  @_ignore\n */\nimport { getAddress, getCreateAddress } from \"../address/index.js\";\nimport { Signature } from \"../crypto/index.js\"\nimport { accessListify } from \"../transaction/index.js\";\nimport {\n    getBigInt, getNumber, hexlify, isHexString, zeroPadValue,\n    assert, assertArgument\n} from \"../utils/index.js\";\n\nimport type {\n    BlockParams, LogParams,\n    TransactionReceiptParams, TransactionResponseParams,\n} from \"./formatting.js\";\n\n\nconst BN_0 = BigInt(0);\n\nexport type FormatFunc = (value: any) => any;\n\nexport function allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n    return (function(value: any) {\n        if (value == null) { return nullValue; }\n        return format(value);\n    });\n}\n\nexport function arrayOf(format: FormatFunc): FormatFunc {\n    return ((array: any) => {\n        if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n        return array.map((i) => format(i));\n    });\n}\n\n// Requires an object which matches a fleet of other formatters\n// Any FormatFunc may return `undefined` to have the value omitted\n// from the result object. Calls preserve `this`.\nexport function object(format: Record<string, FormatFunc>, altNames?: Record<string, Array<string>>): FormatFunc {\n    return ((value: any) => {\n        const result: any = { };\n        for (const key in format) {\n            let srcKey = key;\n            if (altNames && key in altNames && !(srcKey in value)) {\n                for (const altKey of altNames[key]) {\n                    if (altKey in value) {\n                        srcKey = altKey;\n                        break;\n                    }\n                }\n            }\n\n            try {\n                const nv = format[key](value[srcKey]);\n                if (nv !== undefined) { result[key] = nv; }\n            } catch (error) {\n                const message = (error instanceof Error) ? error.message: \"not-an-error\";\n                assert(false, `invalid value for value.${ key } (${ message })`, \"BAD_DATA\", { value })\n            }\n        }\n        return result;\n    });\n}\n\nexport function formatBoolean(value: any): boolean {\n    switch (value) {\n        case true: case \"true\":\n            return true;\n        case false: case \"false\":\n            return false;\n    }\n    assertArgument(false, `invalid boolean; ${ JSON.stringify(value) }`, \"value\", value);\n}\n\nexport function formatData(value: string): string {\n    assertArgument(isHexString(value, true), \"invalid data\", \"value\", value);\n    return value;\n}\n\nexport function formatHash(value: any): string {\n    assertArgument(isHexString(value, 32), \"invalid hash\", \"value\", value);\n    return value;\n}\n\nexport function formatUint256(value: any): string {\n    if (!isHexString(value)) {\n        throw new Error(\"invalid uint256\");\n    }\n    return zeroPadValue(value, 32);\n}\n\nconst _formatLog = object({\n    address: getAddress,\n    blockHash: formatHash,\n    blockNumber: getNumber,\n    data: formatData,\n    index: getNumber,\n    removed: formatBoolean,\n    topics: arrayOf(formatHash),\n    transactionHash: formatHash,\n    transactionIndex: getNumber,\n}, {\n    index: [ \"logIndex\" ]\n});\n\nexport function formatLog(value: any): LogParams {\n    return _formatLog(value);\n}\n\nconst _formatBlock = object({\n    hash: allowNull(formatHash),\n    parentHash: formatHash,\n    number: getNumber,\n\n    timestamp: getNumber,\n    nonce: allowNull(formatData),\n    difficulty: getBigInt,\n\n    gasLimit: getBigInt,\n    gasUsed: getBigInt,\n\n    miner: allowNull(getAddress),\n    extraData: formatData,\n\n    baseFeePerGas: allowNull(getBigInt)\n});\n\nexport function formatBlock(value: any): BlockParams {\n    const result = _formatBlock(value);\n    result.transactions = value.transactions.map((tx: string | TransactionResponseParams) => {\n        if (typeof(tx) === \"string\") { return tx; }\n        return formatTransactionResponse(tx);\n    });\n    return result;\n}\n\nconst _formatReceiptLog = object({\n    transactionIndex: getNumber,\n    blockNumber: getNumber,\n    transactionHash: formatHash,\n    address: getAddress,\n    topics: arrayOf(formatHash),\n    data: formatData,\n    index: getNumber,\n    blockHash: formatHash,\n}, {\n    index: [ \"logIndex\" ]\n});\n\nexport function formatReceiptLog(value: any): LogParams {\n    return _formatReceiptLog(value);\n}\n\nconst _formatTransactionReceipt = object({\n    to: allowNull(getAddress, null),\n    from: allowNull(getAddress, null),\n    contractAddress: allowNull(getAddress, null),\n    // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n    index: getNumber,\n    root: allowNull(hexlify),\n    gasUsed: getBigInt,\n    logsBloom: allowNull(formatData),\n    blockHash: formatHash,\n    hash: formatHash,\n    logs: arrayOf(formatReceiptLog),\n    blockNumber: getNumber,\n    //confirmations: allowNull(getNumber, null),\n    cumulativeGasUsed: getBigInt,\n    effectiveGasPrice: allowNull(getBigInt),\n    status: allowNull(getNumber),\n    type: allowNull(getNumber, 0)\n}, {\n    effectiveGasPrice: [ \"gasPrice\" ],\n    hash: [ \"transactionHash\" ],\n    index: [ \"transactionIndex\" ],\n});\n\nexport function formatTransactionReceipt(value: any): TransactionReceiptParams {\n    return _formatTransactionReceipt(value);\n}\n\nexport function formatTransactionResponse(value: any): TransactionResponseParams {\n\n    // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n    if (value.to && getBigInt(value.to) === BN_0) {\n        value.to = \"0x0000000000000000000000000000000000000000\";\n    }\n\n    const result = object({\n        hash: formatHash,\n\n        type: (value: any) => {\n            if (value === \"0x\" || value == null) { return 0; }\n            return getNumber(value);\n        },\n        accessList: allowNull(accessListify, null),\n\n        blockHash: allowNull(formatHash, null),\n        blockNumber: allowNull(getNumber, null),\n        transactionIndex: allowNull(getNumber, null),\n\n        //confirmations: allowNull(getNumber, null),\n\n        from: getAddress,\n\n        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set\n        gasPrice: allowNull(getBigInt),\n        maxPriorityFeePerGas: allowNull(getBigInt),\n        maxFeePerGas: allowNull(getBigInt),\n\n        gasLimit: getBigInt,\n        to: allowNull(getAddress, null),\n        value: getBigInt,\n        nonce: getNumber,\n        data: formatData,\n\n        creates: allowNull(getAddress, null),\n\n        chainId: allowNull(getBigInt, null)\n    }, {\n        data: [ \"input\" ],\n        gasLimit: [ \"gas\" ]\n    })(value);\n\n    // If to and creates are empty, populate the creates from the value\n    if (result.to == null && result.creates == null) {\n        result.creates = getCreateAddress(result);\n    }\n\n    // @TODO: Check fee data\n\n    // Add an access list to supported transaction types\n    if ((value.type === 1 || value.type === 2) && value.accessList == null) {\n        result.accessList = [ ];\n    }\n\n    // Compute the signature\n    if (value.signature) {\n        result.signature = Signature.from(value.signature);\n    } else {\n        result.signature = Signature.from(value);\n    }\n\n    // Some backends omit ChainId on legacy transactions, but we can compute it\n    if (result.chainId == null) {\n        const chainId = result.signature.legacyChainId;\n        if (chainId != null) { result.chainId = chainId; }\n    }\n\n\n    // @TODO: check chainID\n    /*\n    if (value.chainId != null) {\n        let chainId = value.chainId;\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        result.chainId = chainId;\n\n    } else {\n        let chainId = value.networkId;\n\n        // geth-etc returns chainId\n        if (chainId == null && result.v == null) {\n            chainId = value.chainId;\n        }\n\n        if (isHexString(chainId)) {\n            chainId = BigNumber.from(chainId).toNumber();\n        }\n\n        if (typeof(chainId) !== \"number\" && result.v != null) {\n            chainId = (result.v - 35) / 2;\n            if (chainId < 0) { chainId = 0; }\n            chainId = parseInt(chainId);\n        }\n\n        if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n        result.chainId = chainId;\n    }\n    */\n\n    // 0x0000... should actually be null\n    if (result.blockHash && getBigInt(result.blockHash) === BN_0) {\n        result.blockHash = null;\n    }\n\n    return result;\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}