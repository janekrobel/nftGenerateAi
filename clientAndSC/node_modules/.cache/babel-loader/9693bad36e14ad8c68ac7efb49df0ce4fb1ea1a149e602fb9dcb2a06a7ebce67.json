{"ast":null,"code":"const ethers = require('ethers');\nconst abi = require('./artifacts/contracts/AiNft.sol/AiNft.json');\nlet provider;\nlet signer;\nlet contractAddress = \"0xA669F6F1Cb417A13b16D80fc714d191f42783Cae\";\nlet infuraUrl = \"https://goerli.infura.io/v3/5bf64147f23b4d0593632928be0061c3\";\nexports.disconnectToMetamask = () => {\n  provider = \"\";\n  signer = \"\";\n};\nexports.connectToMetamask = async () => {\n  if (window.ethereum) {\n    try {\n      window.ethereum.request({\n        method: \"eth_requestAccounts\"\n      });\n      provider = new ethers.providers.JsonRpcProvider(infuraUrl);\n      signer = new ethers.providers.Web3Provider(window.ethereum).getSigner();\n      return true;\n    } catch (error) {\n      return false;\n    }\n  }\n};\nexports.mint = async imageLink => {\n  try {\n    if (signer && provider) {\n      const aiNftContract = new ethers.Contract(contractAddress, abi.abi, provider);\n      const options = {\n        value: ethers.utils.parseEther(\"0\")\n      };\n      const response = await aiNftContract.connect(signer).mint(imageLink, options);\n      const events = await response.wait();\n      return true;\n    }\n  } catch (err) {\n    return false;\n  }\n};\nexports.getAllLinks = async () => {\n  let srcList = [];\n  let account = signer.getAddress();\n  try {\n    if (account) {\n      const aiNftContract = new ethers.Contract(contractAddress, abi.abi, provider);\n      const response = await aiNftContract.getOwnedNFTIds(account);\n      for (let i = 0; i < response.length; i++) {\n        srcList.push(await aiNftContract.getUrl(response[i]));\n      }\n      return srcList;\n    } else {\n      return false;\n    }\n  } catch (err) {\n    console.log(err);\n    return false;\n  }\n};","map":{"version":3,"names":["ethers","require","abi","provider","signer","contractAddress","infuraUrl","exports","disconnectToMetamask","connectToMetamask","window","ethereum","request","method","providers","JsonRpcProvider","Web3Provider","getSigner","error","mint","imageLink","aiNftContract","Contract","options","value","utils","parseEther","response","connect","events","wait","err","getAllLinks","srcList","account","getAddress","getOwnedNFTIds","i","length","push","getUrl","console","log"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/src/contractModel.js"],"sourcesContent":["const ethers = require('ethers');\nconst abi = require('./artifacts/contracts/AiNft.sol/AiNft.json');\n\nlet provider;\nlet signer;\nlet contractAddress = \"0xA669F6F1Cb417A13b16D80fc714d191f42783Cae\";\nlet infuraUrl = \"https://goerli.infura.io/v3/5bf64147f23b4d0593632928be0061c3\";\n\nexports.disconnectToMetamask = () => {\n    provider = \"\"\n    signer = \"\"\n}\n\nexports.connectToMetamask = async () => {\n    if(window.ethereum) {\n        try{\n            window.ethereum.request({ method: \"eth_requestAccounts\" });\n            provider = new ethers.providers.JsonRpcProvider(infuraUrl);\n            signer = new ethers.providers.Web3Provider(window.ethereum).getSigner();\n            return true;\n        }\n        catch(error){\n            return false;\n        }\n    }\n}\n\nexports.mint = async (imageLink) => {\n    try{\n        if(signer && provider){\n            const aiNftContract = new ethers.Contract(contractAddress,abi.abi,provider);\n            const options = {value: ethers.utils.parseEther(\"0\")};\n            const response = await aiNftContract.connect(signer).mint(imageLink,options);\n            const events  = await response.wait();\n            return true;\n        }\n    }\n    catch(err){\n        return false;\n    }        \n}\nexports.getAllLinks = async () => {\n    let srcList = [];\n    let account = signer.getAddress();\n    try{\n        if(account){\n            const aiNftContract = new ethers.Contract(contractAddress,abi.abi,provider);\n            const response = await aiNftContract.getOwnedNFTIds(account);\n            for(let i = 0; i < response.length; i++){\n                srcList.push(await aiNftContract.getUrl(response[i]));\n            }\n            return(srcList);\n        }\n        else{\n            return false;\n        }\n    }\n    catch(err){\n        console.log(err);\n        return false;\n    }\n\n    \n}\n\n\n\n\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMC,GAAG,GAAGD,OAAO,CAAC,4CAA4C,CAAC;AAEjE,IAAIE,QAAQ;AACZ,IAAIC,MAAM;AACV,IAAIC,eAAe,GAAG,4CAA4C;AAClE,IAAIC,SAAS,GAAG,8DAA8D;AAE9EC,OAAO,CAACC,oBAAoB,GAAG,MAAM;EACjCL,QAAQ,GAAG,EAAE;EACbC,MAAM,GAAG,EAAE;AACf,CAAC;AAEDG,OAAO,CAACE,iBAAiB,GAAG,YAAY;EACpC,IAAGC,MAAM,CAACC,QAAQ,EAAE;IAChB,IAAG;MACCD,MAAM,CAACC,QAAQ,CAACC,OAAO,CAAC;QAAEC,MAAM,EAAE;MAAsB,CAAC,CAAC;MAC1DV,QAAQ,GAAG,IAAIH,MAAM,CAACc,SAAS,CAACC,eAAe,CAACT,SAAS,CAAC;MAC1DF,MAAM,GAAG,IAAIJ,MAAM,CAACc,SAAS,CAACE,YAAY,CAACN,MAAM,CAACC,QAAQ,CAAC,CAACM,SAAS,EAAE;MACvE,OAAO,IAAI;IACf,CAAC,CACD,OAAMC,KAAK,EAAC;MACR,OAAO,KAAK;IAChB;EACJ;AACJ,CAAC;AAEDX,OAAO,CAACY,IAAI,GAAG,MAAOC,SAAS,IAAK;EAChC,IAAG;IACC,IAAGhB,MAAM,IAAID,QAAQ,EAAC;MAClB,MAAMkB,aAAa,GAAG,IAAIrB,MAAM,CAACsB,QAAQ,CAACjB,eAAe,EAACH,GAAG,CAACA,GAAG,EAACC,QAAQ,CAAC;MAC3E,MAAMoB,OAAO,GAAG;QAACC,KAAK,EAAExB,MAAM,CAACyB,KAAK,CAACC,UAAU,CAAC,GAAG;MAAC,CAAC;MACrD,MAAMC,QAAQ,GAAG,MAAMN,aAAa,CAACO,OAAO,CAACxB,MAAM,CAAC,CAACe,IAAI,CAACC,SAAS,EAACG,OAAO,CAAC;MAC5E,MAAMM,MAAM,GAAI,MAAMF,QAAQ,CAACG,IAAI,EAAE;MACrC,OAAO,IAAI;IACf;EACJ,CAAC,CACD,OAAMC,GAAG,EAAC;IACN,OAAO,KAAK;EAChB;AACJ,CAAC;AACDxB,OAAO,CAACyB,WAAW,GAAG,YAAY;EAC9B,IAAIC,OAAO,GAAG,EAAE;EAChB,IAAIC,OAAO,GAAG9B,MAAM,CAAC+B,UAAU,EAAE;EACjC,IAAG;IACC,IAAGD,OAAO,EAAC;MACP,MAAMb,aAAa,GAAG,IAAIrB,MAAM,CAACsB,QAAQ,CAACjB,eAAe,EAACH,GAAG,CAACA,GAAG,EAACC,QAAQ,CAAC;MAC3E,MAAMwB,QAAQ,GAAG,MAAMN,aAAa,CAACe,cAAc,CAACF,OAAO,CAAC;MAC5D,KAAI,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,QAAQ,CAACW,MAAM,EAAED,CAAC,EAAE,EAAC;QACpCJ,OAAO,CAACM,IAAI,CAAC,MAAMlB,aAAa,CAACmB,MAAM,CAACb,QAAQ,CAACU,CAAC,CAAC,CAAC,CAAC;MACzD;MACA,OAAOJ,OAAO;IAClB,CAAC,MACG;MACA,OAAO,KAAK;IAChB;EACJ,CAAC,CACD,OAAMF,GAAG,EAAC;IACNU,OAAO,CAACC,GAAG,CAACX,GAAG,CAAC;IAChB,OAAO,KAAK;EAChB;AAGJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}