{"ast":null,"code":"import { __assign, __values } from \"tslib\";\n/* eslint-disable max-lines */\nimport { Scope } from '@sentry/hub';\nimport { SessionStatus } from '@sentry/types';\nimport { dateTimestampInSeconds, Dsn, isPrimitive, isThenable, logger, normalize, SentryError, SyncPromise, truncate, uuid4 } from '@sentry/utils';\nimport { setupIntegrations } from './integration';\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient.prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nvar BaseClient = /** @class */function () {\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  function BaseClient(backendClass, options) {\n    /** Array of used integrations. */\n    this._integrations = {};\n    /** Number of call being processed */\n    this._processing = 0;\n    this._backend = new backendClass(options);\n    this._options = options;\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n  }\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  BaseClient.prototype.captureException = function (exception, hint, scope) {\n    var _this = this;\n    var eventId = hint && hint.event_id;\n    this._process(this._getBackend().eventFromException(exception, hint).then(function (event) {\n      return _this._captureEvent(event, hint, scope);\n    }).then(function (result) {\n      eventId = result;\n    }));\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.captureMessage = function (message, level, hint, scope) {\n    var _this = this;\n    var eventId = hint && hint.event_id;\n    var promisedEvent = isPrimitive(message) ? this._getBackend().eventFromMessage(String(message), level, hint) : this._getBackend().eventFromException(message, hint);\n    this._process(promisedEvent.then(function (event) {\n      return _this._captureEvent(event, hint, scope);\n    }).then(function (result) {\n      eventId = result;\n    }));\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.captureEvent = function (event, hint, scope) {\n    var eventId = hint && hint.event_id;\n    this._process(this._captureEvent(event, hint, scope).then(function (result) {\n      eventId = result;\n    }));\n    return eventId;\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.captureSession = function (session) {\n    if (!session.release) {\n      logger.warn('Discarded session because of missing release');\n    } else {\n      this._sendSession(session);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.getDsn = function () {\n    return this._dsn;\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.getOptions = function () {\n    return this._options;\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.flush = function (timeout) {\n    var _this = this;\n    return this._isClientProcessing(timeout).then(function (ready) {\n      return _this._getBackend().getTransport().close(timeout).then(function (transportFlushed) {\n        return ready && transportFlushed;\n      });\n    });\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.close = function (timeout) {\n    var _this = this;\n    return this.flush(timeout).then(function (result) {\n      _this.getOptions().enabled = false;\n      return result;\n    });\n  };\n  /**\n   * Sets up the integrations\n   */\n  BaseClient.prototype.setupIntegrations = function () {\n    if (this._isEnabled()) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  };\n  /**\n   * @inheritDoc\n   */\n  BaseClient.prototype.getIntegration = function (integration) {\n    try {\n      return this._integrations[integration.id] || null;\n    } catch (_oO) {\n      logger.warn(\"Cannot retrieve integration \" + integration.id + \" from the current Client\");\n      return null;\n    }\n  };\n  /** Updates existing session based on the provided event */\n  BaseClient.prototype._updateSessionFromEvent = function (session, event) {\n    var e_1, _a;\n    var crashed = false;\n    var errored = false;\n    var userAgent;\n    var exceptions = event.exception && event.exception.values;\n    if (exceptions) {\n      errored = true;\n      try {\n        for (var exceptions_1 = __values(exceptions), exceptions_1_1 = exceptions_1.next(); !exceptions_1_1.done; exceptions_1_1 = exceptions_1.next()) {\n          var ex = exceptions_1_1.value;\n          var mechanism = ex.mechanism;\n          if (mechanism && mechanism.handled === false) {\n            crashed = true;\n            break;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (exceptions_1_1 && !exceptions_1_1.done && (_a = exceptions_1.return)) _a.call(exceptions_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }\n    var user = event.user;\n    if (!session.userAgent) {\n      var headers = event.request ? event.request.headers : {};\n      for (var key in headers) {\n        if (key.toLowerCase() === 'user-agent') {\n          userAgent = headers[key];\n          break;\n        }\n      }\n    }\n    session.update(__assign(__assign({}, crashed && {\n      status: SessionStatus.Crashed\n    }), {\n      user: user,\n      userAgent: userAgent,\n      errors: session.errors + Number(errored || crashed)\n    }));\n  };\n  /** Deliver captured session to Sentry */\n  BaseClient.prototype._sendSession = function (session) {\n    this._getBackend().sendSession(session);\n  };\n  /** Waits for the client to be done with processing. */\n  BaseClient.prototype._isClientProcessing = function (timeout) {\n    var _this = this;\n    return new SyncPromise(function (resolve) {\n      var ticked = 0;\n      var tick = 1;\n      var interval = setInterval(function () {\n        if (_this._processing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  };\n  /** Returns the current backend. */\n  BaseClient.prototype._getBackend = function () {\n    return this._backend;\n  };\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  BaseClient.prototype._isEnabled = function () {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  };\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  BaseClient.prototype._prepareEvent = function (event, scope, hint) {\n    var _this = this;\n    var _a = this.getOptions().normalizeDepth,\n      normalizeDepth = _a === void 0 ? 3 : _a;\n    var prepared = __assign(__assign({}, event), {\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || dateTimestampInSeconds()\n    });\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    var finalScope = scope;\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n    // We prepare the result here with a resolved Event.\n    var result = SyncPromise.resolve(prepared);\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n    return result.then(function (evt) {\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return _this._normalizeEvent(evt, normalizeDepth);\n      }\n      return evt;\n    });\n  };\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  BaseClient.prototype._normalizeEvent = function (event, depth) {\n    if (!event) {\n      return null;\n    }\n    var normalized = __assign(__assign(__assign(__assign(__assign({}, event), event.breadcrumbs && {\n      breadcrumbs: event.breadcrumbs.map(function (b) {\n        return __assign(__assign({}, b), b.data && {\n          data: normalize(b.data, depth)\n        });\n      })\n    }), event.user && {\n      user: normalize(event.user, depth)\n    }), event.contexts && {\n      contexts: normalize(event.contexts, depth)\n    }), event.extra && {\n      extra: normalize(event.extra, depth)\n    });\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n    return normalized;\n  };\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  BaseClient.prototype._applyClientOptions = function (event) {\n    var options = this.getOptions();\n    var environment = options.environment,\n      release = options.release,\n      dist = options.dist,\n      _a = options.maxValueLength,\n      maxValueLength = _a === void 0 ? 250 : _a;\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n    var exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n    var request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  };\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param sdkInfo The sdkInfo of the event that will be filled with all integrations.\n   */\n  BaseClient.prototype._applyIntegrationsMetadata = function (event) {\n    var sdkInfo = event.sdk;\n    var integrationsArray = Object.keys(this._integrations);\n    if (sdkInfo && integrationsArray.length > 0) {\n      sdkInfo.integrations = integrationsArray;\n    }\n  };\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n  BaseClient.prototype._sendEvent = function (event) {\n    this._getBackend().sendEvent(event);\n  };\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  BaseClient.prototype._captureEvent = function (event, hint, scope) {\n    return this._processEvent(event, hint, scope).then(function (finalEvent) {\n      return finalEvent.event_id;\n    }, function (reason) {\n      logger.error(reason);\n      return undefined;\n    });\n  };\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  BaseClient.prototype._processEvent = function (event, hint, scope) {\n    var _this = this;\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    var _a = this.getOptions(),\n      beforeSend = _a.beforeSend,\n      sampleRate = _a.sampleRate;\n    if (!this._isEnabled()) {\n      return SyncPromise.reject(new SentryError('SDK not enabled, will not send event.'));\n    }\n    var isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      return SyncPromise.reject(new SentryError(\"Discarding event because it's not included in the random sample (sampling rate = \" + sampleRate + \")\"));\n    }\n    return this._prepareEvent(event, scope, hint).then(function (prepared) {\n      if (prepared === null) {\n        throw new SentryError('An event processor returned null, will not send event.');\n      }\n      var isInternalException = hint && hint.data && hint.data.__sentry__ === true;\n      if (isInternalException || isTransaction || !beforeSend) {\n        return prepared;\n      }\n      var beforeSendResult = beforeSend(prepared, hint);\n      if (typeof beforeSendResult === 'undefined') {\n        throw new SentryError('`beforeSend` method has to return `null` or a valid event.');\n      } else if (isThenable(beforeSendResult)) {\n        return beforeSendResult.then(function (event) {\n          return event;\n        }, function (e) {\n          throw new SentryError(\"beforeSend rejected with \" + e);\n        });\n      }\n      return beforeSendResult;\n    }).then(function (processedEvent) {\n      if (processedEvent === null) {\n        throw new SentryError('`beforeSend` returned `null`, will not send event.');\n      }\n      var session = scope && scope.getSession && scope.getSession();\n      if (!isTransaction && session) {\n        _this._updateSessionFromEvent(session, processedEvent);\n      }\n      _this._sendEvent(processedEvent);\n      return processedEvent;\n    }).then(null, function (reason) {\n      if (reason instanceof SentryError) {\n        throw reason;\n      }\n      _this.captureException(reason, {\n        data: {\n          __sentry__: true\n        },\n        originalException: reason\n      });\n      throw new SentryError(\"Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: \" + reason);\n    });\n  };\n  /**\n   * Occupies the client with processing and event\n   */\n  BaseClient.prototype._process = function (promise) {\n    var _this = this;\n    this._processing += 1;\n    promise.then(function (value) {\n      _this._processing -= 1;\n      return value;\n    }, function (reason) {\n      _this._processing -= 1;\n      return reason;\n    });\n  };\n  return BaseClient;\n}();\nexport { BaseClient };","map":{"version":3,"mappings":"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","names":["Scope","SessionStatus","dateTimestampInSeconds","Dsn","isPrimitive","isThenable","logger","normalize","SentryError","SyncPromise","truncate","uuid4","setupIntegrations","backendClass","options","_backend","_options","dsn","_dsn","BaseClient","exception","hint","scope","eventId","event_id","_process","_getBackend","eventFromException","then","_captureEvent","event","result","message","level","promisedEvent","eventFromMessage","String","session","release","warn","_sendSession","timeout","_isClientProcessing","_this","getTransport","close","transportFlushed","flush","getOptions","enabled","_isEnabled","_integrations","integration","id","_oO","crashed","errored","userAgent","exceptions","values","ex","mechanism","handled","user","headers","request","key","toLowerCase","update","status","Crashed","errors","Number","sendSession","ticked","tick","interval","setInterval","_processing","clearInterval","resolve","undefined","normalizeDepth","prepared","timestamp","_applyClientOptions","_applyIntegrationsMetadata","finalScope","captureContext","clone","applyToEvent","_normalizeEvent","evt","depth","normalized","breadcrumbs","map","b","data","contexts","extra","trace","dist","_a","maxValueLength","environment","value","url","sdkInfo","sdk","integrationsArray","Object","keys","length","integrations","sendEvent","_processEvent","finalEvent","error","reason","beforeSend","sampleRate","reject","isTransaction","type","Math","random","_prepareEvent","isInternalException","__sentry__","beforeSendResult","e","processedEvent","getSession","_updateSessionFromEvent","_sendEvent","captureException","originalException","promise"],"sources":["/Users/janrobel/Documents/PersonalProjekty/nftGenerateAi/clientAndContract/node_modules/@sentry/core/src/baseclient.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport { Scope, Session } from '@sentry/hub';\nimport {\n  Client,\n  Event,\n  EventHint,\n  Integration,\n  IntegrationClass,\n  Options,\n  SessionStatus,\n  Severity,\n} from '@sentry/types';\nimport {\n  dateTimestampInSeconds,\n  Dsn,\n  isPrimitive,\n  isThenable,\n  logger,\n  normalize,\n  SentryError,\n  SyncPromise,\n  truncate,\n  uuid4,\n} from '@sentry/utils';\n\nimport { Backend, BackendClass } from './basebackend';\nimport { IntegrationIndex, setupIntegrations } from './integration';\n\n/**\n * Base implementation for all JavaScript SDK clients.\n *\n * Call the constructor with the corresponding backend constructor and options\n * specific to the client subclass. To access these options later, use\n * {@link Client.getOptions}. Also, the Backend instance is available via\n * {@link Client.getBackend}.\n *\n * If a Dsn is specified in the options, it will be parsed and stored. Use\n * {@link Client.getDsn} to retrieve the Dsn at any moment. In case the Dsn is\n * invalid, the constructor will throw a {@link SentryException}. Note that\n * without a valid Dsn, the SDK will not send any events to Sentry.\n *\n * Before sending an event via the backend, it is passed through\n * {@link BaseClient.prepareEvent} to add SDK information and scope data\n * (breadcrumbs and context). To add more custom information, override this\n * method and extend the resulting prepared event.\n *\n * To issue automatically created events (e.g. via instrumentation), use\n * {@link Client.captureEvent}. It will prepare the event and pass it through\n * the callback lifecycle. To issue auto-breadcrumbs, use\n * {@link Client.addBreadcrumb}.\n *\n * @example\n * class NodeClient extends BaseClient<NodeBackend, NodeOptions> {\n *   public constructor(options: NodeOptions) {\n *     super(NodeBackend, options);\n *   }\n *\n *   // ...\n * }\n */\nexport abstract class BaseClient<B extends Backend, O extends Options> implements Client<O> {\n  /**\n   * The backend used to physically interact in the environment. Usually, this\n   * will correspond to the client. When composing SDKs, however, the Backend\n   * from the root SDK will be used.\n   */\n  protected readonly _backend: B;\n\n  /** Options passed to the SDK. */\n  protected readonly _options: O;\n\n  /** The client Dsn, if specified in options. Without this Dsn, the SDK will be disabled. */\n  protected readonly _dsn?: Dsn;\n\n  /** Array of used integrations. */\n  protected _integrations: IntegrationIndex = {};\n\n  /** Number of call being processed */\n  protected _processing: number = 0;\n\n  /**\n   * Initializes this client instance.\n   *\n   * @param backendClass A constructor function to create the backend.\n   * @param options Options for the client.\n   */\n  protected constructor(backendClass: BackendClass<B, O>, options: O) {\n    this._backend = new backendClass(options);\n    this._options = options;\n\n    if (options.dsn) {\n      this._dsn = new Dsn(options.dsn);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/explicit-module-boundary-types\n  public captureException(exception: any, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._getBackend()\n        .eventFromException(exception, hint)\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureMessage(message: string, level?: Severity, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    const promisedEvent = isPrimitive(message)\n      ? this._getBackend().eventFromMessage(String(message), level, hint)\n      : this._getBackend().eventFromException(message, hint);\n\n    this._process(\n      promisedEvent\n        .then(event => this._captureEvent(event, hint, scope))\n        .then(result => {\n          eventId = result;\n        }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string | undefined {\n    let eventId: string | undefined = hint && hint.event_id;\n\n    this._process(\n      this._captureEvent(event, hint, scope).then(result => {\n        eventId = result;\n      }),\n    );\n\n    return eventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureSession(session: Session): void {\n    if (!session.release) {\n      logger.warn('Discarded session because of missing release');\n    } else {\n      this._sendSession(session);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getDsn(): Dsn | undefined {\n    return this._dsn;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getOptions(): O {\n    return this._options;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public flush(timeout?: number): PromiseLike<boolean> {\n    return this._isClientProcessing(timeout).then(ready => {\n      return this._getBackend()\n        .getTransport()\n        .close(timeout)\n        .then(transportFlushed => ready && transportFlushed);\n    });\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public close(timeout?: number): PromiseLike<boolean> {\n    return this.flush(timeout).then(result => {\n      this.getOptions().enabled = false;\n      return result;\n    });\n  }\n\n  /**\n   * Sets up the integrations\n   */\n  public setupIntegrations(): void {\n    if (this._isEnabled()) {\n      this._integrations = setupIntegrations(this._options);\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public getIntegration<T extends Integration>(integration: IntegrationClass<T>): T | null {\n    try {\n      return (this._integrations[integration.id] as T) || null;\n    } catch (_oO) {\n      logger.warn(`Cannot retrieve integration ${integration.id} from the current Client`);\n      return null;\n    }\n  }\n\n  /** Updates existing session based on the provided event */\n  protected _updateSessionFromEvent(session: Session, event: Event): void {\n    let crashed = false;\n    let errored = false;\n    let userAgent;\n    const exceptions = event.exception && event.exception.values;\n\n    if (exceptions) {\n      errored = true;\n\n      for (const ex of exceptions) {\n        const mechanism = ex.mechanism;\n        if (mechanism && mechanism.handled === false) {\n          crashed = true;\n          break;\n        }\n      }\n    }\n\n    const user = event.user;\n    if (!session.userAgent) {\n      const headers = event.request ? event.request.headers : {};\n      for (const key in headers) {\n        if (key.toLowerCase() === 'user-agent') {\n          userAgent = headers[key];\n          break;\n        }\n      }\n    }\n\n    session.update({\n      ...(crashed && { status: SessionStatus.Crashed }),\n      user,\n      userAgent,\n      errors: session.errors + Number(errored || crashed),\n    });\n  }\n\n  /** Deliver captured session to Sentry */\n  protected _sendSession(session: Session): void {\n    this._getBackend().sendSession(session);\n  }\n\n  /** Waits for the client to be done with processing. */\n  protected _isClientProcessing(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise(resolve => {\n      let ticked: number = 0;\n      const tick: number = 1;\n\n      const interval = setInterval(() => {\n        if (this._processing == 0) {\n          clearInterval(interval);\n          resolve(true);\n        } else {\n          ticked += tick;\n          if (timeout && ticked >= timeout) {\n            clearInterval(interval);\n            resolve(false);\n          }\n        }\n      }, tick);\n    });\n  }\n\n  /** Returns the current backend. */\n  protected _getBackend(): B {\n    return this._backend;\n  }\n\n  /** Determines whether this SDK is enabled and a valid Dsn is present. */\n  protected _isEnabled(): boolean {\n    return this.getOptions().enabled !== false && this._dsn !== undefined;\n  }\n\n  /**\n   * Adds common information to events.\n   *\n   * The information includes release and environment from `options`,\n   * breadcrumbs and context (extra, tags and user) from the scope.\n   *\n   * Information that is already present in the event is never overwritten. For\n   * nested objects, such as the context, keys are merged.\n   *\n   * @param event The original event.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A new event with more information.\n   */\n  protected _prepareEvent(event: Event, scope?: Scope, hint?: EventHint): PromiseLike<Event | null> {\n    const { normalizeDepth = 3 } = this.getOptions();\n    const prepared: Event = {\n      ...event,\n      event_id: event.event_id || (hint && hint.event_id ? hint.event_id : uuid4()),\n      timestamp: event.timestamp || dateTimestampInSeconds(),\n    };\n\n    this._applyClientOptions(prepared);\n    this._applyIntegrationsMetadata(prepared);\n\n    // If we have scope given to us, use it as the base for further modifications.\n    // This allows us to prevent unnecessary copying of data if `captureContext` is not provided.\n    let finalScope = scope;\n    if (hint && hint.captureContext) {\n      finalScope = Scope.clone(finalScope).update(hint.captureContext);\n    }\n\n    // We prepare the result here with a resolved Event.\n    let result = SyncPromise.resolve<Event | null>(prepared);\n\n    // This should be the last thing called, since we want that\n    // {@link Hub.addEventProcessor} gets the finished prepared event.\n    if (finalScope) {\n      // In case we have a hub we reassign it.\n      result = finalScope.applyToEvent(prepared, hint);\n    }\n\n    return result.then(evt => {\n      if (typeof normalizeDepth === 'number' && normalizeDepth > 0) {\n        return this._normalizeEvent(evt, normalizeDepth);\n      }\n      return evt;\n    });\n  }\n\n  /**\n   * Applies `normalize` function on necessary `Event` attributes to make them safe for serialization.\n   * Normalized keys:\n   * - `breadcrumbs.data`\n   * - `user`\n   * - `contexts`\n   * - `extra`\n   * @param event Event\n   * @returns Normalized event\n   */\n  protected _normalizeEvent(event: Event | null, depth: number): Event | null {\n    if (!event) {\n      return null;\n    }\n\n    const normalized = {\n      ...event,\n      ...(event.breadcrumbs && {\n        breadcrumbs: event.breadcrumbs.map(b => ({\n          ...b,\n          ...(b.data && {\n            data: normalize(b.data, depth),\n          }),\n        })),\n      }),\n      ...(event.user && {\n        user: normalize(event.user, depth),\n      }),\n      ...(event.contexts && {\n        contexts: normalize(event.contexts, depth),\n      }),\n      ...(event.extra && {\n        extra: normalize(event.extra, depth),\n      }),\n    };\n    // event.contexts.trace stores information about a Transaction. Similarly,\n    // event.spans[] stores information about child Spans. Given that a\n    // Transaction is conceptually a Span, normalization should apply to both\n    // Transactions and Spans consistently.\n    // For now the decision is to skip normalization of Transactions and Spans,\n    // so this block overwrites the normalized event to add back the original\n    // Transaction information prior to normalization.\n    if (event.contexts && event.contexts.trace) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      normalized.contexts.trace = event.contexts.trace;\n    }\n    return normalized;\n  }\n\n  /**\n   *  Enhances event using the client configuration.\n   *  It takes care of all \"static\" values like environment, release and `dist`,\n   *  as well as truncating overly long values.\n   * @param event event instance to be enhanced\n   */\n  protected _applyClientOptions(event: Event): void {\n    const options = this.getOptions();\n    const { environment, release, dist, maxValueLength = 250 } = options;\n\n    if (!('environment' in event)) {\n      event.environment = 'environment' in options ? environment : 'production';\n    }\n\n    if (event.release === undefined && release !== undefined) {\n      event.release = release;\n    }\n\n    if (event.dist === undefined && dist !== undefined) {\n      event.dist = dist;\n    }\n\n    if (event.message) {\n      event.message = truncate(event.message, maxValueLength);\n    }\n\n    const exception = event.exception && event.exception.values && event.exception.values[0];\n    if (exception && exception.value) {\n      exception.value = truncate(exception.value, maxValueLength);\n    }\n\n    const request = event.request;\n    if (request && request.url) {\n      request.url = truncate(request.url, maxValueLength);\n    }\n  }\n\n  /**\n   * This function adds all used integrations to the SDK info in the event.\n   * @param sdkInfo The sdkInfo of the event that will be filled with all integrations.\n   */\n  protected _applyIntegrationsMetadata(event: Event): void {\n    const sdkInfo = event.sdk;\n    const integrationsArray = Object.keys(this._integrations);\n    if (sdkInfo && integrationsArray.length > 0) {\n      sdkInfo.integrations = integrationsArray;\n    }\n  }\n\n  /**\n   * Tells the backend to send this event\n   * @param event The Sentry event to send\n   */\n  protected _sendEvent(event: Event): void {\n    this._getBackend().sendEvent(event);\n  }\n\n  /**\n   * Processes the event and logs an error in case of rejection\n   * @param event\n   * @param hint\n   * @param scope\n   */\n  protected _captureEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<string | undefined> {\n    return this._processEvent(event, hint, scope).then(\n      finalEvent => {\n        return finalEvent.event_id;\n      },\n      reason => {\n        logger.error(reason);\n        return undefined;\n      },\n    );\n  }\n\n  /**\n   * Processes an event (either error or message) and sends it to Sentry.\n   *\n   * This also adds breadcrumbs and context information to the event. However,\n   * platform specific meta data (such as the User's IP address) must be added\n   * by the SDK implementor.\n   *\n   *\n   * @param event The event to send to Sentry.\n   * @param hint May contain additional information about the original exception.\n   * @param scope A scope containing event metadata.\n   * @returns A SyncPromise that resolves with the event or rejects in case event was/will not be send.\n   */\n  protected _processEvent(event: Event, hint?: EventHint, scope?: Scope): PromiseLike<Event> {\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    const { beforeSend, sampleRate } = this.getOptions();\n\n    if (!this._isEnabled()) {\n      return SyncPromise.reject(new SentryError('SDK not enabled, will not send event.'));\n    }\n\n    const isTransaction = event.type === 'transaction';\n    // 1.0 === 100% events are sent\n    // 0.0 === 0% events are sent\n    // Sampling for transaction happens somewhere else\n    if (!isTransaction && typeof sampleRate === 'number' && Math.random() > sampleRate) {\n      return SyncPromise.reject(\n        new SentryError(\n          `Discarding event because it's not included in the random sample (sampling rate = ${sampleRate})`,\n        ),\n      );\n    }\n\n    return this._prepareEvent(event, scope, hint)\n      .then(prepared => {\n        if (prepared === null) {\n          throw new SentryError('An event processor returned null, will not send event.');\n        }\n\n        const isInternalException = hint && hint.data && (hint.data as { __sentry__: boolean }).__sentry__ === true;\n        if (isInternalException || isTransaction || !beforeSend) {\n          return prepared;\n        }\n\n        const beforeSendResult = beforeSend(prepared, hint);\n        if (typeof beforeSendResult === 'undefined') {\n          throw new SentryError('`beforeSend` method has to return `null` or a valid event.');\n        } else if (isThenable(beforeSendResult)) {\n          return (beforeSendResult as PromiseLike<Event | null>).then(\n            event => event,\n            e => {\n              throw new SentryError(`beforeSend rejected with ${e}`);\n            },\n          );\n        }\n        return beforeSendResult;\n      })\n      .then(processedEvent => {\n        if (processedEvent === null) {\n          throw new SentryError('`beforeSend` returned `null`, will not send event.');\n        }\n\n        const session = scope && scope.getSession && scope.getSession();\n        if (!isTransaction && session) {\n          this._updateSessionFromEvent(session, processedEvent);\n        }\n\n        this._sendEvent(processedEvent);\n        return processedEvent;\n      })\n      .then(null, reason => {\n        if (reason instanceof SentryError) {\n          throw reason;\n        }\n\n        this.captureException(reason, {\n          data: {\n            __sentry__: true,\n          },\n          originalException: reason as Error,\n        });\n        throw new SentryError(\n          `Event processing pipeline threw an error, original event will not be sent. Details have been sent as a new event.\\nReason: ${reason}`,\n        );\n      });\n  }\n\n  /**\n   * Occupies the client with processing and event\n   */\n  protected _process<T>(promise: PromiseLike<T>): void {\n    this._processing += 1;\n    promise.then(\n      value => {\n        this._processing -= 1;\n        return value;\n      },\n      reason => {\n        this._processing -= 1;\n        return reason;\n      },\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}